// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BaseCmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DDRCommProto {

  /// <summary>Holder for reflection information generated from BaseCmd.proto</summary>
  public static partial class BaseCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for BaseCmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1CYXNlQ21kLnByb3RvEgxERFJDb21tUHJvdG8isQIKDENvbW1vbkhlYWRl",
            "chIQCghib2R5VHlwZRgBIAEoCRI6Cg1mbG93RGlyZWN0aW9uGAIgAygOMiMu",
            "RERSQ29tbVByb3RvLkNvbW1vbkhlYWRlci5lRmxvd0RpchI2CghkZXN0VHlw",
            "ZRgDIAMoDjIkLkREUkNvbW1Qcm90by5Db21tb25IZWFkZXIuZURlc3RUeXBl",
            "EhAKCGRlc3RJbmZvGAQgAygJIlYKCGVGbG93RGlyEggKBFJTMk0QABIJCgVS",
            "UzJSUhABEgkKBVJSMlJTEAISCAoETFMyQxADEggKBEMyTFMQBBIKCgZMUzJM",
            "U00QBRIKCgZMU00yTFMQBiIxCgllRGVzdFR5cGUSCgoGTm9EZXN0EAASCwoH",
            "TFNNTmFtZRABEgsKB1JvdXRpbmcQAiIdCgloZWFydEJlYXQSEAoId2hhdGV2",
            "ZXIYASABKAkiMwoIYmNMU0FkZHISDAoEbmFtZRgBIAEoCRILCgNpcHMYAiAD",
            "KAkSDAoEcG9ydBgDIAEoBSLEAgoIcmVxTG9naW4SLQoEdHlwZRgBIAEoDjIf",
            "LkREUkNvbW1Qcm90by5yZXFMb2dpbi5lQ2x0VHlwZRIQCgh1c2VybmFtZRgC",
            "IAEoCRIPCgdyb2JvdElEGAMgASgJEhAKCHJvYm90UFdEGAQgASgJEg8KB2Ns",
            "dE9wTHYYBSABKAUSCwoDVUlEGAYgASgFEjoKC2F2U3RyZWFtUmVxGAcgAygL",
            "MiUuRERSQ29tbVByb3RvLnJlcUxvZ2luLm1zZ0FWU3RyZWFtUmVxGkYKDm1z",
            "Z0FWU3RyZWFtUmVxEg4KBmF2VHlwZRgBIAEoBRIOCgZjaE5hbWUYAiABKAkS",
            "FAoMYmFuZHdpZHRoUmVxGAMgASgFIjIKCGVDbHRUeXBlEgoKBmNsaWVudBAA",
            "EhEKDWFuZHJvaWRDbGllbnQQARIHCgNMU00QAiKoAgoJcmVzcExvZ2luEjYK",
            "B3JldGNvZGUYASABKA4yJS5ERFJDb21tUHJvdG8ucmVzcExvZ2luLmVMb2dp",
            "blJldENvZGUSMgoIeW91clJvbGUYAiABKA4yIC5ERFJDb21tUHJvdG8ucmVz",
            "cExvZ2luLmVDbHRUeXBlEgsKA1VJRBgDIAEoBSJuCg1lTG9naW5SZXRDb2Rl",
            "EgsKB3N1Y2Nlc3MQABIPCgtzZXJ2ZXJfYnVzeRABEhgKFHNlcnZlcl9saW1p",
            "dF9yZWFjaGVkEAISDQoJVUlEX2Vycm9yEAMSFgoSaW5jb3JyZWN0X3Bhc3N3",
            "b3JkEAQiMgoIZUNsdFR5cGUSCgoGY2xpZW50EAASEQoNYW5kcm9pZENsaWVu",
            "dBABEgcKA0xTTRACInMKFG5vdGlmeVRlcm1pbmFsQWNjZXNzEhcKD2JSUkNv",
            "bm5lY3RlZDJSUxgBIAEoBRILCgNiT3AYAiABKAUSEQoJbk1vbml0b3JzGAMg",
            "ASgFEhAKCG5DbGllbnRzGAQgASgFEhAKCG5hbWVMU01zGAUgAygJIpQBCg9u",
            "b3RpZnlTZXJBY2Nlc3MSEAoIbkNsaWVudHMYASABKAUSEAoIY1RvcE9wTHYY",
            "AiABKAUSEgoKY1RvcE9wVGltZRgDIAEoAxIRCgluTW9uaXRvcnMYBCABKAUS",
            "EAoIbVRvcE9wTHYYBSABKAUSEgoKbVRvcE9wVGltZRgGIAEoBRIQCghuYW1l",
            "c0xTTRgHIAMoCSLXAgoObm90aWZ5QVZTdHJlYW0SRQoPcmVzZXJ2ZWRDaGFu",
            "bmVsGAEgASgLMiwuRERSQ29tbVByb3RvLm5vdGlmeUFWU3RyZWFtLmZ1bGxD",
            "aGFubmVsSW5mbxJKChRyb2JvdE1vbml0b3JDaGFubmVscxgCIAMoCzIsLkRE",
            "UkNvbW1Qcm90by5ub3RpZnlBVlN0cmVhbS5mdWxsQ2hhbm5lbEluZm8asQEK",
            "D2Z1bGxDaGFubmVsSW5mbxIPCgdkZXZUeXBlGAEgASgFEhAKCGRhdGFUeXBl",
            "GAIgASgFEhYKDmxvY2FsUmVzQWNjU3RyGAMgASgJEhoKEmNoYW5uZWxEZXNj",
            "cmlwdGlvbhgEIAEoCRINCgVid1JlcRgFIAEoBRIQCghyZW1vdGVJUBgGIAEo",
            "AxISCgpyZW1vdGVQb3J0GAcgASgFEhIKCnJlbW90ZVBhc3MYCCABKAkioQEK",
            "B3JlcVRhbGsSNQoKY2FsbGVyVHlwZRgBIAEoDjIhLkREUkNvbW1Qcm90by5y",
            "ZXFUYWxrLmVDYWxsZXJUeXBlEgsKA2lkMRgCIAEoBRILCgNpZDIYAyABKAUS",
            "DgoGYXZUeXBlGAQgASgFIjUKC2VDYWxsZXJUeXBlEgoKBmNsaWVudBAAEgsK",
            "B21vbml0b3IQARINCglyb2JvdF9MU00QAiKpAQoIcmVzcFRhbGsSOgoMcmVj",
            "ZWl2ZXJUeXBlGAEgASgOMiQuRERSQ29tbVByb3RvLnJlc3BUYWxrLmVSZWNl",
            "aXZlclR5cGUSCwoDaWQxGAIgASgFEgsKA2lkMhgDIAEoBRIOCgZhdlR5cGUY",
            "BCABKAUiNwoNZVJlY2VpdmVyVHlwZRIKCgZjbGllbnQQABILCgdtb25pdG9y",
            "EAESDQoJcm9ib3RfTFNNEAIiJAoDY21kEg0KBWNtZElEGAEgASgDEg4KBmNt",
            "ZE1zZxgCIAEoCSIpCgdyZXNwQ21kEg0KBWNtZElEGAEgASgDEg8KB3Jlc3BN",
            "c2cYAiABKAkidQoHcmVxRmlsZRIzCgl6aXBGb3JtYXQYASABKA4yIC5ERFJD",
            "b21tUHJvdG8ucmVxRmlsZS5lWmlwRm9ybWF0EhMKC2ZpbGVJbnFUZXh0GAIg",
            "ASgJIiAKCmVaaXBGb3JtYXQSCQoFbm9aaXAQABIHCgNaaXAQASJ0CghyZXNw",
            "RmlsZRI0Cgl6aXBGb3JtYXQYASABKA4yIS5ERFJDb21tUHJvdG8ucmVzcEZp",
            "bGUuZVppcEZvcm1hdBIQCghmaWxlUmVzcBgCIAEoCSIgCgplWmlwRm9ybWF0",
            "EgkKBW5vWmlwEAASBwoDWmlwEAEiIQoMbm90aWZ5U3RhdHVzEhEKCXN0YXR1",
            "c01zZxgBIAEoCSIfCgtub3RpZnlBbGFybRIQCghhbGFybU1zZxgBIAEoCSIi",
            "Cg5ub3RpZnlUZXh0Q2hhdBIQCghjaGF0VGV4dBgBIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.CommonHeader), global::DDRCommProto.CommonHeader.Parser, new[]{ "BodyType", "FlowDirection", "DestType", "DestInfo" }, null, new[]{ typeof(global::DDRCommProto.CommonHeader.Types.eFlowDir), typeof(global::DDRCommProto.CommonHeader.Types.eDestType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.heartBeat), global::DDRCommProto.heartBeat.Parser, new[]{ "Whatever" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.bcLSAddr), global::DDRCommProto.bcLSAddr.Parser, new[]{ "Name", "Ips", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqLogin), global::DDRCommProto.reqLogin.Parser, new[]{ "Type", "Username", "RobotID", "RobotPWD", "CltOpLv", "UID", "AvStreamReq" }, null, new[]{ typeof(global::DDRCommProto.reqLogin.Types.eCltType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqLogin.Types.msgAVStreamReq), global::DDRCommProto.reqLogin.Types.msgAVStreamReq.Parser, new[]{ "AvType", "ChName", "BandwidthReq" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respLogin), global::DDRCommProto.respLogin.Parser, new[]{ "Retcode", "YourRole", "UID" }, null, new[]{ typeof(global::DDRCommProto.respLogin.Types.eLoginRetCode), typeof(global::DDRCommProto.respLogin.Types.eCltType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyTerminalAccess), global::DDRCommProto.notifyTerminalAccess.Parser, new[]{ "BRRConnected2RS", "BOp", "NMonitors", "NClients", "NameLSMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifySerAccess), global::DDRCommProto.notifySerAccess.Parser, new[]{ "NClients", "CTopOpLv", "CTopOpTime", "NMonitors", "MTopOpLv", "MTopOpTime", "NamesLSM" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAVStream), global::DDRCommProto.notifyAVStream.Parser, new[]{ "ReservedChannel", "RobotMonitorChannels" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAVStream.Types.fullChannelInfo), global::DDRCommProto.notifyAVStream.Types.fullChannelInfo.Parser, new[]{ "DevType", "DataType", "LocalResAccStr", "ChannelDescription", "BwReq", "RemoteIP", "RemotePort", "RemotePass" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqTalk), global::DDRCommProto.reqTalk.Parser, new[]{ "CallerType", "Id1", "Id2", "AvType" }, null, new[]{ typeof(global::DDRCommProto.reqTalk.Types.eCallerType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respTalk), global::DDRCommProto.respTalk.Parser, new[]{ "ReceiverType", "Id1", "Id2", "AvType" }, null, new[]{ typeof(global::DDRCommProto.respTalk.Types.eReceiverType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.cmd), global::DDRCommProto.cmd.Parser, new[]{ "CmdID", "CmdMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respCmd), global::DDRCommProto.respCmd.Parser, new[]{ "CmdID", "RespMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqFile), global::DDRCommProto.reqFile.Parser, new[]{ "ZipFormat", "FileInqText" }, null, new[]{ typeof(global::DDRCommProto.reqFile.Types.eZipFormat) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respFile), global::DDRCommProto.respFile.Parser, new[]{ "ZipFormat", "FileResp" }, null, new[]{ typeof(global::DDRCommProto.respFile.Types.eZipFormat) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyStatus), global::DDRCommProto.notifyStatus.Parser, new[]{ "StatusMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAlarm), global::DDRCommProto.notifyAlarm.Parser, new[]{ "AlarmMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyTextChat), global::DDRCommProto.notifyTextChat.Parser, new[]{ "ChatText" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CommonHeader : pb::IMessage<CommonHeader> {
    private static readonly pb::MessageParser<CommonHeader> _parser = new pb::MessageParser<CommonHeader>(() => new CommonHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader(CommonHeader other) : this() {
      bodyType_ = other.bodyType_;
      flowDirection_ = other.flowDirection_.Clone();
      destType_ = other.destType_.Clone();
      destInfo_ = other.destInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader Clone() {
      return new CommonHeader(this);
    }

    /// <summary>Field number for the "bodyType" field.</summary>
    public const int BodyTypeFieldNumber = 1;
    private string bodyType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BodyType {
      get { return bodyType_; }
      set {
        bodyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flowDirection" field.</summary>
    public const int FlowDirectionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DDRCommProto.CommonHeader.Types.eFlowDir> _repeated_flowDirection_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::DDRCommProto.CommonHeader.Types.eFlowDir) x);
    private readonly pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir> flowDirection_ = new pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir> FlowDirection {
      get { return flowDirection_; }
    }

    /// <summary>Field number for the "destType" field.</summary>
    public const int DestTypeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DDRCommProto.CommonHeader.Types.eDestType> _repeated_destType_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::DDRCommProto.CommonHeader.Types.eDestType) x);
    private readonly pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eDestType> destType_ = new pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eDestType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eDestType> DestType {
      get { return destType_; }
    }

    /// <summary>Field number for the "destInfo" field.</summary>
    public const int DestInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_destInfo_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> destInfo_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// ignored for NoDest; a single string of target LSM name for LSMName; array of routing IP:Port strings (FILO) for Routing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DestInfo {
      get { return destInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BodyType != other.BodyType) return false;
      if(!flowDirection_.Equals(other.flowDirection_)) return false;
      if(!destType_.Equals(other.destType_)) return false;
      if(!destInfo_.Equals(other.destInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BodyType.Length != 0) hash ^= BodyType.GetHashCode();
      hash ^= flowDirection_.GetHashCode();
      hash ^= destType_.GetHashCode();
      hash ^= destInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BodyType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BodyType);
      }
      flowDirection_.WriteTo(output, _repeated_flowDirection_codec);
      destType_.WriteTo(output, _repeated_destType_codec);
      destInfo_.WriteTo(output, _repeated_destInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BodyType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BodyType);
      }
      size += flowDirection_.CalculateSize(_repeated_flowDirection_codec);
      size += destType_.CalculateSize(_repeated_destType_codec);
      size += destInfo_.CalculateSize(_repeated_destInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonHeader other) {
      if (other == null) {
        return;
      }
      if (other.BodyType.Length != 0) {
        BodyType = other.BodyType;
      }
      flowDirection_.Add(other.flowDirection_);
      destType_.Add(other.destType_);
      destInfo_.Add(other.destInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BodyType = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            flowDirection_.AddEntriesFrom(input, _repeated_flowDirection_codec);
            break;
          }
          case 26:
          case 24: {
            destType_.AddEntriesFrom(input, _repeated_destType_codec);
            break;
          }
          case 34: {
            destInfo_.AddEntriesFrom(input, _repeated_destInfo_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommonHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eFlowDir {
        [pbr::OriginalName("RS2M")] Rs2M = 0,
        [pbr::OriginalName("RS2RR")] Rs2Rr = 1,
        [pbr::OriginalName("RR2RS")] Rr2Rs = 2,
        [pbr::OriginalName("LS2C")] Ls2C = 3,
        [pbr::OriginalName("C2LS")] C2Ls = 4,
        [pbr::OriginalName("LS2LSM")] Ls2Lsm = 5,
        [pbr::OriginalName("LSM2LS")] Lsm2Ls = 6,
      }

      public enum eDestType {
        /// <summary>
        /// simple notification, nothing to be forwarded
        /// </summary>
        [pbr::OriginalName("NoDest")] NoDest = 0,
        /// <summary>
        /// this message will be forwarded to LSM
        /// </summary>
        [pbr::OriginalName("LSMName")] Lsmname = 1,
        /// <summary>
        /// this message will be forwarded along the previous routes
        /// </summary>
        [pbr::OriginalName("Routing")] Routing = 2,
      }

    }
    #endregion

  }

  public sealed partial class heartBeat : pb::IMessage<heartBeat> {
    private static readonly pb::MessageParser<heartBeat> _parser = new pb::MessageParser<heartBeat>(() => new heartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<heartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public heartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public heartBeat(heartBeat other) : this() {
      whatever_ = other.whatever_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public heartBeat Clone() {
      return new heartBeat(this);
    }

    /// <summary>Field number for the "whatever" field.</summary>
    public const int WhateverFieldNumber = 1;
    private string whatever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Whatever {
      get { return whatever_; }
      set {
        whatever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as heartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(heartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Whatever != other.Whatever) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Whatever.Length != 0) hash ^= Whatever.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Whatever.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Whatever);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Whatever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Whatever);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(heartBeat other) {
      if (other == null) {
        return;
      }
      if (other.Whatever.Length != 0) {
        Whatever = other.Whatever;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Whatever = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class bcLSAddr : pb::IMessage<bcLSAddr> {
    private static readonly pb::MessageParser<bcLSAddr> _parser = new pb::MessageParser<bcLSAddr>(() => new bcLSAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bcLSAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr(bcLSAddr other) : this() {
      name_ = other.name_;
      ips_ = other.ips_.Clone();
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr Clone() {
      return new bcLSAddr(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ips" field.</summary>
    public const int IpsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_ips_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> ips_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ips {
      get { return ips_; }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bcLSAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bcLSAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!ips_.Equals(other.ips_)) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= ips_.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      ips_.WriteTo(output, _repeated_ips_codec);
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += ips_.CalculateSize(_repeated_ips_codec);
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bcLSAddr other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      ips_.Add(other.ips_);
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ips_.AddEntriesFrom(input, _repeated_ips_codec);
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqLogin : pb::IMessage<reqLogin> {
    private static readonly pb::MessageParser<reqLogin> _parser = new pb::MessageParser<reqLogin>(() => new reqLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin(reqLogin other) : this() {
      type_ = other.type_;
      username_ = other.username_;
      robotID_ = other.robotID_;
      robotPWD_ = other.robotPWD_;
      cltOpLv_ = other.cltOpLv_;
      uID_ = other.uID_;
      avStreamReq_ = other.avStreamReq_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin Clone() {
      return new reqLogin(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.reqLogin.Types.eCltType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqLogin.Types.eCltType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    /// <summary>
    /// nickname for clients/monitors, module name for LSM, ignored for RR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotID" field.</summary>
    public const int RobotIDFieldNumber = 3;
    private string robotID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotID {
      get { return robotID_; }
      set {
        robotID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotPWD" field.</summary>
    public const int RobotPWDFieldNumber = 4;
    private string robotPWD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotPWD {
      get { return robotPWD_; }
      set {
        robotPWD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltOpLv" field.</summary>
    public const int CltOpLvFieldNumber = 5;
    private int cltOpLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CltOpLv {
      get { return cltOpLv_; }
      set {
        cltOpLv_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 6;
    private int uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    /// <summary>Field number for the "avStreamReq" field.</summary>
    public const int AvStreamReqFieldNumber = 7;
    private static readonly pb::FieldCodec<global::DDRCommProto.reqLogin.Types.msgAVStreamReq> _repeated_avStreamReq_codec
        = pb::FieldCodec.ForMessage(58, global::DDRCommProto.reqLogin.Types.msgAVStreamReq.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.reqLogin.Types.msgAVStreamReq> avStreamReq_ = new pbc::RepeatedField<global::DDRCommProto.reqLogin.Types.msgAVStreamReq>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.reqLogin.Types.msgAVStreamReq> AvStreamReq {
      get { return avStreamReq_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Username != other.Username) return false;
      if (RobotID != other.RobotID) return false;
      if (RobotPWD != other.RobotPWD) return false;
      if (CltOpLv != other.CltOpLv) return false;
      if (UID != other.UID) return false;
      if(!avStreamReq_.Equals(other.avStreamReq_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (RobotID.Length != 0) hash ^= RobotID.GetHashCode();
      if (RobotPWD.Length != 0) hash ^= RobotPWD.GetHashCode();
      if (CltOpLv != 0) hash ^= CltOpLv.GetHashCode();
      if (UID != 0) hash ^= UID.GetHashCode();
      hash ^= avStreamReq_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (RobotID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RobotID);
      }
      if (RobotPWD.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RobotPWD);
      }
      if (CltOpLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CltOpLv);
      }
      if (UID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UID);
      }
      avStreamReq_.WriteTo(output, _repeated_avStreamReq_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (RobotID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotID);
      }
      if (RobotPWD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotPWD);
      }
      if (CltOpLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CltOpLv);
      }
      if (UID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UID);
      }
      size += avStreamReq_.CalculateSize(_repeated_avStreamReq_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqLogin other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.RobotID.Length != 0) {
        RobotID = other.RobotID;
      }
      if (other.RobotPWD.Length != 0) {
        RobotPWD = other.RobotPWD;
      }
      if (other.CltOpLv != 0) {
        CltOpLv = other.CltOpLv;
      }
      if (other.UID != 0) {
        UID = other.UID;
      }
      avStreamReq_.Add(other.avStreamReq_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.reqLogin.Types.eCltType) input.ReadEnum();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            RobotID = input.ReadString();
            break;
          }
          case 34: {
            RobotPWD = input.ReadString();
            break;
          }
          case 40: {
            CltOpLv = input.ReadInt32();
            break;
          }
          case 48: {
            UID = input.ReadInt32();
            break;
          }
          case 58: {
            avStreamReq_.AddEntriesFrom(input, _repeated_avStreamReq_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqLogin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eCltType {
        [pbr::OriginalName("client")] Client = 0,
        [pbr::OriginalName("androidClient")] AndroidClient = 1,
        [pbr::OriginalName("LSM")] Lsm = 2,
      }

      public sealed partial class msgAVStreamReq : pb::IMessage<msgAVStreamReq> {
        private static readonly pb::MessageParser<msgAVStreamReq> _parser = new pb::MessageParser<msgAVStreamReq>(() => new msgAVStreamReq());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<msgAVStreamReq> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.reqLogin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public msgAVStreamReq() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public msgAVStreamReq(msgAVStreamReq other) : this() {
          avType_ = other.avType_;
          chName_ = other.chName_;
          bandwidthReq_ = other.bandwidthReq_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public msgAVStreamReq Clone() {
          return new msgAVStreamReq(this);
        }

        /// <summary>Field number for the "avType" field.</summary>
        public const int AvTypeFieldNumber = 1;
        private int avType_;
        /// <summary>
        /// 0-N.A; 1-audio; 2-video; 3-A+V
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AvType {
          get { return avType_; }
          set {
            avType_ = value;
          }
        }

        /// <summary>Field number for the "chName" field.</summary>
        public const int ChNameFieldNumber = 2;
        private string chName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChName {
          get { return chName_; }
          set {
            chName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bandwidthReq" field.</summary>
        public const int BandwidthReqFieldNumber = 3;
        private int bandwidthReq_;
        /// <summary>
        /// in kbps
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BandwidthReq {
          get { return bandwidthReq_; }
          set {
            bandwidthReq_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as msgAVStreamReq);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(msgAVStreamReq other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AvType != other.AvType) return false;
          if (ChName != other.ChName) return false;
          if (BandwidthReq != other.BandwidthReq) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AvType != 0) hash ^= AvType.GetHashCode();
          if (ChName.Length != 0) hash ^= ChName.GetHashCode();
          if (BandwidthReq != 0) hash ^= BandwidthReq.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AvType != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(AvType);
          }
          if (ChName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ChName);
          }
          if (BandwidthReq != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(BandwidthReq);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AvType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvType);
          }
          if (ChName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChName);
          }
          if (BandwidthReq != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BandwidthReq);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(msgAVStreamReq other) {
          if (other == null) {
            return;
          }
          if (other.AvType != 0) {
            AvType = other.AvType;
          }
          if (other.ChName.Length != 0) {
            ChName = other.ChName;
          }
          if (other.BandwidthReq != 0) {
            BandwidthReq = other.BandwidthReq;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AvType = input.ReadInt32();
                break;
              }
              case 18: {
                ChName = input.ReadString();
                break;
              }
              case 24: {
                BandwidthReq = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class respLogin : pb::IMessage<respLogin> {
    private static readonly pb::MessageParser<respLogin> _parser = new pb::MessageParser<respLogin>(() => new respLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respLogin(respLogin other) : this() {
      retcode_ = other.retcode_;
      yourRole_ = other.yourRole_;
      uID_ = other.uID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respLogin Clone() {
      return new respLogin(this);
    }

    /// <summary>Field number for the "retcode" field.</summary>
    public const int RetcodeFieldNumber = 1;
    private global::DDRCommProto.respLogin.Types.eLoginRetCode retcode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respLogin.Types.eLoginRetCode Retcode {
      get { return retcode_; }
      set {
        retcode_ = value;
      }
    }

    /// <summary>Field number for the "yourRole" field.</summary>
    public const int YourRoleFieldNumber = 2;
    private global::DDRCommProto.respLogin.Types.eCltType yourRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respLogin.Types.eCltType YourRole {
      get { return yourRole_; }
      set {
        yourRole_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 3;
    private int uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Retcode != other.Retcode) return false;
      if (YourRole != other.YourRole) return false;
      if (UID != other.UID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Retcode != 0) hash ^= Retcode.GetHashCode();
      if (YourRole != 0) hash ^= YourRole.GetHashCode();
      if (UID != 0) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Retcode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Retcode);
      }
      if (YourRole != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) YourRole);
      }
      if (UID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Retcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Retcode);
      }
      if (YourRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YourRole);
      }
      if (UID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respLogin other) {
      if (other == null) {
        return;
      }
      if (other.Retcode != 0) {
        Retcode = other.Retcode;
      }
      if (other.YourRole != 0) {
        YourRole = other.YourRole;
      }
      if (other.UID != 0) {
        UID = other.UID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            retcode_ = (global::DDRCommProto.respLogin.Types.eLoginRetCode) input.ReadEnum();
            break;
          }
          case 16: {
            yourRole_ = (global::DDRCommProto.respLogin.Types.eCltType) input.ReadEnum();
            break;
          }
          case 24: {
            UID = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the respLogin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eLoginRetCode {
        [pbr::OriginalName("success")] Success = 0,
        [pbr::OriginalName("server_busy")] ServerBusy = 1,
        [pbr::OriginalName("server_limit_reached")] ServerLimitReached = 2,
        [pbr::OriginalName("UID_error")] UidError = 3,
        [pbr::OriginalName("incorrect_password")] IncorrectPassword = 4,
      }

      public enum eCltType {
        [pbr::OriginalName("client")] Client = 0,
        [pbr::OriginalName("androidClient")] AndroidClient = 1,
        [pbr::OriginalName("LSM")] Lsm = 2,
      }

    }
    #endregion

  }

  public sealed partial class notifyTerminalAccess : pb::IMessage<notifyTerminalAccess> {
    private static readonly pb::MessageParser<notifyTerminalAccess> _parser = new pb::MessageParser<notifyTerminalAccess>(() => new notifyTerminalAccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyTerminalAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTerminalAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTerminalAccess(notifyTerminalAccess other) : this() {
      bRRConnected2RS_ = other.bRRConnected2RS_;
      bOp_ = other.bOp_;
      nMonitors_ = other.nMonitors_;
      nClients_ = other.nClients_;
      nameLSMs_ = other.nameLSMs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTerminalAccess Clone() {
      return new notifyTerminalAccess(this);
    }

    /// <summary>Field number for the "bRRConnected2RS" field.</summary>
    public const int BRRConnected2RSFieldNumber = 1;
    private int bRRConnected2RS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BRRConnected2RS {
      get { return bRRConnected2RS_; }
      set {
        bRRConnected2RS_ = value;
      }
    }

    /// <summary>Field number for the "bOp" field.</summary>
    public const int BOpFieldNumber = 2;
    private int bOp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BOp {
      get { return bOp_; }
      set {
        bOp_ = value;
      }
    }

    /// <summary>Field number for the "nMonitors" field.</summary>
    public const int NMonitorsFieldNumber = 3;
    private int nMonitors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMonitors {
      get { return nMonitors_; }
      set {
        nMonitors_ = value;
      }
    }

    /// <summary>Field number for the "nClients" field.</summary>
    public const int NClientsFieldNumber = 4;
    private int nClients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClients {
      get { return nClients_; }
      set {
        nClients_ = value;
      }
    }

    /// <summary>Field number for the "nameLSMs" field.</summary>
    public const int NameLSMsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_nameLSMs_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> nameLSMs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NameLSMs {
      get { return nameLSMs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyTerminalAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyTerminalAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BRRConnected2RS != other.BRRConnected2RS) return false;
      if (BOp != other.BOp) return false;
      if (NMonitors != other.NMonitors) return false;
      if (NClients != other.NClients) return false;
      if(!nameLSMs_.Equals(other.nameLSMs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BRRConnected2RS != 0) hash ^= BRRConnected2RS.GetHashCode();
      if (BOp != 0) hash ^= BOp.GetHashCode();
      if (NMonitors != 0) hash ^= NMonitors.GetHashCode();
      if (NClients != 0) hash ^= NClients.GetHashCode();
      hash ^= nameLSMs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BRRConnected2RS != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BRRConnected2RS);
      }
      if (BOp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BOp);
      }
      if (NMonitors != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NMonitors);
      }
      if (NClients != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NClients);
      }
      nameLSMs_.WriteTo(output, _repeated_nameLSMs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BRRConnected2RS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BRRConnected2RS);
      }
      if (BOp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BOp);
      }
      if (NMonitors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMonitors);
      }
      if (NClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClients);
      }
      size += nameLSMs_.CalculateSize(_repeated_nameLSMs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyTerminalAccess other) {
      if (other == null) {
        return;
      }
      if (other.BRRConnected2RS != 0) {
        BRRConnected2RS = other.BRRConnected2RS;
      }
      if (other.BOp != 0) {
        BOp = other.BOp;
      }
      if (other.NMonitors != 0) {
        NMonitors = other.NMonitors;
      }
      if (other.NClients != 0) {
        NClients = other.NClients;
      }
      nameLSMs_.Add(other.nameLSMs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BRRConnected2RS = input.ReadInt32();
            break;
          }
          case 16: {
            BOp = input.ReadInt32();
            break;
          }
          case 24: {
            NMonitors = input.ReadInt32();
            break;
          }
          case 32: {
            NClients = input.ReadInt32();
            break;
          }
          case 42: {
            nameLSMs_.AddEntriesFrom(input, _repeated_nameLSMs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifySerAccess : pb::IMessage<notifySerAccess> {
    private static readonly pb::MessageParser<notifySerAccess> _parser = new pb::MessageParser<notifySerAccess>(() => new notifySerAccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifySerAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifySerAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifySerAccess(notifySerAccess other) : this() {
      nClients_ = other.nClients_;
      cTopOpLv_ = other.cTopOpLv_;
      cTopOpTime_ = other.cTopOpTime_;
      nMonitors_ = other.nMonitors_;
      mTopOpLv_ = other.mTopOpLv_;
      mTopOpTime_ = other.mTopOpTime_;
      namesLSM_ = other.namesLSM_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifySerAccess Clone() {
      return new notifySerAccess(this);
    }

    /// <summary>Field number for the "nClients" field.</summary>
    public const int NClientsFieldNumber = 1;
    private int nClients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClients {
      get { return nClients_; }
      set {
        nClients_ = value;
      }
    }

    /// <summary>Field number for the "cTopOpLv" field.</summary>
    public const int CTopOpLvFieldNumber = 2;
    private int cTopOpLv_;
    /// <summary>
    /// op. level of the top client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CTopOpLv {
      get { return cTopOpLv_; }
      set {
        cTopOpLv_ = value;
      }
    }

    /// <summary>Field number for the "cTopOpTime" field.</summary>
    public const int CTopOpTimeFieldNumber = 3;
    private long cTopOpTime_;
    /// <summary>
    /// connection time of the top client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CTopOpTime {
      get { return cTopOpTime_; }
      set {
        cTopOpTime_ = value;
      }
    }

    /// <summary>Field number for the "nMonitors" field.</summary>
    public const int NMonitorsFieldNumber = 4;
    private int nMonitors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMonitors {
      get { return nMonitors_; }
      set {
        nMonitors_ = value;
      }
    }

    /// <summary>Field number for the "mTopOpLv" field.</summary>
    public const int MTopOpLvFieldNumber = 5;
    private int mTopOpLv_;
    /// <summary>
    /// op. level of the top monitor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MTopOpLv {
      get { return mTopOpLv_; }
      set {
        mTopOpLv_ = value;
      }
    }

    /// <summary>Field number for the "mTopOpTime" field.</summary>
    public const int MTopOpTimeFieldNumber = 6;
    private int mTopOpTime_;
    /// <summary>
    /// connection time of the top monitor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MTopOpTime {
      get { return mTopOpTime_; }
      set {
        mTopOpTime_ = value;
      }
    }

    /// <summary>Field number for the "namesLSM" field.</summary>
    public const int NamesLSMFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_namesLSM_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> namesLSM_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NamesLSM {
      get { return namesLSM_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifySerAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifySerAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NClients != other.NClients) return false;
      if (CTopOpLv != other.CTopOpLv) return false;
      if (CTopOpTime != other.CTopOpTime) return false;
      if (NMonitors != other.NMonitors) return false;
      if (MTopOpLv != other.MTopOpLv) return false;
      if (MTopOpTime != other.MTopOpTime) return false;
      if(!namesLSM_.Equals(other.namesLSM_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NClients != 0) hash ^= NClients.GetHashCode();
      if (CTopOpLv != 0) hash ^= CTopOpLv.GetHashCode();
      if (CTopOpTime != 0L) hash ^= CTopOpTime.GetHashCode();
      if (NMonitors != 0) hash ^= NMonitors.GetHashCode();
      if (MTopOpLv != 0) hash ^= MTopOpLv.GetHashCode();
      if (MTopOpTime != 0) hash ^= MTopOpTime.GetHashCode();
      hash ^= namesLSM_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NClients != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NClients);
      }
      if (CTopOpLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CTopOpLv);
      }
      if (CTopOpTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CTopOpTime);
      }
      if (NMonitors != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NMonitors);
      }
      if (MTopOpLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MTopOpLv);
      }
      if (MTopOpTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MTopOpTime);
      }
      namesLSM_.WriteTo(output, _repeated_namesLSM_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClients);
      }
      if (CTopOpLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CTopOpLv);
      }
      if (CTopOpTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CTopOpTime);
      }
      if (NMonitors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMonitors);
      }
      if (MTopOpLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MTopOpLv);
      }
      if (MTopOpTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MTopOpTime);
      }
      size += namesLSM_.CalculateSize(_repeated_namesLSM_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifySerAccess other) {
      if (other == null) {
        return;
      }
      if (other.NClients != 0) {
        NClients = other.NClients;
      }
      if (other.CTopOpLv != 0) {
        CTopOpLv = other.CTopOpLv;
      }
      if (other.CTopOpTime != 0L) {
        CTopOpTime = other.CTopOpTime;
      }
      if (other.NMonitors != 0) {
        NMonitors = other.NMonitors;
      }
      if (other.MTopOpLv != 0) {
        MTopOpLv = other.MTopOpLv;
      }
      if (other.MTopOpTime != 0) {
        MTopOpTime = other.MTopOpTime;
      }
      namesLSM_.Add(other.namesLSM_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NClients = input.ReadInt32();
            break;
          }
          case 16: {
            CTopOpLv = input.ReadInt32();
            break;
          }
          case 24: {
            CTopOpTime = input.ReadInt64();
            break;
          }
          case 32: {
            NMonitors = input.ReadInt32();
            break;
          }
          case 40: {
            MTopOpLv = input.ReadInt32();
            break;
          }
          case 48: {
            MTopOpTime = input.ReadInt32();
            break;
          }
          case 58: {
            namesLSM_.AddEntriesFrom(input, _repeated_namesLSM_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifyAVStream : pb::IMessage<notifyAVStream> {
    private static readonly pb::MessageParser<notifyAVStream> _parser = new pb::MessageParser<notifyAVStream>(() => new notifyAVStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyAVStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAVStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAVStream(notifyAVStream other) : this() {
      reservedChannel_ = other.reservedChannel_ != null ? other.reservedChannel_.Clone() : null;
      robotMonitorChannels_ = other.robotMonitorChannels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAVStream Clone() {
      return new notifyAVStream(this);
    }

    /// <summary>Field number for the "reservedChannel" field.</summary>
    public const int ReservedChannelFieldNumber = 1;
    private global::DDRCommProto.notifyAVStream.Types.fullChannelInfo reservedChannel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.notifyAVStream.Types.fullChannelInfo ReservedChannel {
      get { return reservedChannel_; }
      set {
        reservedChannel_ = value;
      }
    }

    /// <summary>Field number for the "robotMonitorChannels" field.</summary>
    public const int RobotMonitorChannelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DDRCommProto.notifyAVStream.Types.fullChannelInfo> _repeated_robotMonitorChannels_codec
        = pb::FieldCodec.ForMessage(18, global::DDRCommProto.notifyAVStream.Types.fullChannelInfo.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.notifyAVStream.Types.fullChannelInfo> robotMonitorChannels_ = new pbc::RepeatedField<global::DDRCommProto.notifyAVStream.Types.fullChannelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.notifyAVStream.Types.fullChannelInfo> RobotMonitorChannels {
      get { return robotMonitorChannels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyAVStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyAVStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReservedChannel, other.ReservedChannel)) return false;
      if(!robotMonitorChannels_.Equals(other.robotMonitorChannels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reservedChannel_ != null) hash ^= ReservedChannel.GetHashCode();
      hash ^= robotMonitorChannels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reservedChannel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReservedChannel);
      }
      robotMonitorChannels_.WriteTo(output, _repeated_robotMonitorChannels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reservedChannel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReservedChannel);
      }
      size += robotMonitorChannels_.CalculateSize(_repeated_robotMonitorChannels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyAVStream other) {
      if (other == null) {
        return;
      }
      if (other.reservedChannel_ != null) {
        if (reservedChannel_ == null) {
          reservedChannel_ = new global::DDRCommProto.notifyAVStream.Types.fullChannelInfo();
        }
        ReservedChannel.MergeFrom(other.ReservedChannel);
      }
      robotMonitorChannels_.Add(other.robotMonitorChannels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reservedChannel_ == null) {
              reservedChannel_ = new global::DDRCommProto.notifyAVStream.Types.fullChannelInfo();
            }
            input.ReadMessage(reservedChannel_);
            break;
          }
          case 18: {
            robotMonitorChannels_.AddEntriesFrom(input, _repeated_robotMonitorChannels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the notifyAVStream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class fullChannelInfo : pb::IMessage<fullChannelInfo> {
        private static readonly pb::MessageParser<fullChannelInfo> _parser = new pb::MessageParser<fullChannelInfo>(() => new fullChannelInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<fullChannelInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.notifyAVStream.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public fullChannelInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public fullChannelInfo(fullChannelInfo other) : this() {
          devType_ = other.devType_;
          dataType_ = other.dataType_;
          localResAccStr_ = other.localResAccStr_;
          channelDescription_ = other.channelDescription_;
          bwReq_ = other.bwReq_;
          remoteIP_ = other.remoteIP_;
          remotePort_ = other.remotePort_;
          remotePass_ = other.remotePass_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public fullChannelInfo Clone() {
          return new fullChannelInfo(this);
        }

        /// <summary>Field number for the "devType" field.</summary>
        public const int DevTypeFieldNumber = 1;
        private int devType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DevType {
          get { return devType_; }
          set {
            devType_ = value;
          }
        }

        /// <summary>Field number for the "dataType" field.</summary>
        public const int DataTypeFieldNumber = 2;
        private int dataType_;
        /// <summary>
        /// 0-N.A; 1-audio; 2-video; 3-audio+video
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DataType {
          get { return dataType_; }
          set {
            dataType_ = value;
          }
        }

        /// <summary>Field number for the "localResAccStr" field.</summary>
        public const int LocalResAccStrFieldNumber = 3;
        private string localResAccStr_ = "";
        /// <summary>
        /// UTF-8
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LocalResAccStr {
          get { return localResAccStr_; }
          set {
            localResAccStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "channelDescription" field.</summary>
        public const int ChannelDescriptionFieldNumber = 4;
        private string channelDescription_ = "";
        /// <summary>
        /// UTF-8
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChannelDescription {
          get { return channelDescription_; }
          set {
            channelDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bwReq" field.</summary>
        public const int BwReqFieldNumber = 5;
        private int bwReq_;
        /// <summary>
        /// bandwidth requirement in kbps		
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BwReq {
          get { return bwReq_; }
          set {
            bwReq_ = value;
          }
        }

        /// <summary>Field number for the "remoteIP" field.</summary>
        public const int RemoteIPFieldNumber = 6;
        private long remoteIP_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RemoteIP {
          get { return remoteIP_; }
          set {
            remoteIP_ = value;
          }
        }

        /// <summary>Field number for the "remotePort" field.</summary>
        public const int RemotePortFieldNumber = 7;
        private int remotePort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RemotePort {
          get { return remotePort_; }
          set {
            remotePort_ = value;
          }
        }

        /// <summary>Field number for the "remotePass" field.</summary>
        public const int RemotePassFieldNumber = 8;
        private string remotePass_ = "";
        /// <summary>
        /// a special string that serves as the key to streaming servers
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemotePass {
          get { return remotePass_; }
          set {
            remotePass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as fullChannelInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(fullChannelInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DevType != other.DevType) return false;
          if (DataType != other.DataType) return false;
          if (LocalResAccStr != other.LocalResAccStr) return false;
          if (ChannelDescription != other.ChannelDescription) return false;
          if (BwReq != other.BwReq) return false;
          if (RemoteIP != other.RemoteIP) return false;
          if (RemotePort != other.RemotePort) return false;
          if (RemotePass != other.RemotePass) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DevType != 0) hash ^= DevType.GetHashCode();
          if (DataType != 0) hash ^= DataType.GetHashCode();
          if (LocalResAccStr.Length != 0) hash ^= LocalResAccStr.GetHashCode();
          if (ChannelDescription.Length != 0) hash ^= ChannelDescription.GetHashCode();
          if (BwReq != 0) hash ^= BwReq.GetHashCode();
          if (RemoteIP != 0L) hash ^= RemoteIP.GetHashCode();
          if (RemotePort != 0) hash ^= RemotePort.GetHashCode();
          if (RemotePass.Length != 0) hash ^= RemotePass.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DevType != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(DevType);
          }
          if (DataType != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(DataType);
          }
          if (LocalResAccStr.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(LocalResAccStr);
          }
          if (ChannelDescription.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ChannelDescription);
          }
          if (BwReq != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(BwReq);
          }
          if (RemoteIP != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(RemoteIP);
          }
          if (RemotePort != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(RemotePort);
          }
          if (RemotePass.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(RemotePass);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DevType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DevType);
          }
          if (DataType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
          }
          if (LocalResAccStr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalResAccStr);
          }
          if (ChannelDescription.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelDescription);
          }
          if (BwReq != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BwReq);
          }
          if (RemoteIP != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteIP);
          }
          if (RemotePort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemotePort);
          }
          if (RemotePass.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemotePass);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(fullChannelInfo other) {
          if (other == null) {
            return;
          }
          if (other.DevType != 0) {
            DevType = other.DevType;
          }
          if (other.DataType != 0) {
            DataType = other.DataType;
          }
          if (other.LocalResAccStr.Length != 0) {
            LocalResAccStr = other.LocalResAccStr;
          }
          if (other.ChannelDescription.Length != 0) {
            ChannelDescription = other.ChannelDescription;
          }
          if (other.BwReq != 0) {
            BwReq = other.BwReq;
          }
          if (other.RemoteIP != 0L) {
            RemoteIP = other.RemoteIP;
          }
          if (other.RemotePort != 0) {
            RemotePort = other.RemotePort;
          }
          if (other.RemotePass.Length != 0) {
            RemotePass = other.RemotePass;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DevType = input.ReadInt32();
                break;
              }
              case 16: {
                DataType = input.ReadInt32();
                break;
              }
              case 26: {
                LocalResAccStr = input.ReadString();
                break;
              }
              case 34: {
                ChannelDescription = input.ReadString();
                break;
              }
              case 40: {
                BwReq = input.ReadInt32();
                break;
              }
              case 48: {
                RemoteIP = input.ReadInt64();
                break;
              }
              case 56: {
                RemotePort = input.ReadInt32();
                break;
              }
              case 66: {
                RemotePass = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class reqTalk : pb::IMessage<reqTalk> {
    private static readonly pb::MessageParser<reqTalk> _parser = new pb::MessageParser<reqTalk>(() => new reqTalk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqTalk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalk(reqTalk other) : this() {
      callerType_ = other.callerType_;
      id1_ = other.id1_;
      id2_ = other.id2_;
      avType_ = other.avType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalk Clone() {
      return new reqTalk(this);
    }

    /// <summary>Field number for the "callerType" field.</summary>
    public const int CallerTypeFieldNumber = 1;
    private global::DDRCommProto.reqTalk.Types.eCallerType callerType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqTalk.Types.eCallerType CallerType {
      get { return callerType_; }
      set {
        callerType_ = value;
      }
    }

    /// <summary>Field number for the "id1" field.</summary>
    public const int Id1FieldNumber = 2;
    private int id1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id1 {
      get { return id1_; }
      set {
        id1_ = value;
      }
    }

    /// <summary>Field number for the "id2" field.</summary>
    public const int Id2FieldNumber = 3;
    private int id2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id2 {
      get { return id2_; }
      set {
        id2_ = value;
      }
    }

    /// <summary>Field number for the "avType" field.</summary>
    public const int AvTypeFieldNumber = 4;
    private int avType_;
    /// <summary>
    /// 0-N.A; 1-audio; 2-video; 3-audio+video
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvType {
      get { return avType_; }
      set {
        avType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqTalk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqTalk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerType != other.CallerType) return false;
      if (Id1 != other.Id1) return false;
      if (Id2 != other.Id2) return false;
      if (AvType != other.AvType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerType != 0) hash ^= CallerType.GetHashCode();
      if (Id1 != 0) hash ^= Id1.GetHashCode();
      if (Id2 != 0) hash ^= Id2.GetHashCode();
      if (AvType != 0) hash ^= AvType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CallerType);
      }
      if (Id1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id1);
      }
      if (Id2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id2);
      }
      if (AvType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AvType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallerType);
      }
      if (Id1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id1);
      }
      if (Id2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id2);
      }
      if (AvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqTalk other) {
      if (other == null) {
        return;
      }
      if (other.CallerType != 0) {
        CallerType = other.CallerType;
      }
      if (other.Id1 != 0) {
        Id1 = other.Id1;
      }
      if (other.Id2 != 0) {
        Id2 = other.Id2;
      }
      if (other.AvType != 0) {
        AvType = other.AvType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            callerType_ = (global::DDRCommProto.reqTalk.Types.eCallerType) input.ReadEnum();
            break;
          }
          case 16: {
            Id1 = input.ReadInt32();
            break;
          }
          case 24: {
            Id2 = input.ReadInt32();
            break;
          }
          case 32: {
            AvType = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqTalk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eCallerType {
        [pbr::OriginalName("client")] Client = 0,
        [pbr::OriginalName("monitor")] Monitor = 1,
        [pbr::OriginalName("robot_LSM")] RobotLsm = 2,
      }

    }
    #endregion

  }

  public sealed partial class respTalk : pb::IMessage<respTalk> {
    private static readonly pb::MessageParser<respTalk> _parser = new pb::MessageParser<respTalk>(() => new respTalk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respTalk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respTalk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respTalk(respTalk other) : this() {
      receiverType_ = other.receiverType_;
      id1_ = other.id1_;
      id2_ = other.id2_;
      avType_ = other.avType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respTalk Clone() {
      return new respTalk(this);
    }

    /// <summary>Field number for the "receiverType" field.</summary>
    public const int ReceiverTypeFieldNumber = 1;
    private global::DDRCommProto.respTalk.Types.eReceiverType receiverType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respTalk.Types.eReceiverType ReceiverType {
      get { return receiverType_; }
      set {
        receiverType_ = value;
      }
    }

    /// <summary>Field number for the "id1" field.</summary>
    public const int Id1FieldNumber = 2;
    private int id1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id1 {
      get { return id1_; }
      set {
        id1_ = value;
      }
    }

    /// <summary>Field number for the "id2" field.</summary>
    public const int Id2FieldNumber = 3;
    private int id2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id2 {
      get { return id2_; }
      set {
        id2_ = value;
      }
    }

    /// <summary>Field number for the "avType" field.</summary>
    public const int AvTypeFieldNumber = 4;
    private int avType_;
    /// <summary>
    /// 0-N.A; 1-audio; 2-video; 3-audio+video
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvType {
      get { return avType_; }
      set {
        avType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respTalk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respTalk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceiverType != other.ReceiverType) return false;
      if (Id1 != other.Id1) return false;
      if (Id2 != other.Id2) return false;
      if (AvType != other.AvType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceiverType != 0) hash ^= ReceiverType.GetHashCode();
      if (Id1 != 0) hash ^= Id1.GetHashCode();
      if (Id2 != 0) hash ^= Id2.GetHashCode();
      if (AvType != 0) hash ^= AvType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReceiverType);
      }
      if (Id1 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id1);
      }
      if (Id2 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Id2);
      }
      if (AvType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AvType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiverType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReceiverType);
      }
      if (Id1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id1);
      }
      if (Id2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id2);
      }
      if (AvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respTalk other) {
      if (other == null) {
        return;
      }
      if (other.ReceiverType != 0) {
        ReceiverType = other.ReceiverType;
      }
      if (other.Id1 != 0) {
        Id1 = other.Id1;
      }
      if (other.Id2 != 0) {
        Id2 = other.Id2;
      }
      if (other.AvType != 0) {
        AvType = other.AvType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            receiverType_ = (global::DDRCommProto.respTalk.Types.eReceiverType) input.ReadEnum();
            break;
          }
          case 16: {
            Id1 = input.ReadInt32();
            break;
          }
          case 24: {
            Id2 = input.ReadInt32();
            break;
          }
          case 32: {
            AvType = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the respTalk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eReceiverType {
        [pbr::OriginalName("client")] Client = 0,
        [pbr::OriginalName("monitor")] Monitor = 1,
        [pbr::OriginalName("robot_LSM")] RobotLsm = 2,
      }

    }
    #endregion

  }

  public sealed partial class cmd : pb::IMessage<cmd> {
    private static readonly pb::MessageParser<cmd> _parser = new pb::MessageParser<cmd>(() => new cmd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<cmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cmd(cmd other) : this() {
      cmdID_ = other.cmdID_;
      cmdMsg_ = other.cmdMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public cmd Clone() {
      return new cmd(this);
    }

    /// <summary>Field number for the "cmdID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private long cmdID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = value;
      }
    }

    /// <summary>Field number for the "cmdMsg" field.</summary>
    public const int CmdMsgFieldNumber = 2;
    private string cmdMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdMsg {
      get { return cmdMsg_; }
      set {
        cmdMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as cmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(cmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (CmdMsg != other.CmdMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID != 0L) hash ^= CmdID.GetHashCode();
      if (CmdMsg.Length != 0) hash ^= CmdMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CmdID);
      }
      if (CmdMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CmdMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CmdID);
      }
      if (CmdMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(cmd other) {
      if (other == null) {
        return;
      }
      if (other.CmdID != 0L) {
        CmdID = other.CmdID;
      }
      if (other.CmdMsg.Length != 0) {
        CmdMsg = other.CmdMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CmdID = input.ReadInt64();
            break;
          }
          case 18: {
            CmdMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class respCmd : pb::IMessage<respCmd> {
    private static readonly pb::MessageParser<respCmd> _parser = new pb::MessageParser<respCmd>(() => new respCmd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respCmd(respCmd other) : this() {
      cmdID_ = other.cmdID_;
      respMsg_ = other.respMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respCmd Clone() {
      return new respCmd(this);
    }

    /// <summary>Field number for the "cmdID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private long cmdID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = value;
      }
    }

    /// <summary>Field number for the "respMsg" field.</summary>
    public const int RespMsgFieldNumber = 2;
    private string respMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RespMsg {
      get { return respMsg_; }
      set {
        respMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (RespMsg != other.RespMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID != 0L) hash ^= CmdID.GetHashCode();
      if (RespMsg.Length != 0) hash ^= RespMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CmdID);
      }
      if (RespMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RespMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CmdID);
      }
      if (RespMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RespMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respCmd other) {
      if (other == null) {
        return;
      }
      if (other.CmdID != 0L) {
        CmdID = other.CmdID;
      }
      if (other.RespMsg.Length != 0) {
        RespMsg = other.RespMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CmdID = input.ReadInt64();
            break;
          }
          case 18: {
            RespMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class reqFile : pb::IMessage<reqFile> {
    private static readonly pb::MessageParser<reqFile> _parser = new pb::MessageParser<reqFile>(() => new reqFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFile(reqFile other) : this() {
      zipFormat_ = other.zipFormat_;
      fileInqText_ = other.fileInqText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFile Clone() {
      return new reqFile(this);
    }

    /// <summary>Field number for the "zipFormat" field.</summary>
    public const int ZipFormatFieldNumber = 1;
    private global::DDRCommProto.reqFile.Types.eZipFormat zipFormat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqFile.Types.eZipFormat ZipFormat {
      get { return zipFormat_; }
      set {
        zipFormat_ = value;
      }
    }

    /// <summary>Field number for the "fileInqText" field.</summary>
    public const int FileInqTextFieldNumber = 2;
    private string fileInqText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileInqText {
      get { return fileInqText_; }
      set {
        fileInqText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZipFormat != other.ZipFormat) return false;
      if (FileInqText != other.FileInqText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZipFormat != 0) hash ^= ZipFormat.GetHashCode();
      if (FileInqText.Length != 0) hash ^= FileInqText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZipFormat != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ZipFormat);
      }
      if (FileInqText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileInqText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZipFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ZipFormat);
      }
      if (FileInqText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileInqText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqFile other) {
      if (other == null) {
        return;
      }
      if (other.ZipFormat != 0) {
        ZipFormat = other.ZipFormat;
      }
      if (other.FileInqText.Length != 0) {
        FileInqText = other.FileInqText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            zipFormat_ = (global::DDRCommProto.reqFile.Types.eZipFormat) input.ReadEnum();
            break;
          }
          case 18: {
            FileInqText = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqFile message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eZipFormat {
        [pbr::OriginalName("noZip")] NoZip = 0,
        [pbr::OriginalName("Zip")] Zip = 1,
      }

    }
    #endregion

  }

  public sealed partial class respFile : pb::IMessage<respFile> {
    private static readonly pb::MessageParser<respFile> _parser = new pb::MessageParser<respFile>(() => new respFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFile(respFile other) : this() {
      zipFormat_ = other.zipFormat_;
      fileResp_ = other.fileResp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFile Clone() {
      return new respFile(this);
    }

    /// <summary>Field number for the "zipFormat" field.</summary>
    public const int ZipFormatFieldNumber = 1;
    private global::DDRCommProto.respFile.Types.eZipFormat zipFormat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respFile.Types.eZipFormat ZipFormat {
      get { return zipFormat_; }
      set {
        zipFormat_ = value;
      }
    }

    /// <summary>Field number for the "fileResp" field.</summary>
    public const int FileRespFieldNumber = 2;
    private string fileResp_ = "";
    /// <summary>
    /// zipped according to zipFormat
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileResp {
      get { return fileResp_; }
      set {
        fileResp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZipFormat != other.ZipFormat) return false;
      if (FileResp != other.FileResp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZipFormat != 0) hash ^= ZipFormat.GetHashCode();
      if (FileResp.Length != 0) hash ^= FileResp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZipFormat != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ZipFormat);
      }
      if (FileResp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FileResp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZipFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ZipFormat);
      }
      if (FileResp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileResp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respFile other) {
      if (other == null) {
        return;
      }
      if (other.ZipFormat != 0) {
        ZipFormat = other.ZipFormat;
      }
      if (other.FileResp.Length != 0) {
        FileResp = other.FileResp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            zipFormat_ = (global::DDRCommProto.respFile.Types.eZipFormat) input.ReadEnum();
            break;
          }
          case 18: {
            FileResp = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the respFile message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eZipFormat {
        [pbr::OriginalName("noZip")] NoZip = 0,
        [pbr::OriginalName("Zip")] Zip = 1,
      }

    }
    #endregion

  }

  public sealed partial class notifyStatus : pb::IMessage<notifyStatus> {
    private static readonly pb::MessageParser<notifyStatus> _parser = new pb::MessageParser<notifyStatus>(() => new notifyStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStatus(notifyStatus other) : this() {
      statusMsg_ = other.statusMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyStatus Clone() {
      return new notifyStatus(this);
    }

    /// <summary>Field number for the "statusMsg" field.</summary>
    public const int StatusMsgFieldNumber = 1;
    private string statusMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMsg {
      get { return statusMsg_; }
      set {
        statusMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusMsg != other.StatusMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusMsg.Length != 0) hash ^= StatusMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatusMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyStatus other) {
      if (other == null) {
        return;
      }
      if (other.StatusMsg.Length != 0) {
        StatusMsg = other.StatusMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatusMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifyAlarm : pb::IMessage<notifyAlarm> {
    private static readonly pb::MessageParser<notifyAlarm> _parser = new pb::MessageParser<notifyAlarm>(() => new notifyAlarm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyAlarm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarm(notifyAlarm other) : this() {
      alarmMsg_ = other.alarmMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAlarm Clone() {
      return new notifyAlarm(this);
    }

    /// <summary>Field number for the "alarmMsg" field.</summary>
    public const int AlarmMsgFieldNumber = 1;
    private string alarmMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlarmMsg {
      get { return alarmMsg_; }
      set {
        alarmMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyAlarm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyAlarm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlarmMsg != other.AlarmMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlarmMsg.Length != 0) hash ^= AlarmMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AlarmMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AlarmMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlarmMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlarmMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyAlarm other) {
      if (other == null) {
        return;
      }
      if (other.AlarmMsg.Length != 0) {
        AlarmMsg = other.AlarmMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AlarmMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class notifyTextChat : pb::IMessage<notifyTextChat> {
    private static readonly pb::MessageParser<notifyTextChat> _parser = new pb::MessageParser<notifyTextChat>(() => new notifyTextChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyTextChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTextChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTextChat(notifyTextChat other) : this() {
      chatText_ = other.chatText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTextChat Clone() {
      return new notifyTextChat(this);
    }

    /// <summary>Field number for the "chatText" field.</summary>
    public const int ChatTextFieldNumber = 1;
    private string chatText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatText {
      get { return chatText_; }
      set {
        chatText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyTextChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyTextChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatText != other.ChatText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatText.Length != 0) hash ^= ChatText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChatText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyTextChat other) {
      if (other == null) {
        return;
      }
      if (other.ChatText.Length != 0) {
        ChatText = other.ChatText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChatText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
