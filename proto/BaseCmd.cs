// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BaseCmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DDRCommProto {

  /// <summary>Holder for reflection information generated from BaseCmd.proto</summary>
  public static partial class BaseCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for BaseCmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1CYXNlQ21kLnByb3RvEgxERFJDb21tUHJvdG8i5AQKDENvbW1vbkhlYWRl",
            "chIQCghib2R5VHlwZRgBIAEoCRI6Cg1mbG93RGlyZWN0aW9uGAIgAygOMiMu",
            "RERSQ29tbVByb3RvLkNvbW1vbkhlYWRlci5lRmxvd0RpchIRCgliT3JpZ2lu",
            "YWwYAyABKAUSOQoHc3JjQ29uZBgEIAEoDjIoLkREUkNvbW1Qcm90by5Db21t",
            "b25IZWFkZXIuZVNyY0NvbmRpdGlvbhI/Cgtmb3J3YXJkVHlwZRgFIAEoDjIq",
            "LkREUkNvbW1Qcm90by5Db21tb25IZWFkZXIuZUZvcndhcmRpbmdUeXBlEjcK",
            "B3JlY1R5cGUYBiABKA4yJi5ERFJDb21tUHJvdG8uQ29tbW9uSGVhZGVyLmVT",
            "cmNSZWNUeXBlEhUKDXByZXZSb3V0ZUFkZHIYByADKAkigAEKCGVGbG93RGly",
            "Eg4KClVOS05PV04yUlMQABIICgRSUzJNEAESCAoETTJSUxACEgkKBVJTMlJS",
            "EAMSCQoFUlIyUlMQBBIOCgpVTktOT1dOMkxTEAUSCAoETFMyQxAGEggKBEMy",
            "TFMQBxIKCgZMUzJMU00QCBIKCgZMU00yTFMQCSIjCg1lU3JjQ29uZGl0aW9u",
            "EgoKBk5vQ29uZBAAEgYKAk9wEAEiWQoPZUZvcndhcmRpbmdUeXBlEhAKDE5v",
            "Rm9yd2FyZGluZxAAEgoKBkxTTUFsbBABEg0KCUNsdE1vbkFsbBACEggKBFRv",
            "T3AQAxIPCgtSb3V0aW5nQmFjaxAEIiQKC2VTcmNSZWNUeXBlEgkKBU5vUmVj",
            "EAASCgoGUmVjU3JjEAEiHQoJaGVhcnRCZWF0EhAKCHdoYXRldmVyGAEgASgJ",
            "InQKCGJjTFNBZGRyEjEKBkxTSW5mbxgBIAEoCzIhLkREUkNvbW1Qcm90by5i",
            "Y0xTQWRkci5TZXJ2ZXJJbmZvGjUKClNlcnZlckluZm8SDAoEbmFtZRgBIAEo",
            "CRILCgNpcHMYAiADKAkSDAoEcG9ydBgDIAEoBSLEAgoIcmVxTG9naW4SLQoE",
            "dHlwZRgBIAEoDjIfLkREUkNvbW1Qcm90by5yZXFMb2dpbi5lQ2x0VHlwZRIQ",
            "Cgh1c2VybmFtZRgCIAEoCRIPCgdyb2JvdElEGAMgASgJEhAKCHJvYm90UFdE",
            "GAQgASgJEg8KB2NsdE9wTHYYBSABKAUSCwoDVUlEGAYgASgFEjoKC2F2U3Ry",
            "ZWFtUmVxGAcgAygLMiUuRERSQ29tbVByb3RvLnJlcUxvZ2luLm1zZ0FWU3Ry",
            "ZWFtUmVxGkYKDm1zZ0FWU3RyZWFtUmVxEg4KBmF2VHlwZRgBIAEoBRIOCgZj",
            "aE5hbWUYAiABKAkSFAoMYmFuZHdpZHRoUmVxGAMgASgFIjIKCGVDbHRUeXBl",
            "EgoKBmNsaWVudBAAEhEKDWFuZHJvaWRDbGllbnQQARIHCgNMU00QAiKoAgoJ",
            "cmVzcExvZ2luEjYKB3JldGNvZGUYASABKA4yJS5ERFJDb21tUHJvdG8ucmVz",
            "cExvZ2luLmVMb2dpblJldENvZGUSMgoIeW91clJvbGUYAiABKA4yIC5ERFJD",
            "b21tUHJvdG8ucmVzcExvZ2luLmVDbHRUeXBlEgsKA1VJRBgDIAEoBSJuCg1l",
            "TG9naW5SZXRDb2RlEgsKB3N1Y2Nlc3MQABIPCgtzZXJ2ZXJfYnVzeRABEhgK",
            "FHNlcnZlcl9saW1pdF9yZWFjaGVkEAISDQoJVUlEX2Vycm9yEAMSFgoSaW5j",
            "b3JyZWN0X3Bhc3N3b3JkEAQiMgoIZUNsdFR5cGUSCgoGY2xpZW50EAASEQoN",
            "YW5kcm9pZENsaWVudBABEgcKA0xTTRACInMKFG5vdGlmeVRlcm1pbmFsQWNj",
            "ZXNzEhcKD2JSUkNvbm5lY3RlZDJSUxgBIAEoBRILCgNiT3AYAiABKAUSEQoJ",
            "bk1vbml0b3JzGAMgASgFEhAKCG5DbGllbnRzGAQgASgFEhAKCG5hbWVMU01z",
            "GAUgAygJIpQBCg9ub3RpZnlTZXJBY2Nlc3MSEQoJbk1vbml0b3JzGAEgASgF",
            "EhAKCG1Ub3BPcEx2GAIgASgFEhIKCm1Ub3BPcFRpbWUYAyABKAUSEAoIbkNs",
            "aWVudHMYBCABKAUSEAoIY1RvcE9wTHYYBSABKAUSEgoKY1RvcE9wVGltZRgG",
            "IAEoAxIQCghuYW1lc0xTTRgHIAMoCSLXAgoObm90aWZ5QVZTdHJlYW0SRQoP",
            "cmVzZXJ2ZWRDaGFubmVsGAEgASgLMiwuRERSQ29tbVByb3RvLm5vdGlmeUFW",
            "U3RyZWFtLmZ1bGxDaGFubmVsSW5mbxJKChRyb2JvdE1vbml0b3JDaGFubmVs",
            "cxgCIAMoCzIsLkREUkNvbW1Qcm90by5ub3RpZnlBVlN0cmVhbS5mdWxsQ2hh",
            "bm5lbEluZm8asQEKD2Z1bGxDaGFubmVsSW5mbxIPCgdkZXZUeXBlGAEgASgF",
            "EhAKCGRhdGFUeXBlGAIgASgFEhYKDmxvY2FsUmVzQWNjU3RyGAMgASgJEhoK",
            "EmNoYW5uZWxEZXNjcmlwdGlvbhgEIAEoCRINCgVid1JlcRgFIAEoBRIQCghy",
            "ZW1vdGVJUBgGIAEoAxISCgpyZW1vdGVQb3J0GAcgASgFEhIKCnJlbW90ZVBh",
            "c3MYCCABKAkirgEKB3JlcVRhbGsSNQoKY2FsbGVyVHlwZRgBIAEoDjIhLkRE",
            "UkNvbW1Qcm90by5yZXFUYWxrLmVDYWxsZXJUeXBlEg4KBnRhbGtJRBgCIAEo",
            "BRIOCgZhdlR5cGUYAyABKAUSFQoNbG9jYWxUYWxrQWRkchgEIAMoCSI1Cgtl",
            "Q2FsbGVyVHlwZRIKCgZjbGllbnQQABILCgdtb25pdG9yEAESDQoJcm9ib3Rf",
            "TFNNEAIinwEKCHJlc3BUYWxrEjoKDHJlY2VpdmVyVHlwZRgBIAEoDjIkLkRE",
            "UkNvbW1Qcm90by5yZXNwVGFsay5lUmVjZWl2ZXJUeXBlEg4KBnRhbGtJRBgC",
            "IAEoBRIOCgZhdlR5cGUYAyABKAUiNwoNZVJlY2VpdmVyVHlwZRIKCgZjbGll",
            "bnQQABILCgdtb25pdG9yEAESDQoJcm9ib3RfTFNNEAIiOQoJcmVxVGFsa0hC",
            "EhQKDGNhbGxlclRhbGtJRBgBIAEoBRIWCg5yZWNlaXZlclRhbGtJRBgCIAEo",
            "BSInCgZyZXFDbWQSDQoFY21kSUQYASABKAMSDgoGY21kTXNnGAIgASgJIikK",
            "B3Jlc3BDbWQSDQoFY21kSUQYASABKAMSDwoHcmVzcE1zZxgCIAEoCSKjAQoH",
            "cmVxRmlsZRISCgp0YXJMU01OYW1lGAEgASgJEjIKCGZpbGVUeXBlGAIgASgO",
            "MiAuRERSQ29tbVByb3RvLnJlcUZpbGUuZUZpbGVUeXBlcxIRCglmaWxlTmFt",
            "ZXMYAyADKAkiPQoKZUZpbGVUeXBlcxIQCgxGaWxlQ29udGVudHMQABIMCghG",
            "aWxlTGlzdBABEg8KC0ZvbGRlckZsaXN0EAIiuwEKCHJlc3BGaWxlEhIKCnRh",
            "ckxTTU5hbWUYASABKAkSMwoIZmlsZVR5cGUYAiABKA4yIS5ERFJDb21tUHJv",
            "dG8ucmVzcEZpbGUuZUZpbGVUeXBlcxIRCglmaWxlTmFtZXMYAyADKAkSFAoM",
            "ZmlsZUNvbnRlbnRzGAQgAygJIj0KCmVGaWxlVHlwZXMSEAoMRmlsZUNvbnRl",
            "bnRzEAASDAoIRmlsZUxpc3QQARIPCgtGb2xkZXJGbGlzdBACIqsBCgtyZXFG",
            "aWxlQWRkchISCgp0YXJMU01OYW1lGAEgASgJEjYKCGZpbGVUeXBlGAIgASgO",
            "MiQuRERSQ29tbVByb3RvLnJlcUZpbGVBZGRyLmVGaWxlVHlwZXMSEQoJZmls",
            "ZU5hbWVzGAMgAygJIj0KCmVGaWxlVHlwZXMSEAoMRmlsZUNvbnRlbnRzEAAS",
            "DAoIRmlsZUxpc3QQARIPCgtGb2xkZXJGbGlzdBACIr8BCgxyZXNwRmlsZUFk",
            "ZHISEgoKdGFyTFNNTmFtZRgBIAEoCRI3CghmaWxlVHlwZRgCIAEoDjIlLkRE",
            "UkNvbW1Qcm90by5yZXNwRmlsZUFkZHIuZUZpbGVUeXBlcxIRCglmaWxlTmFt",
            "ZXMYAyADKAkSEAoIZmlsZUFkZHIYBCADKAkiPQoKZUZpbGVUeXBlcxIQCgxG",
            "aWxlQ29udGVudHMQABIMCghGaWxlTGlzdBABEg8KC0ZvbGRlckZsaXN0EAIi",
            "HgoJcmVxU3RhdHVzEhEKCXN0YXR1c01zZxgBIAEoCSIcCghyZXFBbGFybRIQ",
            "CghhbGFybU1zZxgBIAEoCSIfCgtyZXFUZXh0Q2hhdBIQCghjaGF0VGV4dBgB",
            "IAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.CommonHeader), global::DDRCommProto.CommonHeader.Parser, new[]{ "BodyType", "FlowDirection", "BOriginal", "SrcCond", "ForwardType", "RecType", "PrevRouteAddr" }, null, new[]{ typeof(global::DDRCommProto.CommonHeader.Types.eFlowDir), typeof(global::DDRCommProto.CommonHeader.Types.eSrcCondition), typeof(global::DDRCommProto.CommonHeader.Types.eForwardingType), typeof(global::DDRCommProto.CommonHeader.Types.eSrcRecType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.heartBeat), global::DDRCommProto.heartBeat.Parser, new[]{ "Whatever" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.bcLSAddr), global::DDRCommProto.bcLSAddr.Parser, new[]{ "LSInfo" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.bcLSAddr.Types.ServerInfo), global::DDRCommProto.bcLSAddr.Types.ServerInfo.Parser, new[]{ "Name", "Ips", "Port" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqLogin), global::DDRCommProto.reqLogin.Parser, new[]{ "Type", "Username", "RobotID", "RobotPWD", "CltOpLv", "UID", "AvStreamReq" }, null, new[]{ typeof(global::DDRCommProto.reqLogin.Types.eCltType) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqLogin.Types.msgAVStreamReq), global::DDRCommProto.reqLogin.Types.msgAVStreamReq.Parser, new[]{ "AvType", "ChName", "BandwidthReq" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respLogin), global::DDRCommProto.respLogin.Parser, new[]{ "Retcode", "YourRole", "UID" }, null, new[]{ typeof(global::DDRCommProto.respLogin.Types.eLoginRetCode), typeof(global::DDRCommProto.respLogin.Types.eCltType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyTerminalAccess), global::DDRCommProto.notifyTerminalAccess.Parser, new[]{ "BRRConnected2RS", "BOp", "NMonitors", "NClients", "NameLSMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifySerAccess), global::DDRCommProto.notifySerAccess.Parser, new[]{ "NMonitors", "MTopOpLv", "MTopOpTime", "NClients", "CTopOpLv", "CTopOpTime", "NamesLSM" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAVStream), global::DDRCommProto.notifyAVStream.Parser, new[]{ "ReservedChannel", "RobotMonitorChannels" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.notifyAVStream.Types.fullChannelInfo), global::DDRCommProto.notifyAVStream.Types.fullChannelInfo.Parser, new[]{ "DevType", "DataType", "LocalResAccStr", "ChannelDescription", "BwReq", "RemoteIP", "RemotePort", "RemotePass" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqTalk), global::DDRCommProto.reqTalk.Parser, new[]{ "CallerType", "TalkID", "AvType", "LocalTalkAddr" }, null, new[]{ typeof(global::DDRCommProto.reqTalk.Types.eCallerType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respTalk), global::DDRCommProto.respTalk.Parser, new[]{ "ReceiverType", "TalkID", "AvType" }, null, new[]{ typeof(global::DDRCommProto.respTalk.Types.eReceiverType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqTalkHB), global::DDRCommProto.reqTalkHB.Parser, new[]{ "CallerTalkID", "ReceiverTalkID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqCmd), global::DDRCommProto.reqCmd.Parser, new[]{ "CmdID", "CmdMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respCmd), global::DDRCommProto.respCmd.Parser, new[]{ "CmdID", "RespMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqFile), global::DDRCommProto.reqFile.Parser, new[]{ "TarLSMName", "FileType", "FileNames" }, null, new[]{ typeof(global::DDRCommProto.reqFile.Types.eFileTypes) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respFile), global::DDRCommProto.respFile.Parser, new[]{ "TarLSMName", "FileType", "FileNames", "FileContents" }, null, new[]{ typeof(global::DDRCommProto.respFile.Types.eFileTypes) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqFileAddr), global::DDRCommProto.reqFileAddr.Parser, new[]{ "TarLSMName", "FileType", "FileNames" }, null, new[]{ typeof(global::DDRCommProto.reqFileAddr.Types.eFileTypes) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.respFileAddr), global::DDRCommProto.respFileAddr.Parser, new[]{ "TarLSMName", "FileType", "FileNames", "FileAddr" }, null, new[]{ typeof(global::DDRCommProto.respFileAddr.Types.eFileTypes) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqStatus), global::DDRCommProto.reqStatus.Parser, new[]{ "StatusMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqAlarm), global::DDRCommProto.reqAlarm.Parser, new[]{ "AlarmMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DDRCommProto.reqTextChat), global::DDRCommProto.reqTextChat.Parser, new[]{ "ChatText" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CommonHeader : pb::IMessage<CommonHeader> {
    private static readonly pb::MessageParser<CommonHeader> _parser = new pb::MessageParser<CommonHeader>(() => new CommonHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader(CommonHeader other) : this() {
      bodyType_ = other.bodyType_;
      flowDirection_ = other.flowDirection_.Clone();
      bOriginal_ = other.bOriginal_;
      srcCond_ = other.srcCond_;
      forwardType_ = other.forwardType_;
      recType_ = other.recType_;
      prevRouteAddr_ = other.prevRouteAddr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonHeader Clone() {
      return new CommonHeader(this);
    }

    /// <summary>Field number for the "bodyType" field.</summary>
    public const int BodyTypeFieldNumber = 1;
    private string bodyType_ = "";
    /// <summary>
    /// type of message body, e.g., "reqLogin"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BodyType {
      get { return bodyType_; }
      set {
        bodyType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flowDirection" field.</summary>
    public const int FlowDirectionFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DDRCommProto.CommonHeader.Types.eFlowDir> _repeated_flowDirection_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::DDRCommProto.CommonHeader.Types.eFlowDir) x);
    private readonly pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir> flowDirection_ = new pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir>();
    /// <summary>
    /// repeated here is to indicate its validity (one and only one flowDirection)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.CommonHeader.Types.eFlowDir> FlowDirection {
      get { return flowDirection_; }
    }

    /// <summary>Field number for the "bOriginal" field.</summary>
    public const int BOriginalFieldNumber = 3;
    private int bOriginal_;
    /// <summary>
    /// If bOriginal==1, it is a message from its source (not forwarded).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BOriginal {
      get { return bOriginal_; }
      set {
        bOriginal_ = value;
      }
    }

    /// <summary>Field number for the "srcCond" field.</summary>
    public const int SrcCondFieldNumber = 4;
    private global::DDRCommProto.CommonHeader.Types.eSrcCondition srcCond_ = 0;
    /// <summary>
    /// if (srcCond==Op) &amp;&amp; (bOriginal==1) &amp;&amp; (immediate source is not an Op. client or Op.
    /// monitor), discard this whole frame. Otherwise okay to process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.CommonHeader.Types.eSrcCondition SrcCond {
      get { return srcCond_; }
      set {
        srcCond_ = value;
      }
    }

    /// <summary>Field number for the "forwardType" field.</summary>
    public const int ForwardTypeFieldNumber = 5;
    private global::DDRCommProto.CommonHeader.Types.eForwardingType forwardType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.CommonHeader.Types.eForwardingType ForwardType {
      get { return forwardType_; }
      set {
        forwardType_ = value;
      }
    }

    /// <summary>Field number for the "recType" field.</summary>
    public const int RecTypeFieldNumber = 6;
    private global::DDRCommProto.CommonHeader.Types.eSrcRecType recType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.CommonHeader.Types.eSrcRecType RecType {
      get { return recType_; }
      set {
        recType_ = value;
      }
    }

    /// <summary>Field number for the "prevRouteAddr" field.</summary>
    public const int PrevRouteAddrFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_prevRouteAddr_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> prevRouteAddr_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// array of previous routes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PrevRouteAddr {
      get { return prevRouteAddr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BodyType != other.BodyType) return false;
      if(!flowDirection_.Equals(other.flowDirection_)) return false;
      if (BOriginal != other.BOriginal) return false;
      if (SrcCond != other.SrcCond) return false;
      if (ForwardType != other.ForwardType) return false;
      if (RecType != other.RecType) return false;
      if(!prevRouteAddr_.Equals(other.prevRouteAddr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BodyType.Length != 0) hash ^= BodyType.GetHashCode();
      hash ^= flowDirection_.GetHashCode();
      if (BOriginal != 0) hash ^= BOriginal.GetHashCode();
      if (SrcCond != 0) hash ^= SrcCond.GetHashCode();
      if (ForwardType != 0) hash ^= ForwardType.GetHashCode();
      if (RecType != 0) hash ^= RecType.GetHashCode();
      hash ^= prevRouteAddr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BodyType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BodyType);
      }
      flowDirection_.WriteTo(output, _repeated_flowDirection_codec);
      if (BOriginal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BOriginal);
      }
      if (SrcCond != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) SrcCond);
      }
      if (ForwardType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ForwardType);
      }
      if (RecType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RecType);
      }
      prevRouteAddr_.WriteTo(output, _repeated_prevRouteAddr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BodyType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BodyType);
      }
      size += flowDirection_.CalculateSize(_repeated_flowDirection_codec);
      if (BOriginal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BOriginal);
      }
      if (SrcCond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SrcCond);
      }
      if (ForwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ForwardType);
      }
      if (RecType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RecType);
      }
      size += prevRouteAddr_.CalculateSize(_repeated_prevRouteAddr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonHeader other) {
      if (other == null) {
        return;
      }
      if (other.BodyType.Length != 0) {
        BodyType = other.BodyType;
      }
      flowDirection_.Add(other.flowDirection_);
      if (other.BOriginal != 0) {
        BOriginal = other.BOriginal;
      }
      if (other.SrcCond != 0) {
        SrcCond = other.SrcCond;
      }
      if (other.ForwardType != 0) {
        ForwardType = other.ForwardType;
      }
      if (other.RecType != 0) {
        RecType = other.RecType;
      }
      prevRouteAddr_.Add(other.prevRouteAddr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BodyType = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            flowDirection_.AddEntriesFrom(input, _repeated_flowDirection_codec);
            break;
          }
          case 24: {
            BOriginal = input.ReadInt32();
            break;
          }
          case 32: {
            srcCond_ = (global::DDRCommProto.CommonHeader.Types.eSrcCondition) input.ReadEnum();
            break;
          }
          case 40: {
            forwardType_ = (global::DDRCommProto.CommonHeader.Types.eForwardingType) input.ReadEnum();
            break;
          }
          case 48: {
            recType_ = (global::DDRCommProto.CommonHeader.Types.eSrcRecType) input.ReadEnum();
            break;
          }
          case 58: {
            prevRouteAddr_.AddEntriesFrom(input, _repeated_prevRouteAddr_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommonHeader message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// flow direction of the immediate transfer
      /// </summary>
      public enum eFlowDir {
        [pbr::OriginalName("UNKNOWN2RS")] Unknown2Rs = 0,
        [pbr::OriginalName("RS2M")] Rs2M = 1,
        [pbr::OriginalName("M2RS")] M2Rs = 2,
        [pbr::OriginalName("RS2RR")] Rs2Rr = 3,
        [pbr::OriginalName("RR2RS")] Rr2Rs = 4,
        [pbr::OriginalName("UNKNOWN2LS")] Unknown2Ls = 5,
        [pbr::OriginalName("LS2C")] Ls2C = 6,
        [pbr::OriginalName("C2LS")] C2Ls = 7,
        [pbr::OriginalName("LS2LSM")] Ls2Lsm = 8,
        [pbr::OriginalName("LSM2LS")] Lsm2Ls = 9,
      }

      public enum eSrcCondition {
        [pbr::OriginalName("NoCond")] NoCond = 0,
        [pbr::OriginalName("Op")] Op = 1,
      }

      /// <summary>
      /// NoForwarding: No direct forwarding. Need to decrypt and parse the message bodies. Typical
      ///               use is in "notify*".
      /// LSMAll:       For RS, forward the message body to RR; for LS, forward the message body
      ///               to all connected LSMs. For an LSM, respond if the message body asks for
      ///               response of its functionality (assuming no conflicts among different LSMs).
      ///               Typical use is in "reqCmd".
      /// CltMonAll:    For RS, forward the message body to all connected monitors; for LS, forward
      ///               the message body to all connected clients, and RS (if connected). Typical
      ///               use is in "reqStatus", "reqAlarm", and "reqTextChat".
      /// ToOp:         For RS, forward the message body to the Op. monitor (if so); for LS, forward
      ///               the message body to the Op. client if one connected client is Op., otherwise
      ///               to the RS. Typical use is in "reqTalk" from robot_LSM.
      /// RoutingBack:  In this case, field "prevRouteAddr" should NOT be empty. The last element in
      ///               that field will be the target address (IP:port string) to forward messages,
      ///               and that last element will be removed in the new CommonHeader sent along the 
      ///               the message body. Typical use is in "respCmd" and "respTalk".
      /// </summary>
      public enum eForwardingType {
        /// <summary>
        /// simple notification, nothing to be forwarded
        /// </summary>
        [pbr::OriginalName("NoForwarding")] NoForwarding = 0,
        /// <summary>
        /// message body will finally be forwarded to all LSMs
        /// </summary>
        [pbr::OriginalName("LSMAll")] Lsmall = 1,
        /// <summary>
        /// message body will finally be forwarded to all clients/monitors
        /// </summary>
        [pbr::OriginalName("CltMonAll")] CltMonAll = 2,
        /// <summary>
        /// message body will finally be forwarded to Op. (client/monitor)
        /// </summary>
        [pbr::OriginalName("ToOp")] ToOp = 3,
        /// <summary>
        /// this message will be forwarded along the previous routes
        /// </summary>
        [pbr::OriginalName("RoutingBack")] RoutingBack = 4,
      }

      public enum eSrcRecType {
        /// <summary>
        /// routing info not recorded
        /// </summary>
        [pbr::OriginalName("NoRec")] NoRec = 0,
        /// <summary>
        /// IMMEDIATE source will be appended to the previous routes in form like “192.168.1.1:234”
        /// </summary>
        [pbr::OriginalName("RecSrc")] RecSrc = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class heartBeat : pb::IMessage<heartBeat> {
    private static readonly pb::MessageParser<heartBeat> _parser = new pb::MessageParser<heartBeat>(() => new heartBeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<heartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public heartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public heartBeat(heartBeat other) : this() {
      whatever_ = other.whatever_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public heartBeat Clone() {
      return new heartBeat(this);
    }

    /// <summary>Field number for the "whatever" field.</summary>
    public const int WhateverFieldNumber = 1;
    private string whatever_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Whatever {
      get { return whatever_; }
      set {
        whatever_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as heartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(heartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Whatever != other.Whatever) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Whatever.Length != 0) hash ^= Whatever.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Whatever.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Whatever);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Whatever.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Whatever);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(heartBeat other) {
      if (other == null) {
        return;
      }
      if (other.Whatever.Length != 0) {
        Whatever = other.Whatever;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Whatever = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class bcLSAddr : pb::IMessage<bcLSAddr> {
    private static readonly pb::MessageParser<bcLSAddr> _parser = new pb::MessageParser<bcLSAddr>(() => new bcLSAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bcLSAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr(bcLSAddr other) : this() {
      lSInfo_ = other.lSInfo_ != null ? other.lSInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bcLSAddr Clone() {
      return new bcLSAddr(this);
    }

    /// <summary>Field number for the "LSInfo" field.</summary>
    public const int LSInfoFieldNumber = 1;
    private global::DDRCommProto.bcLSAddr.Types.ServerInfo lSInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.bcLSAddr.Types.ServerInfo LSInfo {
      get { return lSInfo_; }
      set {
        lSInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bcLSAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bcLSAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LSInfo, other.LSInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lSInfo_ != null) hash ^= LSInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lSInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LSInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lSInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LSInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bcLSAddr other) {
      if (other == null) {
        return;
      }
      if (other.lSInfo_ != null) {
        if (lSInfo_ == null) {
          lSInfo_ = new global::DDRCommProto.bcLSAddr.Types.ServerInfo();
        }
        LSInfo.MergeFrom(other.LSInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lSInfo_ == null) {
              lSInfo_ = new global::DDRCommProto.bcLSAddr.Types.ServerInfo();
            }
            input.ReadMessage(lSInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the bcLSAddr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
        private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.bcLSAddr.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInfo(ServerInfo other) : this() {
          name_ = other.name_;
          ips_ = other.ips_.Clone();
          port_ = other.port_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInfo Clone() {
          return new ServerInfo(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ips" field.</summary>
        public const int IpsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_ips_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> ips_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Ips {
          get { return ips_; }
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 3;
        private int port_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ServerInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServerInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!ips_.Equals(other.ips_)) return false;
          if (Port != other.Port) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= ips_.GetHashCode();
          if (Port != 0) hash ^= Port.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          ips_.WriteTo(output, _repeated_ips_codec);
          if (Port != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Port);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += ips_.CalculateSize(_repeated_ips_codec);
          if (Port != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServerInfo other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          ips_.Add(other.ips_);
          if (other.Port != 0) {
            Port = other.Port;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                ips_.AddEntriesFrom(input, _repeated_ips_codec);
                break;
              }
              case 24: {
                Port = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// flowDirection = UNKNOWN2RS or UNKNOWN2LS
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqLogin : pb::IMessage<reqLogin> {
    private static readonly pb::MessageParser<reqLogin> _parser = new pb::MessageParser<reqLogin>(() => new reqLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin(reqLogin other) : this() {
      type_ = other.type_;
      username_ = other.username_;
      robotID_ = other.robotID_;
      robotPWD_ = other.robotPWD_;
      cltOpLv_ = other.cltOpLv_;
      uID_ = other.uID_;
      avStreamReq_ = other.avStreamReq_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqLogin Clone() {
      return new reqLogin(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::DDRCommProto.reqLogin.Types.eCltType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqLogin.Types.eCltType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    /// <summary>
    /// nickname for clients/monitors, module name for LSM, ignored for RR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotID" field.</summary>
    public const int RobotIDFieldNumber = 3;
    private string robotID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotID {
      get { return robotID_; }
      set {
        robotID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotPWD" field.</summary>
    public const int RobotPWDFieldNumber = 4;
    private string robotPWD_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotPWD {
      get { return robotPWD_; }
      set {
        robotPWD_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltOpLv" field.</summary>
    public const int CltOpLvFieldNumber = 5;
    private int cltOpLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CltOpLv {
      get { return cltOpLv_; }
      set {
        cltOpLv_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 6;
    private int uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    /// <summary>Field number for the "avStreamReq" field.</summary>
    public const int AvStreamReqFieldNumber = 7;
    private static readonly pb::FieldCodec<global::DDRCommProto.reqLogin.Types.msgAVStreamReq> _repeated_avStreamReq_codec
        = pb::FieldCodec.ForMessage(58, global::DDRCommProto.reqLogin.Types.msgAVStreamReq.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.reqLogin.Types.msgAVStreamReq> avStreamReq_ = new pbc::RepeatedField<global::DDRCommProto.reqLogin.Types.msgAVStreamReq>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.reqLogin.Types.msgAVStreamReq> AvStreamReq {
      get { return avStreamReq_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Username != other.Username) return false;
      if (RobotID != other.RobotID) return false;
      if (RobotPWD != other.RobotPWD) return false;
      if (CltOpLv != other.CltOpLv) return false;
      if (UID != other.UID) return false;
      if(!avStreamReq_.Equals(other.avStreamReq_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (RobotID.Length != 0) hash ^= RobotID.GetHashCode();
      if (RobotPWD.Length != 0) hash ^= RobotPWD.GetHashCode();
      if (CltOpLv != 0) hash ^= CltOpLv.GetHashCode();
      if (UID != 0) hash ^= UID.GetHashCode();
      hash ^= avStreamReq_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (RobotID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RobotID);
      }
      if (RobotPWD.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RobotPWD);
      }
      if (CltOpLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CltOpLv);
      }
      if (UID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UID);
      }
      avStreamReq_.WriteTo(output, _repeated_avStreamReq_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (RobotID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotID);
      }
      if (RobotPWD.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotPWD);
      }
      if (CltOpLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CltOpLv);
      }
      if (UID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UID);
      }
      size += avStreamReq_.CalculateSize(_repeated_avStreamReq_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqLogin other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.RobotID.Length != 0) {
        RobotID = other.RobotID;
      }
      if (other.RobotPWD.Length != 0) {
        RobotPWD = other.RobotPWD;
      }
      if (other.CltOpLv != 0) {
        CltOpLv = other.CltOpLv;
      }
      if (other.UID != 0) {
        UID = other.UID;
      }
      avStreamReq_.Add(other.avStreamReq_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::DDRCommProto.reqLogin.Types.eCltType) input.ReadEnum();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            RobotID = input.ReadString();
            break;
          }
          case 34: {
            RobotPWD = input.ReadString();
            break;
          }
          case 40: {
            CltOpLv = input.ReadInt32();
            break;
          }
          case 48: {
            UID = input.ReadInt32();
            break;
          }
          case 58: {
            avStreamReq_.AddEntriesFrom(input, _repeated_avStreamReq_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqLogin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eCltType {
        [pbr::OriginalName("client")] Client = 0,
        [pbr::OriginalName("androidClient")] AndroidClient = 1,
        [pbr::OriginalName("LSM")] Lsm = 2,
      }

      public sealed partial class msgAVStreamReq : pb::IMessage<msgAVStreamReq> {
        private static readonly pb::MessageParser<msgAVStreamReq> _parser = new pb::MessageParser<msgAVStreamReq>(() => new msgAVStreamReq());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<msgAVStreamReq> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.reqLogin.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public msgAVStreamReq() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public msgAVStreamReq(msgAVStreamReq other) : this() {
          avType_ = other.avType_;
          chName_ = other.chName_;
          bandwidthReq_ = other.bandwidthReq_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public msgAVStreamReq Clone() {
          return new msgAVStreamReq(this);
        }

        /// <summary>Field number for the "avType" field.</summary>
        public const int AvTypeFieldNumber = 1;
        private int avType_;
        /// <summary>
        /// 0-N.A; 1-audio; 2-video; 3-A+V
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AvType {
          get { return avType_; }
          set {
            avType_ = value;
          }
        }

        /// <summary>Field number for the "chName" field.</summary>
        public const int ChNameFieldNumber = 2;
        private string chName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChName {
          get { return chName_; }
          set {
            chName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bandwidthReq" field.</summary>
        public const int BandwidthReqFieldNumber = 3;
        private int bandwidthReq_;
        /// <summary>
        /// in kbps
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BandwidthReq {
          get { return bandwidthReq_; }
          set {
            bandwidthReq_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as msgAVStreamReq);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(msgAVStreamReq other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AvType != other.AvType) return false;
          if (ChName != other.ChName) return false;
          if (BandwidthReq != other.BandwidthReq) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AvType != 0) hash ^= AvType.GetHashCode();
          if (ChName.Length != 0) hash ^= ChName.GetHashCode();
          if (BandwidthReq != 0) hash ^= BandwidthReq.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AvType != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(AvType);
          }
          if (ChName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ChName);
          }
          if (BandwidthReq != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(BandwidthReq);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AvType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvType);
          }
          if (ChName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChName);
          }
          if (BandwidthReq != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BandwidthReq);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(msgAVStreamReq other) {
          if (other == null) {
            return;
          }
          if (other.AvType != 0) {
            AvType = other.AvType;
          }
          if (other.ChName.Length != 0) {
            ChName = other.ChName;
          }
          if (other.BandwidthReq != 0) {
            BandwidthReq = other.BandwidthReq;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AvType = input.ReadInt32();
                break;
              }
              case 18: {
                ChName = input.ReadString();
                break;
              }
              case 24: {
                BandwidthReq = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// flowDirection = RS2M or RS2RR or LS2C or LS2LSM
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class respLogin : pb::IMessage<respLogin> {
    private static readonly pb::MessageParser<respLogin> _parser = new pb::MessageParser<respLogin>(() => new respLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respLogin(respLogin other) : this() {
      retcode_ = other.retcode_;
      yourRole_ = other.yourRole_;
      uID_ = other.uID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respLogin Clone() {
      return new respLogin(this);
    }

    /// <summary>Field number for the "retcode" field.</summary>
    public const int RetcodeFieldNumber = 1;
    private global::DDRCommProto.respLogin.Types.eLoginRetCode retcode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respLogin.Types.eLoginRetCode Retcode {
      get { return retcode_; }
      set {
        retcode_ = value;
      }
    }

    /// <summary>Field number for the "yourRole" field.</summary>
    public const int YourRoleFieldNumber = 2;
    private global::DDRCommProto.respLogin.Types.eCltType yourRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respLogin.Types.eCltType YourRole {
      get { return yourRole_; }
      set {
        yourRole_ = value;
      }
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 3;
    private int uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Retcode != other.Retcode) return false;
      if (YourRole != other.YourRole) return false;
      if (UID != other.UID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Retcode != 0) hash ^= Retcode.GetHashCode();
      if (YourRole != 0) hash ^= YourRole.GetHashCode();
      if (UID != 0) hash ^= UID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Retcode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Retcode);
      }
      if (YourRole != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) YourRole);
      }
      if (UID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Retcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Retcode);
      }
      if (YourRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) YourRole);
      }
      if (UID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respLogin other) {
      if (other == null) {
        return;
      }
      if (other.Retcode != 0) {
        Retcode = other.Retcode;
      }
      if (other.YourRole != 0) {
        YourRole = other.YourRole;
      }
      if (other.UID != 0) {
        UID = other.UID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            retcode_ = (global::DDRCommProto.respLogin.Types.eLoginRetCode) input.ReadEnum();
            break;
          }
          case 16: {
            yourRole_ = (global::DDRCommProto.respLogin.Types.eCltType) input.ReadEnum();
            break;
          }
          case 24: {
            UID = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the respLogin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eLoginRetCode {
        [pbr::OriginalName("success")] Success = 0,
        [pbr::OriginalName("server_busy")] ServerBusy = 1,
        [pbr::OriginalName("server_limit_reached")] ServerLimitReached = 2,
        [pbr::OriginalName("UID_error")] UidError = 3,
        [pbr::OriginalName("incorrect_password")] IncorrectPassword = 4,
      }

      public enum eCltType {
        [pbr::OriginalName("client")] Client = 0,
        [pbr::OriginalName("androidClient")] AndroidClient = 1,
        [pbr::OriginalName("LSM")] Lsm = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// flowDirection = RS2M or LS2C
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class notifyTerminalAccess : pb::IMessage<notifyTerminalAccess> {
    private static readonly pb::MessageParser<notifyTerminalAccess> _parser = new pb::MessageParser<notifyTerminalAccess>(() => new notifyTerminalAccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyTerminalAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTerminalAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTerminalAccess(notifyTerminalAccess other) : this() {
      bRRConnected2RS_ = other.bRRConnected2RS_;
      bOp_ = other.bOp_;
      nMonitors_ = other.nMonitors_;
      nClients_ = other.nClients_;
      nameLSMs_ = other.nameLSMs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyTerminalAccess Clone() {
      return new notifyTerminalAccess(this);
    }

    /// <summary>Field number for the "bRRConnected2RS" field.</summary>
    public const int BRRConnected2RSFieldNumber = 1;
    private int bRRConnected2RS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BRRConnected2RS {
      get { return bRRConnected2RS_; }
      set {
        bRRConnected2RS_ = value;
      }
    }

    /// <summary>Field number for the "bOp" field.</summary>
    public const int BOpFieldNumber = 2;
    private int bOp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BOp {
      get { return bOp_; }
      set {
        bOp_ = value;
      }
    }

    /// <summary>Field number for the "nMonitors" field.</summary>
    public const int NMonitorsFieldNumber = 3;
    private int nMonitors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMonitors {
      get { return nMonitors_; }
      set {
        nMonitors_ = value;
      }
    }

    /// <summary>Field number for the "nClients" field.</summary>
    public const int NClientsFieldNumber = 4;
    private int nClients_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClients {
      get { return nClients_; }
      set {
        nClients_ = value;
      }
    }

    /// <summary>Field number for the "nameLSMs" field.</summary>
    public const int NameLSMsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_nameLSMs_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> nameLSMs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NameLSMs {
      get { return nameLSMs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyTerminalAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyTerminalAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BRRConnected2RS != other.BRRConnected2RS) return false;
      if (BOp != other.BOp) return false;
      if (NMonitors != other.NMonitors) return false;
      if (NClients != other.NClients) return false;
      if(!nameLSMs_.Equals(other.nameLSMs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BRRConnected2RS != 0) hash ^= BRRConnected2RS.GetHashCode();
      if (BOp != 0) hash ^= BOp.GetHashCode();
      if (NMonitors != 0) hash ^= NMonitors.GetHashCode();
      if (NClients != 0) hash ^= NClients.GetHashCode();
      hash ^= nameLSMs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BRRConnected2RS != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BRRConnected2RS);
      }
      if (BOp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BOp);
      }
      if (NMonitors != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NMonitors);
      }
      if (NClients != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NClients);
      }
      nameLSMs_.WriteTo(output, _repeated_nameLSMs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BRRConnected2RS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BRRConnected2RS);
      }
      if (BOp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BOp);
      }
      if (NMonitors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMonitors);
      }
      if (NClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClients);
      }
      size += nameLSMs_.CalculateSize(_repeated_nameLSMs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyTerminalAccess other) {
      if (other == null) {
        return;
      }
      if (other.BRRConnected2RS != 0) {
        BRRConnected2RS = other.BRRConnected2RS;
      }
      if (other.BOp != 0) {
        BOp = other.BOp;
      }
      if (other.NMonitors != 0) {
        NMonitors = other.NMonitors;
      }
      if (other.NClients != 0) {
        NClients = other.NClients;
      }
      nameLSMs_.Add(other.nameLSMs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BRRConnected2RS = input.ReadInt32();
            break;
          }
          case 16: {
            BOp = input.ReadInt32();
            break;
          }
          case 24: {
            NMonitors = input.ReadInt32();
            break;
          }
          case 32: {
            NClients = input.ReadInt32();
            break;
          }
          case 42: {
            nameLSMs_.AddEntriesFrom(input, _repeated_nameLSMs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = RS2RR or RR2RS
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class notifySerAccess : pb::IMessage<notifySerAccess> {
    private static readonly pb::MessageParser<notifySerAccess> _parser = new pb::MessageParser<notifySerAccess>(() => new notifySerAccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifySerAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifySerAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifySerAccess(notifySerAccess other) : this() {
      nMonitors_ = other.nMonitors_;
      mTopOpLv_ = other.mTopOpLv_;
      mTopOpTime_ = other.mTopOpTime_;
      nClients_ = other.nClients_;
      cTopOpLv_ = other.cTopOpLv_;
      cTopOpTime_ = other.cTopOpTime_;
      namesLSM_ = other.namesLSM_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifySerAccess Clone() {
      return new notifySerAccess(this);
    }

    /// <summary>Field number for the "nMonitors" field.</summary>
    public const int NMonitorsFieldNumber = 1;
    private int nMonitors_;
    /// <summary>
    /// field 1~3 for RS2RR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NMonitors {
      get { return nMonitors_; }
      set {
        nMonitors_ = value;
      }
    }

    /// <summary>Field number for the "mTopOpLv" field.</summary>
    public const int MTopOpLvFieldNumber = 2;
    private int mTopOpLv_;
    /// <summary>
    /// op. level of the top monitor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MTopOpLv {
      get { return mTopOpLv_; }
      set {
        mTopOpLv_ = value;
      }
    }

    /// <summary>Field number for the "mTopOpTime" field.</summary>
    public const int MTopOpTimeFieldNumber = 3;
    private int mTopOpTime_;
    /// <summary>
    /// connection time of the top monitor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MTopOpTime {
      get { return mTopOpTime_; }
      set {
        mTopOpTime_ = value;
      }
    }

    /// <summary>Field number for the "nClients" field.</summary>
    public const int NClientsFieldNumber = 4;
    private int nClients_;
    /// <summary>
    /// field 4~7 for RR2RS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NClients {
      get { return nClients_; }
      set {
        nClients_ = value;
      }
    }

    /// <summary>Field number for the "cTopOpLv" field.</summary>
    public const int CTopOpLvFieldNumber = 5;
    private int cTopOpLv_;
    /// <summary>
    /// op. level of the top client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CTopOpLv {
      get { return cTopOpLv_; }
      set {
        cTopOpLv_ = value;
      }
    }

    /// <summary>Field number for the "cTopOpTime" field.</summary>
    public const int CTopOpTimeFieldNumber = 6;
    private long cTopOpTime_;
    /// <summary>
    /// connection time of the top client
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CTopOpTime {
      get { return cTopOpTime_; }
      set {
        cTopOpTime_ = value;
      }
    }

    /// <summary>Field number for the "namesLSM" field.</summary>
    public const int NamesLSMFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_namesLSM_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> namesLSM_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NamesLSM {
      get { return namesLSM_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifySerAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifySerAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NMonitors != other.NMonitors) return false;
      if (MTopOpLv != other.MTopOpLv) return false;
      if (MTopOpTime != other.MTopOpTime) return false;
      if (NClients != other.NClients) return false;
      if (CTopOpLv != other.CTopOpLv) return false;
      if (CTopOpTime != other.CTopOpTime) return false;
      if(!namesLSM_.Equals(other.namesLSM_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NMonitors != 0) hash ^= NMonitors.GetHashCode();
      if (MTopOpLv != 0) hash ^= MTopOpLv.GetHashCode();
      if (MTopOpTime != 0) hash ^= MTopOpTime.GetHashCode();
      if (NClients != 0) hash ^= NClients.GetHashCode();
      if (CTopOpLv != 0) hash ^= CTopOpLv.GetHashCode();
      if (CTopOpTime != 0L) hash ^= CTopOpTime.GetHashCode();
      hash ^= namesLSM_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NMonitors != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NMonitors);
      }
      if (MTopOpLv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MTopOpLv);
      }
      if (MTopOpTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MTopOpTime);
      }
      if (NClients != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NClients);
      }
      if (CTopOpLv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CTopOpLv);
      }
      if (CTopOpTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CTopOpTime);
      }
      namesLSM_.WriteTo(output, _repeated_namesLSM_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NMonitors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NMonitors);
      }
      if (MTopOpLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MTopOpLv);
      }
      if (MTopOpTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MTopOpTime);
      }
      if (NClients != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NClients);
      }
      if (CTopOpLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CTopOpLv);
      }
      if (CTopOpTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CTopOpTime);
      }
      size += namesLSM_.CalculateSize(_repeated_namesLSM_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifySerAccess other) {
      if (other == null) {
        return;
      }
      if (other.NMonitors != 0) {
        NMonitors = other.NMonitors;
      }
      if (other.MTopOpLv != 0) {
        MTopOpLv = other.MTopOpLv;
      }
      if (other.MTopOpTime != 0) {
        MTopOpTime = other.MTopOpTime;
      }
      if (other.NClients != 0) {
        NClients = other.NClients;
      }
      if (other.CTopOpLv != 0) {
        CTopOpLv = other.CTopOpLv;
      }
      if (other.CTopOpTime != 0L) {
        CTopOpTime = other.CTopOpTime;
      }
      namesLSM_.Add(other.namesLSM_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NMonitors = input.ReadInt32();
            break;
          }
          case 16: {
            MTopOpLv = input.ReadInt32();
            break;
          }
          case 24: {
            MTopOpTime = input.ReadInt32();
            break;
          }
          case 32: {
            NClients = input.ReadInt32();
            break;
          }
          case 40: {
            CTopOpLv = input.ReadInt32();
            break;
          }
          case 48: {
            CTopOpTime = input.ReadInt64();
            break;
          }
          case 58: {
            namesLSM_.AddEntriesFrom(input, _repeated_namesLSM_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = RS2M or RS2RR or LS2C or LS2LSM
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class notifyAVStream : pb::IMessage<notifyAVStream> {
    private static readonly pb::MessageParser<notifyAVStream> _parser = new pb::MessageParser<notifyAVStream>(() => new notifyAVStream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<notifyAVStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAVStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAVStream(notifyAVStream other) : this() {
      reservedChannel_ = other.reservedChannel_ != null ? other.reservedChannel_.Clone() : null;
      robotMonitorChannels_ = other.robotMonitorChannels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public notifyAVStream Clone() {
      return new notifyAVStream(this);
    }

    /// <summary>Field number for the "reservedChannel" field.</summary>
    public const int ReservedChannelFieldNumber = 1;
    private global::DDRCommProto.notifyAVStream.Types.fullChannelInfo reservedChannel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.notifyAVStream.Types.fullChannelInfo ReservedChannel {
      get { return reservedChannel_; }
      set {
        reservedChannel_ = value;
      }
    }

    /// <summary>Field number for the "robotMonitorChannels" field.</summary>
    public const int RobotMonitorChannelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::DDRCommProto.notifyAVStream.Types.fullChannelInfo> _repeated_robotMonitorChannels_codec
        = pb::FieldCodec.ForMessage(18, global::DDRCommProto.notifyAVStream.Types.fullChannelInfo.Parser);
    private readonly pbc::RepeatedField<global::DDRCommProto.notifyAVStream.Types.fullChannelInfo> robotMonitorChannels_ = new pbc::RepeatedField<global::DDRCommProto.notifyAVStream.Types.fullChannelInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DDRCommProto.notifyAVStream.Types.fullChannelInfo> RobotMonitorChannels {
      get { return robotMonitorChannels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as notifyAVStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(notifyAVStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReservedChannel, other.ReservedChannel)) return false;
      if(!robotMonitorChannels_.Equals(other.robotMonitorChannels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (reservedChannel_ != null) hash ^= ReservedChannel.GetHashCode();
      hash ^= robotMonitorChannels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (reservedChannel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReservedChannel);
      }
      robotMonitorChannels_.WriteTo(output, _repeated_robotMonitorChannels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (reservedChannel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReservedChannel);
      }
      size += robotMonitorChannels_.CalculateSize(_repeated_robotMonitorChannels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(notifyAVStream other) {
      if (other == null) {
        return;
      }
      if (other.reservedChannel_ != null) {
        if (reservedChannel_ == null) {
          reservedChannel_ = new global::DDRCommProto.notifyAVStream.Types.fullChannelInfo();
        }
        ReservedChannel.MergeFrom(other.ReservedChannel);
      }
      robotMonitorChannels_.Add(other.robotMonitorChannels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (reservedChannel_ == null) {
              reservedChannel_ = new global::DDRCommProto.notifyAVStream.Types.fullChannelInfo();
            }
            input.ReadMessage(reservedChannel_);
            break;
          }
          case 18: {
            robotMonitorChannels_.AddEntriesFrom(input, _repeated_robotMonitorChannels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the notifyAVStream message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class fullChannelInfo : pb::IMessage<fullChannelInfo> {
        private static readonly pb::MessageParser<fullChannelInfo> _parser = new pb::MessageParser<fullChannelInfo>(() => new fullChannelInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<fullChannelInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DDRCommProto.notifyAVStream.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public fullChannelInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public fullChannelInfo(fullChannelInfo other) : this() {
          devType_ = other.devType_;
          dataType_ = other.dataType_;
          localResAccStr_ = other.localResAccStr_;
          channelDescription_ = other.channelDescription_;
          bwReq_ = other.bwReq_;
          remoteIP_ = other.remoteIP_;
          remotePort_ = other.remotePort_;
          remotePass_ = other.remotePass_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public fullChannelInfo Clone() {
          return new fullChannelInfo(this);
        }

        /// <summary>Field number for the "devType" field.</summary>
        public const int DevTypeFieldNumber = 1;
        private int devType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DevType {
          get { return devType_; }
          set {
            devType_ = value;
          }
        }

        /// <summary>Field number for the "dataType" field.</summary>
        public const int DataTypeFieldNumber = 2;
        private int dataType_;
        /// <summary>
        /// 0-N.A; 1-audio; 2-video; 3-audio+video
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DataType {
          get { return dataType_; }
          set {
            dataType_ = value;
          }
        }

        /// <summary>Field number for the "localResAccStr" field.</summary>
        public const int LocalResAccStrFieldNumber = 3;
        private string localResAccStr_ = "";
        /// <summary>
        /// UTF-8
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LocalResAccStr {
          get { return localResAccStr_; }
          set {
            localResAccStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "channelDescription" field.</summary>
        public const int ChannelDescriptionFieldNumber = 4;
        private string channelDescription_ = "";
        /// <summary>
        /// UTF-8
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChannelDescription {
          get { return channelDescription_; }
          set {
            channelDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bwReq" field.</summary>
        public const int BwReqFieldNumber = 5;
        private int bwReq_;
        /// <summary>
        /// bandwidth requirement in kbps		
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BwReq {
          get { return bwReq_; }
          set {
            bwReq_ = value;
          }
        }

        /// <summary>Field number for the "remoteIP" field.</summary>
        public const int RemoteIPFieldNumber = 6;
        private long remoteIP_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RemoteIP {
          get { return remoteIP_; }
          set {
            remoteIP_ = value;
          }
        }

        /// <summary>Field number for the "remotePort" field.</summary>
        public const int RemotePortFieldNumber = 7;
        private int remotePort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RemotePort {
          get { return remotePort_; }
          set {
            remotePort_ = value;
          }
        }

        /// <summary>Field number for the "remotePass" field.</summary>
        public const int RemotePassFieldNumber = 8;
        private string remotePass_ = "";
        /// <summary>
        /// a special string that serves as the key to streaming servers
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemotePass {
          get { return remotePass_; }
          set {
            remotePass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as fullChannelInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(fullChannelInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DevType != other.DevType) return false;
          if (DataType != other.DataType) return false;
          if (LocalResAccStr != other.LocalResAccStr) return false;
          if (ChannelDescription != other.ChannelDescription) return false;
          if (BwReq != other.BwReq) return false;
          if (RemoteIP != other.RemoteIP) return false;
          if (RemotePort != other.RemotePort) return false;
          if (RemotePass != other.RemotePass) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DevType != 0) hash ^= DevType.GetHashCode();
          if (DataType != 0) hash ^= DataType.GetHashCode();
          if (LocalResAccStr.Length != 0) hash ^= LocalResAccStr.GetHashCode();
          if (ChannelDescription.Length != 0) hash ^= ChannelDescription.GetHashCode();
          if (BwReq != 0) hash ^= BwReq.GetHashCode();
          if (RemoteIP != 0L) hash ^= RemoteIP.GetHashCode();
          if (RemotePort != 0) hash ^= RemotePort.GetHashCode();
          if (RemotePass.Length != 0) hash ^= RemotePass.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DevType != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(DevType);
          }
          if (DataType != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(DataType);
          }
          if (LocalResAccStr.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(LocalResAccStr);
          }
          if (ChannelDescription.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(ChannelDescription);
          }
          if (BwReq != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(BwReq);
          }
          if (RemoteIP != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(RemoteIP);
          }
          if (RemotePort != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(RemotePort);
          }
          if (RemotePass.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(RemotePass);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DevType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DevType);
          }
          if (DataType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataType);
          }
          if (LocalResAccStr.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalResAccStr);
          }
          if (ChannelDescription.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelDescription);
          }
          if (BwReq != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BwReq);
          }
          if (RemoteIP != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteIP);
          }
          if (RemotePort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemotePort);
          }
          if (RemotePass.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemotePass);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(fullChannelInfo other) {
          if (other == null) {
            return;
          }
          if (other.DevType != 0) {
            DevType = other.DevType;
          }
          if (other.DataType != 0) {
            DataType = other.DataType;
          }
          if (other.LocalResAccStr.Length != 0) {
            LocalResAccStr = other.LocalResAccStr;
          }
          if (other.ChannelDescription.Length != 0) {
            ChannelDescription = other.ChannelDescription;
          }
          if (other.BwReq != 0) {
            BwReq = other.BwReq;
          }
          if (other.RemoteIP != 0L) {
            RemoteIP = other.RemoteIP;
          }
          if (other.RemotePort != 0) {
            RemotePort = other.RemotePort;
          }
          if (other.RemotePass.Length != 0) {
            RemotePass = other.RemotePass;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                DevType = input.ReadInt32();
                break;
              }
              case 16: {
                DataType = input.ReadInt32();
                break;
              }
              case 26: {
                LocalResAccStr = input.ReadString();
                break;
              }
              case 34: {
                ChannelDescription = input.ReadString();
                break;
              }
              case 40: {
                BwReq = input.ReadInt32();
                break;
              }
              case 48: {
                RemoteIP = input.ReadInt64();
                break;
              }
              case 56: {
                RemotePort = input.ReadInt32();
                break;
              }
              case 66: {
                RemotePass = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// if callerType == client,
  ///		flowDirection = C2LS or LS2LSM
  ///      eSrcCondition = Op; forwardType = LSMAll; eSrcRecType = RecSrc;
  /// if callerType == monitor,
  ///		flowDirection = M2RS or RS2RR or LS2LSM
  ///      eSrcCondition = Op; forwardType = LSMAll; eSrcRecType = RecSrc;
  /// if callerType == robot_LSM,
  ///		flowDirection = LSM2LS or LS2C or RR2RS or RS2M
  ///      eSrcCondition = NoCond; forwardType = ToOp; eSrcRecType = RecSrc;
  /// </summary>
  public sealed partial class reqTalk : pb::IMessage<reqTalk> {
    private static readonly pb::MessageParser<reqTalk> _parser = new pb::MessageParser<reqTalk>(() => new reqTalk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqTalk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalk(reqTalk other) : this() {
      callerType_ = other.callerType_;
      talkID_ = other.talkID_;
      avType_ = other.avType_;
      localTalkAddr_ = other.localTalkAddr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalk Clone() {
      return new reqTalk(this);
    }

    /// <summary>Field number for the "callerType" field.</summary>
    public const int CallerTypeFieldNumber = 1;
    private global::DDRCommProto.reqTalk.Types.eCallerType callerType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqTalk.Types.eCallerType CallerType {
      get { return callerType_; }
      set {
        callerType_ = value;
      }
    }

    /// <summary>Field number for the "talkID" field.</summary>
    public const int TalkIDFieldNumber = 2;
    private int talkID_;
    /// <summary>
    /// a randomly generated ID for this session of talk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalkID {
      get { return talkID_; }
      set {
        talkID_ = value;
      }
    }

    /// <summary>Field number for the "avType" field.</summary>
    public const int AvTypeFieldNumber = 3;
    private int avType_;
    /// <summary>
    /// 0-N.A; 1-audio; 2-video; 3-audio+video
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvType {
      get { return avType_; }
      set {
        avType_ = value;
      }
    }

    /// <summary>Field number for the "localTalkAddr" field.</summary>
    public const int LocalTalkAddrFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_localTalkAddr_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> localTalkAddr_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// when the call is only between two local devices (client->LSM or LSM->client)
    /// these strings indicate caller's TCP server of talk. For client calling LSM,
    /// this address is on the client side and the LSM will try to receive data there;
    /// for LSM calling client, this address is on the LSM side and the client will try
    /// to send data there.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LocalTalkAddr {
      get { return localTalkAddr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqTalk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqTalk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerType != other.CallerType) return false;
      if (TalkID != other.TalkID) return false;
      if (AvType != other.AvType) return false;
      if(!localTalkAddr_.Equals(other.localTalkAddr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerType != 0) hash ^= CallerType.GetHashCode();
      if (TalkID != 0) hash ^= TalkID.GetHashCode();
      if (AvType != 0) hash ^= AvType.GetHashCode();
      hash ^= localTalkAddr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CallerType);
      }
      if (TalkID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TalkID);
      }
      if (AvType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AvType);
      }
      localTalkAddr_.WriteTo(output, _repeated_localTalkAddr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallerType);
      }
      if (TalkID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TalkID);
      }
      if (AvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvType);
      }
      size += localTalkAddr_.CalculateSize(_repeated_localTalkAddr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqTalk other) {
      if (other == null) {
        return;
      }
      if (other.CallerType != 0) {
        CallerType = other.CallerType;
      }
      if (other.TalkID != 0) {
        TalkID = other.TalkID;
      }
      if (other.AvType != 0) {
        AvType = other.AvType;
      }
      localTalkAddr_.Add(other.localTalkAddr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            callerType_ = (global::DDRCommProto.reqTalk.Types.eCallerType) input.ReadEnum();
            break;
          }
          case 16: {
            TalkID = input.ReadInt32();
            break;
          }
          case 24: {
            AvType = input.ReadInt32();
            break;
          }
          case 34: {
            localTalkAddr_.AddEntriesFrom(input, _repeated_localTalkAddr_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqTalk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eCallerType {
        [pbr::OriginalName("client")] Client = 0,
        [pbr::OriginalName("monitor")] Monitor = 1,
        [pbr::OriginalName("robot_LSM")] RobotLsm = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// if receiverType == client,
  ///		flowDirection = C2LS or LS2LSM
  ///      eSrcCondition = NoCond; forwardType = RoutingBack; eSrcRecType = RecSrc;
  /// if callerType == monitor,
  ///		flowDirection = M2RS or RS2RR or LS2LSM
  ///      eSrcCondition = NoCond; forwardType = RoutingBack; eSrcRecType = RecSrc;
  /// if receiverType == robot_LSM,
  ///		flowDirection = LSM2LS or LS2C or RR2RS or RS2M
  ///      eSrcCondition = NoCond; forwardType = RoutingBack; eSrcRecType = RecSrc;
  /// Note that this message body is sent along with field "prevRouteAddr" of the previously
  /// received message header (CommonHeader).
  /// </summary>
  public sealed partial class respTalk : pb::IMessage<respTalk> {
    private static readonly pb::MessageParser<respTalk> _parser = new pb::MessageParser<respTalk>(() => new respTalk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respTalk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respTalk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respTalk(respTalk other) : this() {
      receiverType_ = other.receiverType_;
      talkID_ = other.talkID_;
      avType_ = other.avType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respTalk Clone() {
      return new respTalk(this);
    }

    /// <summary>Field number for the "receiverType" field.</summary>
    public const int ReceiverTypeFieldNumber = 1;
    private global::DDRCommProto.respTalk.Types.eReceiverType receiverType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respTalk.Types.eReceiverType ReceiverType {
      get { return receiverType_; }
      set {
        receiverType_ = value;
      }
    }

    /// <summary>Field number for the "talkID" field.</summary>
    public const int TalkIDFieldNumber = 2;
    private int talkID_;
    /// <summary>
    /// a randomly generated ID for this session of talk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalkID {
      get { return talkID_; }
      set {
        talkID_ = value;
      }
    }

    /// <summary>Field number for the "avType" field.</summary>
    public const int AvTypeFieldNumber = 3;
    private int avType_;
    /// <summary>
    /// 0-N.A; 1-audio; 2-video; 3-audio+video
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvType {
      get { return avType_; }
      set {
        avType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respTalk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respTalk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceiverType != other.ReceiverType) return false;
      if (TalkID != other.TalkID) return false;
      if (AvType != other.AvType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceiverType != 0) hash ^= ReceiverType.GetHashCode();
      if (TalkID != 0) hash ^= TalkID.GetHashCode();
      if (AvType != 0) hash ^= AvType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReceiverType);
      }
      if (TalkID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TalkID);
      }
      if (AvType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AvType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiverType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReceiverType);
      }
      if (TalkID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TalkID);
      }
      if (AvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respTalk other) {
      if (other == null) {
        return;
      }
      if (other.ReceiverType != 0) {
        ReceiverType = other.ReceiverType;
      }
      if (other.TalkID != 0) {
        TalkID = other.TalkID;
      }
      if (other.AvType != 0) {
        AvType = other.AvType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            receiverType_ = (global::DDRCommProto.respTalk.Types.eReceiverType) input.ReadEnum();
            break;
          }
          case 16: {
            TalkID = input.ReadInt32();
            break;
          }
          case 24: {
            AvType = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the respTalk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eReceiverType {
        [pbr::OriginalName("client")] Client = 0,
        [pbr::OriginalName("monitor")] Monitor = 1,
        [pbr::OriginalName("robot_LSM")] RobotLsm = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// this is to maintain (dual) talk by sending heart beats
  /// flowDirection = any possibility
  /// eSrcCondition = NoCond; forwardType = RoutingBack; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqTalkHB : pb::IMessage<reqTalkHB> {
    private static readonly pb::MessageParser<reqTalkHB> _parser = new pb::MessageParser<reqTalkHB>(() => new reqTalkHB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqTalkHB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalkHB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalkHB(reqTalkHB other) : this() {
      callerTalkID_ = other.callerTalkID_;
      receiverTalkID_ = other.receiverTalkID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTalkHB Clone() {
      return new reqTalkHB(this);
    }

    /// <summary>Field number for the "callerTalkID" field.</summary>
    public const int CallerTalkIDFieldNumber = 1;
    private int callerTalkID_;
    /// <summary>
    /// caller's talkID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CallerTalkID {
      get { return callerTalkID_; }
      set {
        callerTalkID_ = value;
      }
    }

    /// <summary>Field number for the "receiverTalkID" field.</summary>
    public const int ReceiverTalkIDFieldNumber = 2;
    private int receiverTalkID_;
    /// <summary>
    /// receiver's talkID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReceiverTalkID {
      get { return receiverTalkID_; }
      set {
        receiverTalkID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqTalkHB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqTalkHB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallerTalkID != other.CallerTalkID) return false;
      if (ReceiverTalkID != other.ReceiverTalkID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallerTalkID != 0) hash ^= CallerTalkID.GetHashCode();
      if (ReceiverTalkID != 0) hash ^= ReceiverTalkID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallerTalkID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CallerTalkID);
      }
      if (ReceiverTalkID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReceiverTalkID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallerTalkID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallerTalkID);
      }
      if (ReceiverTalkID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiverTalkID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqTalkHB other) {
      if (other == null) {
        return;
      }
      if (other.CallerTalkID != 0) {
        CallerTalkID = other.CallerTalkID;
      }
      if (other.ReceiverTalkID != 0) {
        ReceiverTalkID = other.ReceiverTalkID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CallerTalkID = input.ReadInt32();
            break;
          }
          case 16: {
            ReceiverTalkID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = M2RS or RS2RR or C2LS or LS2LSM or LSM2LS
  /// eSrcCondition = Op; forwardType = LSMAll; eSrcRecType = RecSrc;
  /// </summary>
  public sealed partial class reqCmd : pb::IMessage<reqCmd> {
    private static readonly pb::MessageParser<reqCmd> _parser = new pb::MessageParser<reqCmd>(() => new reqCmd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmd(reqCmd other) : this() {
      cmdID_ = other.cmdID_;
      cmdMsg_ = other.cmdMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqCmd Clone() {
      return new reqCmd(this);
    }

    /// <summary>Field number for the "cmdID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private long cmdID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = value;
      }
    }

    /// <summary>Field number for the "cmdMsg" field.</summary>
    public const int CmdMsgFieldNumber = 2;
    private string cmdMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CmdMsg {
      get { return cmdMsg_; }
      set {
        cmdMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (CmdMsg != other.CmdMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID != 0L) hash ^= CmdID.GetHashCode();
      if (CmdMsg.Length != 0) hash ^= CmdMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CmdID);
      }
      if (CmdMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CmdMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CmdID);
      }
      if (CmdMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CmdMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqCmd other) {
      if (other == null) {
        return;
      }
      if (other.CmdID != 0L) {
        CmdID = other.CmdID;
      }
      if (other.CmdMsg.Length != 0) {
        CmdMsg = other.CmdMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CmdID = input.ReadInt64();
            break;
          }
          case 18: {
            CmdMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = LSM2LS or RR2RS or RS2M or LS2C or LS2LSM
  /// eSrcCondition = NoCond; forwardType = RoutingBack; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class respCmd : pb::IMessage<respCmd> {
    private static readonly pb::MessageParser<respCmd> _parser = new pb::MessageParser<respCmd>(() => new respCmd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respCmd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respCmd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respCmd(respCmd other) : this() {
      cmdID_ = other.cmdID_;
      respMsg_ = other.respMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respCmd Clone() {
      return new respCmd(this);
    }

    /// <summary>Field number for the "cmdID" field.</summary>
    public const int CmdIDFieldNumber = 1;
    private long cmdID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CmdID {
      get { return cmdID_; }
      set {
        cmdID_ = value;
      }
    }

    /// <summary>Field number for the "respMsg" field.</summary>
    public const int RespMsgFieldNumber = 2;
    private string respMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RespMsg {
      get { return respMsg_; }
      set {
        respMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respCmd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respCmd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CmdID != other.CmdID) return false;
      if (RespMsg != other.RespMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CmdID != 0L) hash ^= CmdID.GetHashCode();
      if (RespMsg.Length != 0) hash ^= RespMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CmdID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CmdID);
      }
      if (RespMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RespMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CmdID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CmdID);
      }
      if (RespMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RespMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respCmd other) {
      if (other == null) {
        return;
      }
      if (other.CmdID != 0L) {
        CmdID = other.CmdID;
      }
      if (other.RespMsg.Length != 0) {
        RespMsg = other.RespMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CmdID = input.ReadInt64();
            break;
          }
          case 18: {
            RespMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = LS2LSM
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqFile : pb::IMessage<reqFile> {
    private static readonly pb::MessageParser<reqFile> _parser = new pb::MessageParser<reqFile>(() => new reqFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFile(reqFile other) : this() {
      tarLSMName_ = other.tarLSMName_;
      fileType_ = other.fileType_;
      fileNames_ = other.fileNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFile Clone() {
      return new reqFile(this);
    }

    /// <summary>Field number for the "tarLSMName" field.</summary>
    public const int TarLSMNameFieldNumber = 1;
    private string tarLSMName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TarLSMName {
      get { return tarLSMName_; }
      set {
        tarLSMName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.reqFile.Types.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqFile.Types.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileNames" field.</summary>
    public const int FileNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fileNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fileNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// allow wildcards (*,?, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FileNames {
      get { return fileNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarLSMName != other.TarLSMName) return false;
      if (FileType != other.FileType) return false;
      if(!fileNames_.Equals(other.fileNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarLSMName.Length != 0) hash ^= TarLSMName.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarLSMName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TarLSMName);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileNames_.WriteTo(output, _repeated_fileNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarLSMName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TarLSMName);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileNames_.CalculateSize(_repeated_fileNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqFile other) {
      if (other == null) {
        return;
      }
      if (other.TarLSMName.Length != 0) {
        TarLSMName = other.TarLSMName;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileNames_.Add(other.fileNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TarLSMName = input.ReadString();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.reqFile.Types.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileNames_.AddEntriesFrom(input, _repeated_fileNames_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqFile message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eFileTypes {
        [pbr::OriginalName("FileContents")] FileContents = 0,
        [pbr::OriginalName("FileList")] FileList = 1,
        [pbr::OriginalName("FolderFlist")] FolderFlist = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// flowDirection = LSM2LS
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class respFile : pb::IMessage<respFile> {
    private static readonly pb::MessageParser<respFile> _parser = new pb::MessageParser<respFile>(() => new respFile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFile(respFile other) : this() {
      tarLSMName_ = other.tarLSMName_;
      fileType_ = other.fileType_;
      fileNames_ = other.fileNames_.Clone();
      fileContents_ = other.fileContents_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFile Clone() {
      return new respFile(this);
    }

    /// <summary>Field number for the "tarLSMName" field.</summary>
    public const int TarLSMNameFieldNumber = 1;
    private string tarLSMName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TarLSMName {
      get { return tarLSMName_; }
      set {
        tarLSMName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.respFile.Types.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respFile.Types.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileNames" field.</summary>
    public const int FileNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fileNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fileNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// no wildcards
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FileNames {
      get { return fileNames_; }
    }

    /// <summary>Field number for the "fileContents" field.</summary>
    public const int FileContentsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_fileContents_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> fileContents_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// ignored if fileType!=FileContents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FileContents {
      get { return fileContents_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarLSMName != other.TarLSMName) return false;
      if (FileType != other.FileType) return false;
      if(!fileNames_.Equals(other.fileNames_)) return false;
      if(!fileContents_.Equals(other.fileContents_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarLSMName.Length != 0) hash ^= TarLSMName.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileNames_.GetHashCode();
      hash ^= fileContents_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarLSMName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TarLSMName);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileNames_.WriteTo(output, _repeated_fileNames_codec);
      fileContents_.WriteTo(output, _repeated_fileContents_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarLSMName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TarLSMName);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileNames_.CalculateSize(_repeated_fileNames_codec);
      size += fileContents_.CalculateSize(_repeated_fileContents_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respFile other) {
      if (other == null) {
        return;
      }
      if (other.TarLSMName.Length != 0) {
        TarLSMName = other.TarLSMName;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileNames_.Add(other.fileNames_);
      fileContents_.Add(other.fileContents_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TarLSMName = input.ReadString();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.respFile.Types.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileNames_.AddEntriesFrom(input, _repeated_fileNames_codec);
            break;
          }
          case 34: {
            fileContents_.AddEntriesFrom(input, _repeated_fileContents_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the respFile message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eFileTypes {
        [pbr::OriginalName("FileContents")] FileContents = 0,
        [pbr::OriginalName("FileList")] FileList = 1,
        [pbr::OriginalName("FolderFlist")] FolderFlist = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// flowDirection = M2RS or RS2RR or C2LS
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqFileAddr : pb::IMessage<reqFileAddr> {
    private static readonly pb::MessageParser<reqFileAddr> _parser = new pb::MessageParser<reqFileAddr>(() => new reqFileAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqFileAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFileAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFileAddr(reqFileAddr other) : this() {
      tarLSMName_ = other.tarLSMName_;
      fileType_ = other.fileType_;
      fileNames_ = other.fileNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqFileAddr Clone() {
      return new reqFileAddr(this);
    }

    /// <summary>Field number for the "tarLSMName" field.</summary>
    public const int TarLSMNameFieldNumber = 1;
    private string tarLSMName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TarLSMName {
      get { return tarLSMName_; }
      set {
        tarLSMName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.reqFileAddr.Types.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.reqFileAddr.Types.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileNames" field.</summary>
    public const int FileNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fileNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fileNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// allow wildcards (*,?, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FileNames {
      get { return fileNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqFileAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqFileAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarLSMName != other.TarLSMName) return false;
      if (FileType != other.FileType) return false;
      if(!fileNames_.Equals(other.fileNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarLSMName.Length != 0) hash ^= TarLSMName.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarLSMName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TarLSMName);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileNames_.WriteTo(output, _repeated_fileNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarLSMName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TarLSMName);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileNames_.CalculateSize(_repeated_fileNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqFileAddr other) {
      if (other == null) {
        return;
      }
      if (other.TarLSMName.Length != 0) {
        TarLSMName = other.TarLSMName;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileNames_.Add(other.fileNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TarLSMName = input.ReadString();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.reqFileAddr.Types.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileNames_.AddEntriesFrom(input, _repeated_fileNames_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the reqFileAddr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eFileTypes {
        [pbr::OriginalName("FileContents")] FileContents = 0,
        [pbr::OriginalName("FileList")] FileList = 1,
        [pbr::OriginalName("FolderFlist")] FolderFlist = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// flowDirection = RR2RS or RS2M or LS2C
  /// eSrcCondition = NoCond; forwardType = NoForwarding; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class respFileAddr : pb::IMessage<respFileAddr> {
    private static readonly pb::MessageParser<respFileAddr> _parser = new pb::MessageParser<respFileAddr>(() => new respFileAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<respFileAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFileAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFileAddr(respFileAddr other) : this() {
      tarLSMName_ = other.tarLSMName_;
      fileType_ = other.fileType_;
      fileNames_ = other.fileNames_.Clone();
      fileAddr_ = other.fileAddr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public respFileAddr Clone() {
      return new respFileAddr(this);
    }

    /// <summary>Field number for the "tarLSMName" field.</summary>
    public const int TarLSMNameFieldNumber = 1;
    private string tarLSMName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TarLSMName {
      get { return tarLSMName_; }
      set {
        tarLSMName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fileType" field.</summary>
    public const int FileTypeFieldNumber = 2;
    private global::DDRCommProto.respFileAddr.Types.eFileTypes fileType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DDRCommProto.respFileAddr.Types.eFileTypes FileType {
      get { return fileType_; }
      set {
        fileType_ = value;
      }
    }

    /// <summary>Field number for the "fileNames" field.</summary>
    public const int FileNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fileNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fileNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// no wildcards
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FileNames {
      get { return fileNames_; }
    }

    /// <summary>Field number for the "fileAddr" field.</summary>
    public const int FileAddrFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_fileAddr_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> fileAddr_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// ignored if fileType!=FileContents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FileAddr {
      get { return fileAddr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as respFileAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(respFileAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarLSMName != other.TarLSMName) return false;
      if (FileType != other.FileType) return false;
      if(!fileNames_.Equals(other.fileNames_)) return false;
      if(!fileAddr_.Equals(other.fileAddr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarLSMName.Length != 0) hash ^= TarLSMName.GetHashCode();
      if (FileType != 0) hash ^= FileType.GetHashCode();
      hash ^= fileNames_.GetHashCode();
      hash ^= fileAddr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarLSMName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TarLSMName);
      }
      if (FileType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FileType);
      }
      fileNames_.WriteTo(output, _repeated_fileNames_codec);
      fileAddr_.WriteTo(output, _repeated_fileAddr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarLSMName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TarLSMName);
      }
      if (FileType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FileType);
      }
      size += fileNames_.CalculateSize(_repeated_fileNames_codec);
      size += fileAddr_.CalculateSize(_repeated_fileAddr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(respFileAddr other) {
      if (other == null) {
        return;
      }
      if (other.TarLSMName.Length != 0) {
        TarLSMName = other.TarLSMName;
      }
      if (other.FileType != 0) {
        FileType = other.FileType;
      }
      fileNames_.Add(other.fileNames_);
      fileAddr_.Add(other.fileAddr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TarLSMName = input.ReadString();
            break;
          }
          case 16: {
            fileType_ = (global::DDRCommProto.respFileAddr.Types.eFileTypes) input.ReadEnum();
            break;
          }
          case 26: {
            fileNames_.AddEntriesFrom(input, _repeated_fileNames_codec);
            break;
          }
          case 34: {
            fileAddr_.AddEntriesFrom(input, _repeated_fileAddr_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the respFileAddr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eFileTypes {
        [pbr::OriginalName("FileContents")] FileContents = 0,
        [pbr::OriginalName("FileList")] FileList = 1,
        [pbr::OriginalName("FolderFlist")] FolderFlist = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// flowDirection = LSM2LS or LS2C or RR2RS or RS2M
  /// eSrcCondition = NoCond; forwardType = CltMonAll; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqStatus : pb::IMessage<reqStatus> {
    private static readonly pb::MessageParser<reqStatus> _parser = new pb::MessageParser<reqStatus>(() => new reqStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStatus(reqStatus other) : this() {
      statusMsg_ = other.statusMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqStatus Clone() {
      return new reqStatus(this);
    }

    /// <summary>Field number for the "statusMsg" field.</summary>
    public const int StatusMsgFieldNumber = 1;
    private string statusMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMsg {
      get { return statusMsg_; }
      set {
        statusMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusMsg != other.StatusMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusMsg.Length != 0) hash ^= StatusMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StatusMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqStatus other) {
      if (other == null) {
        return;
      }
      if (other.StatusMsg.Length != 0) {
        StatusMsg = other.StatusMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StatusMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = LSM2LS or LS2C or RR2RS or RS2M
  /// eSrcCondition = NoCond; forwardType = CltMonAll; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqAlarm : pb::IMessage<reqAlarm> {
    private static readonly pb::MessageParser<reqAlarm> _parser = new pb::MessageParser<reqAlarm>(() => new reqAlarm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqAlarm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAlarm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAlarm(reqAlarm other) : this() {
      alarmMsg_ = other.alarmMsg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqAlarm Clone() {
      return new reqAlarm(this);
    }

    /// <summary>Field number for the "alarmMsg" field.</summary>
    public const int AlarmMsgFieldNumber = 1;
    private string alarmMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AlarmMsg {
      get { return alarmMsg_; }
      set {
        alarmMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqAlarm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqAlarm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AlarmMsg != other.AlarmMsg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AlarmMsg.Length != 0) hash ^= AlarmMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AlarmMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AlarmMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AlarmMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AlarmMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqAlarm other) {
      if (other == null) {
        return;
      }
      if (other.AlarmMsg.Length != 0) {
        AlarmMsg = other.AlarmMsg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AlarmMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// flowDirection = C2LS or LS2C or RR2RS or M2RS or RS2M
  /// eSrcCondition = NoCond; forwardType = CltMonAll; eSrcRecType = NoRec;
  /// </summary>
  public sealed partial class reqTextChat : pb::IMessage<reqTextChat> {
    private static readonly pb::MessageParser<reqTextChat> _parser = new pb::MessageParser<reqTextChat>(() => new reqTextChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<reqTextChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DDRCommProto.BaseCmdReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTextChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTextChat(reqTextChat other) : this() {
      chatText_ = other.chatText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public reqTextChat Clone() {
      return new reqTextChat(this);
    }

    /// <summary>Field number for the "chatText" field.</summary>
    public const int ChatTextFieldNumber = 1;
    private string chatText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatText {
      get { return chatText_; }
      set {
        chatText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as reqTextChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(reqTextChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatText != other.ChatText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatText.Length != 0) hash ^= ChatText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChatText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(reqTextChat other) {
      if (other == null) {
        return;
      }
      if (other.ChatText.Length != 0) {
        ChatText = other.ChatText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChatText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
