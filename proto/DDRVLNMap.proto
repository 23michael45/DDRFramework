syntax = "proto3";
package DDRCommProto;
import "BaseCmd.proto";

// 基础元素描述 +++++++++++++++++++++++++++++++++++++++
// 基础点
message space_point 
{
	float x = 1;
	float y = 2;
}
	
// 线段
message line
{
	space_point start = 1;
	space_point end = 2;
}

// 多边形
message polygon
{
	repeated space_point point = 1;
}

// 圆形
message circle
{
	space_point center = 1;
	float radius = 2;
}
// 基础元素描述 ---------------------------------------


// 标记点 ++++++++++++++++++++++++++++++++++++++++++++
// 标记点类型
enum eMarkingItemType  
{
	eMarkingTypeError = 0; // 因为保存成文件时，为0的数据不显示出来。所以所有的枚举都有一个为0的错误值。
	eMarkingTypeCommon = 1; // 普通点
	eMarkingTypeProjection = 2; // 投影点
	eMarkingTypeGate = 3; // 闸机点
	eMarkingTypeElevator = 4; // 电梯点
	eMarkingTypeCharging = 5; // 充电点
} 

// 标记点/兴趣点
message marking_point_item  
{
	bytes name = 1; 
	space_point point = 2;
	eMarkingItemType type = 3;
}
// 标记点 -------------------------------------------


// 路径描述 +++++++++++++++++++++++++++++++++++++++++
/*
	每个地图可能会有多个路径，每条路径由三种item组成，每种item可能会有多个。
	1）line:
	2）point:
	3）arc:
*/
// 路径item模式
enum ePathItemMode  
{
	ePathItemModeError = 0;
	ePathItemModeDynamicOA = 1; // 动态避障
	ePathItemModeStaticOA = 2; // 静态避障
	ePathItemModeCowshed = 3; // 贴边行驶路径(牛棚)
	ePathItemModeQRMode = 4; // QR模式
}

// 是否一定要到
enum eFixedEnd  
{
	eFixedError = 0;
	eFixedTrue = 1;
	eFixedFalse = 2;
}

// 朝向方式
enum eAbsoluteOrientatio
{
	eAbsoluteOrientatioError = 0;
	eAbsoluteOri = 1; // 绝对朝向
	eRelativelyOri = 2; // 相对朝向
} 

message path_point_item
{
	space_point point = 1;
	eFixedEnd fixedend = 2;
	float velocity = 3;
	ePathItemMode mode = 4;
	int32 confignum = 5;
	bytes config = 6;
	float angle = 7;
	eAbsoluteOrientatio orientatio = 8; // 朝向方式
} 

message path_line_item
{
	space_point start = 1;
	space_point end = 2;
	float velocity = 3; // 速度
	ePathItemMode mode = 4; // 路径模式
	int32 confignum = 5; // 配置文件
	bytes config = 6;
}

message path_arc_item
{
	space_point point1 = 1;
	space_point point2 = 2;
	float radius = 3;
	float velocity = 4;
	ePathItemMode mode = 5;
	int32 confignum = 6;
	bytes config = 7;
} 

// 路径元素的类型
enum ePathElementType
{
	ePathElementError = 0;
	ePathElementPoint = 1;
	ePathElementLine = 2;
	ePathElementArc = 3;
} 

/*
	路径单个元素，每个元素可以是line  point  arc 任意一个，且只能是一个。
	path_item根据elementSet时数组的顺序排序
*/
message path_element
{
	ePathElementType type = 1;
	path_line_item line = 2;
	path_point_item point = 3;
	path_arc_item arc = 4;
}

// 路径
message path_item 
{
	bytes name = 1; // 同一reqDDRVLNMap是唯一的
	repeated path_element elementSet = 2; // 按次序排序
}

// 路径描述 -----------------------------------------


// 空间描述 +++++++++++++++++++++++++++++++++++++++++
// 空间类型
enum eSpaceItemType 
{
	eSpaceItemTypeError = 0;
	eSpacsTypeVirtualWall = 1; // 虚拟墙
	eSpacsTypeHightlight = 2; // 高亮区
	eSpacsTypeFog = 3; // 迷雾区，跟高亮相反
}

// 空间区域
message space_item 
{
	bytes name = 1; 
	eSpaceItemType type = 2;
	repeated line linedata = 3;
	repeated polygon polygondata = 4;
	repeated circle circledata = 5;
}
// 空间描述 -----------------------------------------


// 任务描述 +++++++++++++++++++++++++++++++++++++++++

enum eTaskElementType
{
	eTaskElementTypeError = 0;
	eTaskElementMarkingPoint = 1;
	eTaskElementPath = 2;
}

message TaskELement
{
	eTaskElementType type = 1;
	marking_point_item point = 2;
	path_item path = 3;
}

// 每次构建一个任务需要指定模式(默认可以是无限循环)，在任务开始时也可以重新修改任务执行模式。DDRMap.ddr会保存最近修改的内容。
enum eTaskElementMode
{
	eTaskElementModeError = 0;
	eTaskElementInfiniteLoop = 1; // 无限循环
	eTaskElementFrequencyLoop = 2; // 规定次数循环
	eTaskElementTimingLoop = 3; // 定时循环
}

// 客户端配置时发送任务。任务可以是 path_item和marking_point_item的组合。
message reqRunTask
{
	bytes name = 1;
	repeated TaskELement elementSet = 2;
	eTaskElementMode mode = 3;
	int32 frequency = 4; // 假如mode是eTaskElementFrequencyLoop，这个表示循环的次数
	int32 startTime = 5; // 假如mode是eTaskElementTimingLoop，这个表示任务开始时间。只能是4位数。个位十位表示分钟，百位千位表示时。比如：1530，表示下午15点30分
	int32 endTime = 6;// 假如mode是eTaskElementTimingLoop，这个表示任务结束时间。定义同上
}

message rspRunTask
{
	eCmdRspType type = 1;
}
// 任务描述 -----------------------------------------


// 变换矩阵
message affine_mat
{
	float r11 = 1;
	float r12 = 2;
	float tx = 3;
	float r21 = 4;
	float r22 = 5;
	float ty = 6;
}


/*
	地图
	每个地图有一个名字、一个描述、一个变化矩阵、多个标记点/兴趣点、多个路径、多个空间区域、多个任务
*/
message reqDDRVLNMap 
{	
	bytes name = 1;
	bytes description = 2;
	affine_mat affinedata = 3;
	repeated path_item pathSet = 4;
	repeated marking_point_item markingpointSet = 5;
	repeated space_item spaceSet = 6;
	repeated reqRunTask taskSet = 7;
}

message rspDDRVLNMap
{
	eCmdRspType type = 1;
}
