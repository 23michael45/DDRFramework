// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseCmd.proto

#include "BaseCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BaseCmd_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseCmd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_bcLSAddr_ServerInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseCmd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_notifyAVStream_fullChannelInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BaseCmd_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_reqLogin_msgAVStreamReq;
}  // namespace protobuf_BaseCmd_2eproto
namespace DDRCommProto {
class CommonHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonHeader>
      _instance;
} _CommonHeader_default_instance_;
class heartBeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<heartBeat>
      _instance;
} _heartBeat_default_instance_;
class bcLSAddr_ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bcLSAddr_ServerInfo>
      _instance;
} _bcLSAddr_ServerInfo_default_instance_;
class bcLSAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<bcLSAddr>
      _instance;
} _bcLSAddr_default_instance_;
class reqLogin_msgAVStreamReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqLogin_msgAVStreamReq>
      _instance;
} _reqLogin_msgAVStreamReq_default_instance_;
class reqLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqLogin>
      _instance;
} _reqLogin_default_instance_;
class respLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<respLogin>
      _instance;
} _respLogin_default_instance_;
class notifyTerminalAccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<notifyTerminalAccess>
      _instance;
} _notifyTerminalAccess_default_instance_;
class notifySerAccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<notifySerAccess>
      _instance;
} _notifySerAccess_default_instance_;
class notifyAVStream_fullChannelInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<notifyAVStream_fullChannelInfo>
      _instance;
} _notifyAVStream_fullChannelInfo_default_instance_;
class notifyAVStreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<notifyAVStream>
      _instance;
} _notifyAVStream_default_instance_;
class reqTalkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqTalk>
      _instance;
} _reqTalk_default_instance_;
class respTalkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<respTalk>
      _instance;
} _respTalk_default_instance_;
class reqTalkHBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqTalkHB>
      _instance;
} _reqTalkHB_default_instance_;
class reqCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqCmd>
      _instance;
} _reqCmd_default_instance_;
class respCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<respCmd>
      _instance;
} _respCmd_default_instance_;
class reqFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqFile>
      _instance;
} _reqFile_default_instance_;
class respFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<respFile>
      _instance;
} _respFile_default_instance_;
class reqFileAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqFileAddr>
      _instance;
} _reqFileAddr_default_instance_;
class respFileAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<respFileAddr>
      _instance;
} _respFileAddr_default_instance_;
class reqStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqStatus>
      _instance;
} _reqStatus_default_instance_;
class reqAlarmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqAlarm>
      _instance;
} _reqAlarm_default_instance_;
class reqTextChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<reqTextChat>
      _instance;
} _reqTextChat_default_instance_;
}  // namespace DDRCommProto
namespace protobuf_BaseCmd_2eproto {
static void InitDefaultsCommonHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_CommonHeader_default_instance_;
    new (ptr) ::DDRCommProto::CommonHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::CommonHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommonHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommonHeader}, {}};

static void InitDefaultsheartBeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_heartBeat_default_instance_;
    new (ptr) ::DDRCommProto::heartBeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::heartBeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_heartBeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsheartBeat}, {}};

static void InitDefaultsbcLSAddr_ServerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_bcLSAddr_ServerInfo_default_instance_;
    new (ptr) ::DDRCommProto::bcLSAddr_ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::bcLSAddr_ServerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_bcLSAddr_ServerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbcLSAddr_ServerInfo}, {}};

static void InitDefaultsbcLSAddr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_bcLSAddr_default_instance_;
    new (ptr) ::DDRCommProto::bcLSAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::bcLSAddr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_bcLSAddr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsbcLSAddr}, {
      &protobuf_BaseCmd_2eproto::scc_info_bcLSAddr_ServerInfo.base,}};

static void InitDefaultsreqLogin_msgAVStreamReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqLogin_msgAVStreamReq_default_instance_;
    new (ptr) ::DDRCommProto::reqLogin_msgAVStreamReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqLogin_msgAVStreamReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqLogin_msgAVStreamReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqLogin_msgAVStreamReq}, {}};

static void InitDefaultsreqLogin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqLogin_default_instance_;
    new (ptr) ::DDRCommProto::reqLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqLogin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_reqLogin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsreqLogin}, {
      &protobuf_BaseCmd_2eproto::scc_info_reqLogin_msgAVStreamReq.base,}};

static void InitDefaultsrespLogin() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_respLogin_default_instance_;
    new (ptr) ::DDRCommProto::respLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::respLogin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_respLogin =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrespLogin}, {}};

static void InitDefaultsnotifyTerminalAccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_notifyTerminalAccess_default_instance_;
    new (ptr) ::DDRCommProto::notifyTerminalAccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::notifyTerminalAccess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_notifyTerminalAccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsnotifyTerminalAccess}, {}};

static void InitDefaultsnotifySerAccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_notifySerAccess_default_instance_;
    new (ptr) ::DDRCommProto::notifySerAccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::notifySerAccess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_notifySerAccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsnotifySerAccess}, {}};

static void InitDefaultsnotifyAVStream_fullChannelInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_notifyAVStream_fullChannelInfo_default_instance_;
    new (ptr) ::DDRCommProto::notifyAVStream_fullChannelInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::notifyAVStream_fullChannelInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_notifyAVStream_fullChannelInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsnotifyAVStream_fullChannelInfo}, {}};

static void InitDefaultsnotifyAVStream() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_notifyAVStream_default_instance_;
    new (ptr) ::DDRCommProto::notifyAVStream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::notifyAVStream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_notifyAVStream =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsnotifyAVStream}, {
      &protobuf_BaseCmd_2eproto::scc_info_notifyAVStream_fullChannelInfo.base,}};

static void InitDefaultsreqTalk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqTalk_default_instance_;
    new (ptr) ::DDRCommProto::reqTalk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqTalk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqTalk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqTalk}, {}};

static void InitDefaultsrespTalk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_respTalk_default_instance_;
    new (ptr) ::DDRCommProto::respTalk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::respTalk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_respTalk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrespTalk}, {}};

static void InitDefaultsreqTalkHB() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqTalkHB_default_instance_;
    new (ptr) ::DDRCommProto::reqTalkHB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqTalkHB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqTalkHB =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqTalkHB}, {}};

static void InitDefaultsreqCmd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqCmd_default_instance_;
    new (ptr) ::DDRCommProto::reqCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqCmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqCmd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqCmd}, {}};

static void InitDefaultsrespCmd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_respCmd_default_instance_;
    new (ptr) ::DDRCommProto::respCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::respCmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_respCmd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrespCmd}, {}};

static void InitDefaultsreqFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqFile_default_instance_;
    new (ptr) ::DDRCommProto::reqFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqFile}, {}};

static void InitDefaultsrespFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_respFile_default_instance_;
    new (ptr) ::DDRCommProto::respFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::respFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_respFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrespFile}, {}};

static void InitDefaultsreqFileAddr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqFileAddr_default_instance_;
    new (ptr) ::DDRCommProto::reqFileAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqFileAddr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqFileAddr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqFileAddr}, {}};

static void InitDefaultsrespFileAddr() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_respFileAddr_default_instance_;
    new (ptr) ::DDRCommProto::respFileAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::respFileAddr::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_respFileAddr =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrespFileAddr}, {}};

static void InitDefaultsreqStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqStatus_default_instance_;
    new (ptr) ::DDRCommProto::reqStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqStatus}, {}};

static void InitDefaultsreqAlarm() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqAlarm_default_instance_;
    new (ptr) ::DDRCommProto::reqAlarm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqAlarm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqAlarm =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqAlarm}, {}};

static void InitDefaultsreqTextChat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DDRCommProto::_reqTextChat_default_instance_;
    new (ptr) ::DDRCommProto::reqTextChat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DDRCommProto::reqTextChat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_reqTextChat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsreqTextChat}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CommonHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_heartBeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bcLSAddr_ServerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_bcLSAddr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqLogin_msgAVStreamReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqLogin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_respLogin.base);
  ::google::protobuf::internal::InitSCC(&scc_info_notifyTerminalAccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_notifySerAccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_notifyAVStream_fullChannelInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_notifyAVStream.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqTalk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_respTalk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqTalkHB.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqCmd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_respCmd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqFile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_respFile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqFileAddr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_respFileAddr.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqAlarm.base);
  ::google::protobuf::internal::InitSCC(&scc_info_reqTextChat.base);
}

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[13];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::CommonHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::CommonHeader, bodytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::CommonHeader, flowdirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::CommonHeader, boriginal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::CommonHeader, srccond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::CommonHeader, forwardtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::CommonHeader, rectype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::CommonHeader, prevrouteaddr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::heartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::heartBeat, whatever_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::bcLSAddr_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::bcLSAddr_ServerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::bcLSAddr_ServerInfo, ips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::bcLSAddr_ServerInfo, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::bcLSAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::bcLSAddr, lsinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin_msgAVStreamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin_msgAVStreamReq, avtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin_msgAVStreamReq, chname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin_msgAVStreamReq, bandwidthreq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin, robotid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin, robotpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin, cltoplv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqLogin, avstreamreq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respLogin, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respLogin, yourrole_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respLogin, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyTerminalAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyTerminalAccess, brrconnected2rs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyTerminalAccess, bop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyTerminalAccess, nmonitors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyTerminalAccess, nclients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyTerminalAccess, namelsms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifySerAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifySerAccess, nmonitors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifySerAccess, mtopoplv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifySerAccess, mtopoptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifySerAccess, nclients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifySerAccess, ctopoplv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifySerAccess, ctopoptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifySerAccess, nameslsm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, devtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, datatype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, localresaccstr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, channeldescription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, bwreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, remoteip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, remoteport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream_fullChannelInfo, remotepass_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream, reservedchannel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::notifyAVStream, robotmonitorchannels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTalk, callertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTalk, talkid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTalk, avtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTalk, localtalkaddr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respTalk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respTalk, receivertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respTalk, talkid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respTalk, avtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTalkHB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTalkHB, callertalkid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTalkHB, receivertalkid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqCmd, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqCmd, cmdmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respCmd, cmdid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respCmd, respmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqFile, tarlsmname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqFile, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqFile, filenames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFile, tarlsmname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFile, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFile, filenames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFile, filecontents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqFileAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqFileAddr, tarlsmname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqFileAddr, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqFileAddr, filenames_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFileAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFileAddr, tarlsmname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFileAddr, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFileAddr, filenames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::respFileAddr, fileaddr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqStatus, statusmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqAlarm, alarmmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTextChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DDRCommProto::reqTextChat, chattext_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DDRCommProto::CommonHeader)},
  { 12, -1, sizeof(::DDRCommProto::heartBeat)},
  { 18, -1, sizeof(::DDRCommProto::bcLSAddr_ServerInfo)},
  { 26, -1, sizeof(::DDRCommProto::bcLSAddr)},
  { 32, -1, sizeof(::DDRCommProto::reqLogin_msgAVStreamReq)},
  { 40, -1, sizeof(::DDRCommProto::reqLogin)},
  { 52, -1, sizeof(::DDRCommProto::respLogin)},
  { 60, -1, sizeof(::DDRCommProto::notifyTerminalAccess)},
  { 70, -1, sizeof(::DDRCommProto::notifySerAccess)},
  { 82, -1, sizeof(::DDRCommProto::notifyAVStream_fullChannelInfo)},
  { 95, -1, sizeof(::DDRCommProto::notifyAVStream)},
  { 102, -1, sizeof(::DDRCommProto::reqTalk)},
  { 111, -1, sizeof(::DDRCommProto::respTalk)},
  { 119, -1, sizeof(::DDRCommProto::reqTalkHB)},
  { 126, -1, sizeof(::DDRCommProto::reqCmd)},
  { 133, -1, sizeof(::DDRCommProto::respCmd)},
  { 140, -1, sizeof(::DDRCommProto::reqFile)},
  { 148, -1, sizeof(::DDRCommProto::respFile)},
  { 157, -1, sizeof(::DDRCommProto::reqFileAddr)},
  { 165, -1, sizeof(::DDRCommProto::respFileAddr)},
  { 174, -1, sizeof(::DDRCommProto::reqStatus)},
  { 180, -1, sizeof(::DDRCommProto::reqAlarm)},
  { 186, -1, sizeof(::DDRCommProto::reqTextChat)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_CommonHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_heartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_bcLSAddr_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_bcLSAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqLogin_msgAVStreamReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_respLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_notifyTerminalAccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_notifySerAccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_notifyAVStream_fullChannelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_notifyAVStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqTalk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_respTalk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqTalkHB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_respCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_respFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqFileAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_respFileAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqAlarm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::DDRCommProto::_reqTextChat_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BaseCmd.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rBaseCmd.proto\022\014DDRCommProto\"\344\004\n\014Common"
      "Header\022\020\n\010bodyType\030\001 \001(\t\022:\n\rflowDirectio"
      "n\030\002 \003(\0162#.DDRCommProto.CommonHeader.eFlo"
      "wDir\022\021\n\tbOriginal\030\003 \001(\005\0229\n\007srcCond\030\004 \001(\016"
      "2(.DDRCommProto.CommonHeader.eSrcConditi"
      "on\022\?\n\013forwardType\030\005 \001(\0162*.DDRCommProto.C"
      "ommonHeader.eForwardingType\0227\n\007recType\030\006"
      " \001(\0162&.DDRCommProto.CommonHeader.eSrcRec"
      "Type\022\025\n\rprevRouteAddr\030\007 \003(\t\"\200\001\n\010eFlowDir"
      "\022\016\n\nUNKNOWN2RS\020\000\022\010\n\004RS2M\020\001\022\010\n\004M2RS\020\002\022\t\n\005"
      "RS2RR\020\003\022\t\n\005RR2RS\020\004\022\016\n\nUNKNOWN2LS\020\005\022\010\n\004LS"
      "2C\020\006\022\010\n\004C2LS\020\007\022\n\n\006LS2LSM\020\010\022\n\n\006LSM2LS\020\t\"#"
      "\n\reSrcCondition\022\n\n\006NoCond\020\000\022\006\n\002Op\020\001\"Y\n\017e"
      "ForwardingType\022\020\n\014NoForwarding\020\000\022\n\n\006LSMA"
      "ll\020\001\022\r\n\tCltMonAll\020\002\022\010\n\004ToOp\020\003\022\017\n\013Routing"
      "Back\020\004\"$\n\013eSrcRecType\022\t\n\005NoRec\020\000\022\n\n\006RecS"
      "rc\020\001\"\035\n\theartBeat\022\020\n\010whatever\030\001 \001(\t\"t\n\010b"
      "cLSAddr\0221\n\006LSInfo\030\001 \001(\0132!.DDRCommProto.b"
      "cLSAddr.ServerInfo\0325\n\nServerInfo\022\014\n\004name"
      "\030\001 \001(\t\022\013\n\003ips\030\002 \003(\t\022\014\n\004port\030\003 \001(\005\"\304\002\n\010re"
      "qLogin\022-\n\004type\030\001 \001(\0162\037.DDRCommProto.reqL"
      "ogin.eCltType\022\020\n\010username\030\002 \001(\t\022\017\n\007robot"
      "ID\030\003 \001(\t\022\020\n\010robotPWD\030\004 \001(\t\022\017\n\007cltOpLv\030\005 "
      "\001(\005\022\013\n\003UID\030\006 \001(\005\022:\n\013avStreamReq\030\007 \003(\0132%."
      "DDRCommProto.reqLogin.msgAVStreamReq\032F\n\016"
      "msgAVStreamReq\022\016\n\006avType\030\001 \001(\005\022\016\n\006chName"
      "\030\002 \001(\t\022\024\n\014bandwidthReq\030\003 \001(\005\"2\n\010eCltType"
      "\022\n\n\006client\020\000\022\021\n\randroidClient\020\001\022\007\n\003LSM\020\002"
      "\"\250\002\n\trespLogin\0226\n\007retcode\030\001 \001(\0162%.DDRCom"
      "mProto.respLogin.eLoginRetCode\0222\n\010yourRo"
      "le\030\002 \001(\0162 .DDRCommProto.respLogin.eCltTy"
      "pe\022\013\n\003UID\030\003 \001(\005\"n\n\reLoginRetCode\022\013\n\007succ"
      "ess\020\000\022\017\n\013server_busy\020\001\022\030\n\024server_limit_r"
      "eached\020\002\022\r\n\tUID_error\020\003\022\026\n\022incorrect_pas"
      "sword\020\004\"2\n\010eCltType\022\n\n\006client\020\000\022\021\n\randro"
      "idClient\020\001\022\007\n\003LSM\020\002\"s\n\024notifyTerminalAcc"
      "ess\022\027\n\017bRRConnected2RS\030\001 \001(\005\022\013\n\003bOp\030\002 \001("
      "\005\022\021\n\tnMonitors\030\003 \001(\005\022\020\n\010nClients\030\004 \001(\005\022\020"
      "\n\010nameLSMs\030\005 \003(\t\"\224\001\n\017notifySerAccess\022\021\n\t"
      "nMonitors\030\001 \001(\005\022\020\n\010mTopOpLv\030\002 \001(\005\022\022\n\nmTo"
      "pOpTime\030\003 \001(\005\022\020\n\010nClients\030\004 \001(\005\022\020\n\010cTopO"
      "pLv\030\005 \001(\005\022\022\n\ncTopOpTime\030\006 \001(\003\022\020\n\010namesLS"
      "M\030\007 \003(\t\"\327\002\n\016notifyAVStream\022E\n\017reservedCh"
      "annel\030\001 \001(\0132,.DDRCommProto.notifyAVStrea"
      "m.fullChannelInfo\022J\n\024robotMonitorChannel"
      "s\030\002 \003(\0132,.DDRCommProto.notifyAVStream.fu"
      "llChannelInfo\032\261\001\n\017fullChannelInfo\022\017\n\007dev"
      "Type\030\001 \001(\005\022\020\n\010dataType\030\002 \001(\005\022\026\n\016localRes"
      "AccStr\030\003 \001(\t\022\032\n\022channelDescription\030\004 \001(\t"
      "\022\r\n\005bwReq\030\005 \001(\005\022\020\n\010remoteIP\030\006 \001(\003\022\022\n\nrem"
      "otePort\030\007 \001(\005\022\022\n\nremotePass\030\010 \001(\t\"\256\001\n\007re"
      "qTalk\0225\n\ncallerType\030\001 \001(\0162!.DDRCommProto"
      ".reqTalk.eCallerType\022\016\n\006talkID\030\002 \001(\005\022\016\n\006"
      "avType\030\003 \001(\005\022\025\n\rlocalTalkAddr\030\004 \003(\t\"5\n\013e"
      "CallerType\022\n\n\006client\020\000\022\013\n\007monitor\020\001\022\r\n\tr"
      "obot_LSM\020\002\"\237\001\n\010respTalk\022:\n\014receiverType\030"
      "\001 \001(\0162$.DDRCommProto.respTalk.eReceiverT"
      "ype\022\016\n\006talkID\030\002 \001(\005\022\016\n\006avType\030\003 \001(\005\"7\n\re"
      "ReceiverType\022\n\n\006client\020\000\022\013\n\007monitor\020\001\022\r\n"
      "\trobot_LSM\020\002\"9\n\treqTalkHB\022\024\n\014callerTalkI"
      "D\030\001 \001(\005\022\026\n\016receiverTalkID\030\002 \001(\005\"\'\n\006reqCm"
      "d\022\r\n\005cmdID\030\001 \001(\003\022\016\n\006cmdMsg\030\002 \001(\t\")\n\007resp"
      "Cmd\022\r\n\005cmdID\030\001 \001(\003\022\017\n\007respMsg\030\002 \001(\t\"\243\001\n\007"
      "reqFile\022\022\n\ntarLSMName\030\001 \001(\t\0222\n\010fileType\030"
      "\002 \001(\0162 .DDRCommProto.reqFile.eFileTypes\022"
      "\021\n\tfileNames\030\003 \003(\t\"=\n\neFileTypes\022\020\n\014File"
      "Contents\020\000\022\014\n\010FileList\020\001\022\017\n\013FolderFlist\020"
      "\002\"\273\001\n\010respFile\022\022\n\ntarLSMName\030\001 \001(\t\0223\n\010fi"
      "leType\030\002 \001(\0162!.DDRCommProto.respFile.eFi"
      "leTypes\022\021\n\tfileNames\030\003 \003(\t\022\024\n\014fileConten"
      "ts\030\004 \003(\t\"=\n\neFileTypes\022\020\n\014FileContents\020\000"
      "\022\014\n\010FileList\020\001\022\017\n\013FolderFlist\020\002\"\253\001\n\013reqF"
      "ileAddr\022\022\n\ntarLSMName\030\001 \001(\t\0226\n\010fileType\030"
      "\002 \001(\0162$.DDRCommProto.reqFileAddr.eFileTy"
      "pes\022\021\n\tfileNames\030\003 \003(\t\"=\n\neFileTypes\022\020\n\014"
      "FileContents\020\000\022\014\n\010FileList\020\001\022\017\n\013FolderFl"
      "ist\020\002\"\277\001\n\014respFileAddr\022\022\n\ntarLSMName\030\001 \001"
      "(\t\0227\n\010fileType\030\002 \001(\0162%.DDRCommProto.resp"
      "FileAddr.eFileTypes\022\021\n\tfileNames\030\003 \003(\t\022\020"
      "\n\010fileAddr\030\004 \003(\t\"=\n\neFileTypes\022\020\n\014FileCo"
      "ntents\020\000\022\014\n\010FileList\020\001\022\017\n\013FolderFlist\020\002\""
      "\036\n\treqStatus\022\021\n\tstatusMsg\030\001 \001(\t\"\034\n\010reqAl"
      "arm\022\020\n\010alarmMsg\030\001 \001(\t\"\037\n\013reqTextChat\022\020\n\010"
      "chatText\030\001 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BaseCmd.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BaseCmd_2eproto
namespace DDRCommProto {
const ::google::protobuf::EnumDescriptor* CommonHeader_eFlowDir_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[0];
}
bool CommonHeader_eFlowDir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommonHeader_eFlowDir CommonHeader::UNKNOWN2RS;
const CommonHeader_eFlowDir CommonHeader::RS2M;
const CommonHeader_eFlowDir CommonHeader::M2RS;
const CommonHeader_eFlowDir CommonHeader::RS2RR;
const CommonHeader_eFlowDir CommonHeader::RR2RS;
const CommonHeader_eFlowDir CommonHeader::UNKNOWN2LS;
const CommonHeader_eFlowDir CommonHeader::LS2C;
const CommonHeader_eFlowDir CommonHeader::C2LS;
const CommonHeader_eFlowDir CommonHeader::LS2LSM;
const CommonHeader_eFlowDir CommonHeader::LSM2LS;
const CommonHeader_eFlowDir CommonHeader::eFlowDir_MIN;
const CommonHeader_eFlowDir CommonHeader::eFlowDir_MAX;
const int CommonHeader::eFlowDir_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CommonHeader_eSrcCondition_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[1];
}
bool CommonHeader_eSrcCondition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommonHeader_eSrcCondition CommonHeader::NoCond;
const CommonHeader_eSrcCondition CommonHeader::Op;
const CommonHeader_eSrcCondition CommonHeader::eSrcCondition_MIN;
const CommonHeader_eSrcCondition CommonHeader::eSrcCondition_MAX;
const int CommonHeader::eSrcCondition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CommonHeader_eForwardingType_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[2];
}
bool CommonHeader_eForwardingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommonHeader_eForwardingType CommonHeader::NoForwarding;
const CommonHeader_eForwardingType CommonHeader::LSMAll;
const CommonHeader_eForwardingType CommonHeader::CltMonAll;
const CommonHeader_eForwardingType CommonHeader::ToOp;
const CommonHeader_eForwardingType CommonHeader::RoutingBack;
const CommonHeader_eForwardingType CommonHeader::eForwardingType_MIN;
const CommonHeader_eForwardingType CommonHeader::eForwardingType_MAX;
const int CommonHeader::eForwardingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CommonHeader_eSrcRecType_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[3];
}
bool CommonHeader_eSrcRecType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommonHeader_eSrcRecType CommonHeader::NoRec;
const CommonHeader_eSrcRecType CommonHeader::RecSrc;
const CommonHeader_eSrcRecType CommonHeader::eSrcRecType_MIN;
const CommonHeader_eSrcRecType CommonHeader::eSrcRecType_MAX;
const int CommonHeader::eSrcRecType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* reqLogin_eCltType_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[4];
}
bool reqLogin_eCltType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const reqLogin_eCltType reqLogin::client;
const reqLogin_eCltType reqLogin::androidClient;
const reqLogin_eCltType reqLogin::LSM;
const reqLogin_eCltType reqLogin::eCltType_MIN;
const reqLogin_eCltType reqLogin::eCltType_MAX;
const int reqLogin::eCltType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* respLogin_eLoginRetCode_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[5];
}
bool respLogin_eLoginRetCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const respLogin_eLoginRetCode respLogin::success;
const respLogin_eLoginRetCode respLogin::server_busy;
const respLogin_eLoginRetCode respLogin::server_limit_reached;
const respLogin_eLoginRetCode respLogin::UID_error;
const respLogin_eLoginRetCode respLogin::incorrect_password;
const respLogin_eLoginRetCode respLogin::eLoginRetCode_MIN;
const respLogin_eLoginRetCode respLogin::eLoginRetCode_MAX;
const int respLogin::eLoginRetCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* respLogin_eCltType_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[6];
}
bool respLogin_eCltType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const respLogin_eCltType respLogin::client;
const respLogin_eCltType respLogin::androidClient;
const respLogin_eCltType respLogin::LSM;
const respLogin_eCltType respLogin::eCltType_MIN;
const respLogin_eCltType respLogin::eCltType_MAX;
const int respLogin::eCltType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* reqTalk_eCallerType_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[7];
}
bool reqTalk_eCallerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const reqTalk_eCallerType reqTalk::client;
const reqTalk_eCallerType reqTalk::monitor;
const reqTalk_eCallerType reqTalk::robot_LSM;
const reqTalk_eCallerType reqTalk::eCallerType_MIN;
const reqTalk_eCallerType reqTalk::eCallerType_MAX;
const int reqTalk::eCallerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* respTalk_eReceiverType_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[8];
}
bool respTalk_eReceiverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const respTalk_eReceiverType respTalk::client;
const respTalk_eReceiverType respTalk::monitor;
const respTalk_eReceiverType respTalk::robot_LSM;
const respTalk_eReceiverType respTalk::eReceiverType_MIN;
const respTalk_eReceiverType respTalk::eReceiverType_MAX;
const int respTalk::eReceiverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* reqFile_eFileTypes_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[9];
}
bool reqFile_eFileTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const reqFile_eFileTypes reqFile::FileContents;
const reqFile_eFileTypes reqFile::FileList;
const reqFile_eFileTypes reqFile::FolderFlist;
const reqFile_eFileTypes reqFile::eFileTypes_MIN;
const reqFile_eFileTypes reqFile::eFileTypes_MAX;
const int reqFile::eFileTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* respFile_eFileTypes_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[10];
}
bool respFile_eFileTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const respFile_eFileTypes respFile::FileContents;
const respFile_eFileTypes respFile::FileList;
const respFile_eFileTypes respFile::FolderFlist;
const respFile_eFileTypes respFile::eFileTypes_MIN;
const respFile_eFileTypes respFile::eFileTypes_MAX;
const int respFile::eFileTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* reqFileAddr_eFileTypes_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[11];
}
bool reqFileAddr_eFileTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const reqFileAddr_eFileTypes reqFileAddr::FileContents;
const reqFileAddr_eFileTypes reqFileAddr::FileList;
const reqFileAddr_eFileTypes reqFileAddr::FolderFlist;
const reqFileAddr_eFileTypes reqFileAddr::eFileTypes_MIN;
const reqFileAddr_eFileTypes reqFileAddr::eFileTypes_MAX;
const int reqFileAddr::eFileTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* respFileAddr_eFileTypes_descriptor() {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_BaseCmd_2eproto::file_level_enum_descriptors[12];
}
bool respFileAddr_eFileTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const respFileAddr_eFileTypes respFileAddr::FileContents;
const respFileAddr_eFileTypes respFileAddr::FileList;
const respFileAddr_eFileTypes respFileAddr::FolderFlist;
const respFileAddr_eFileTypes respFileAddr::eFileTypes_MIN;
const respFileAddr_eFileTypes respFileAddr::eFileTypes_MAX;
const int respFileAddr::eFileTypes_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CommonHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonHeader::kBodyTypeFieldNumber;
const int CommonHeader::kFlowDirectionFieldNumber;
const int CommonHeader::kBOriginalFieldNumber;
const int CommonHeader::kSrcCondFieldNumber;
const int CommonHeader::kForwardTypeFieldNumber;
const int CommonHeader::kRecTypeFieldNumber;
const int CommonHeader::kPrevRouteAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonHeader::CommonHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_CommonHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.CommonHeader)
}
CommonHeader::CommonHeader(const CommonHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      flowdirection_(from.flowdirection_),
      prevrouteaddr_(from.prevrouteaddr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bodytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bodytype().size() > 0) {
    bodytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodytype_);
  }
  ::memcpy(&boriginal_, &from.boriginal_,
    static_cast<size_t>(reinterpret_cast<char*>(&rectype_) -
    reinterpret_cast<char*>(&boriginal_)) + sizeof(rectype_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.CommonHeader)
}

void CommonHeader::SharedCtor() {
  bodytype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&boriginal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rectype_) -
      reinterpret_cast<char*>(&boriginal_)) + sizeof(rectype_));
}

CommonHeader::~CommonHeader() {
  // @@protoc_insertion_point(destructor:DDRCommProto.CommonHeader)
  SharedDtor();
}

void CommonHeader::SharedDtor() {
  bodytype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonHeader::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonHeader& CommonHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_CommonHeader.base);
  return *internal_default_instance();
}


void CommonHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flowdirection_.Clear();
  prevrouteaddr_.Clear();
  bodytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&boriginal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rectype_) -
      reinterpret_cast<char*>(&boriginal_)) + sizeof(rectype_));
  _internal_metadata_.Clear();
}

bool CommonHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.CommonHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bodyType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodytype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bodytype().data(), static_cast<int>(this->bodytype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.CommonHeader.bodyType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DDRCommProto.CommonHeader.eFlowDir flowDirection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_flowdirection(static_cast< ::DDRCommProto::CommonHeader_eFlowDir >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_flowdirection(static_cast< ::DDRCommProto::CommonHeader_eFlowDir >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bOriginal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boriginal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DDRCommProto.CommonHeader.eSrcCondition srcCond = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_srccond(static_cast< ::DDRCommProto::CommonHeader_eSrcCondition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DDRCommProto.CommonHeader.eForwardingType forwardType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_forwardtype(static_cast< ::DDRCommProto::CommonHeader_eForwardingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DDRCommProto.CommonHeader.eSrcRecType recType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rectype(static_cast< ::DDRCommProto::CommonHeader_eSrcRecType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string prevRouteAddr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_prevrouteaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prevrouteaddr(this->prevrouteaddr_size() - 1).data(),
            static_cast<int>(this->prevrouteaddr(this->prevrouteaddr_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.CommonHeader.prevRouteAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.CommonHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.CommonHeader)
  return false;
#undef DO_
}

void CommonHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyType = 1;
  if (this->bodytype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodytype().data(), static_cast<int>(this->bodytype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.CommonHeader.bodyType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bodytype(), output);
  }

  // repeated .DDRCommProto.CommonHeader.eFlowDir flowDirection = 2;
  if (this->flowdirection_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_flowdirection_cached_byte_size_));
  }
  for (int i = 0, n = this->flowdirection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->flowdirection(i), output);
  }

  // int32 bOriginal = 3;
  if (this->boriginal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boriginal(), output);
  }

  // .DDRCommProto.CommonHeader.eSrcCondition srcCond = 4;
  if (this->srccond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->srccond(), output);
  }

  // .DDRCommProto.CommonHeader.eForwardingType forwardType = 5;
  if (this->forwardtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->forwardtype(), output);
  }

  // .DDRCommProto.CommonHeader.eSrcRecType recType = 6;
  if (this->rectype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->rectype(), output);
  }

  // repeated string prevRouteAddr = 7;
  for (int i = 0, n = this->prevrouteaddr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prevrouteaddr(i).data(), static_cast<int>(this->prevrouteaddr(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.CommonHeader.prevRouteAddr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->prevrouteaddr(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.CommonHeader)
}

::google::protobuf::uint8* CommonHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bodyType = 1;
  if (this->bodytype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bodytype().data(), static_cast<int>(this->bodytype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.CommonHeader.bodyType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bodytype(), target);
  }

  // repeated .DDRCommProto.CommonHeader.eFlowDir flowDirection = 2;
  if (this->flowdirection_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _flowdirection_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->flowdirection_, target);
  }

  // int32 bOriginal = 3;
  if (this->boriginal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boriginal(), target);
  }

  // .DDRCommProto.CommonHeader.eSrcCondition srcCond = 4;
  if (this->srccond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->srccond(), target);
  }

  // .DDRCommProto.CommonHeader.eForwardingType forwardType = 5;
  if (this->forwardtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->forwardtype(), target);
  }

  // .DDRCommProto.CommonHeader.eSrcRecType recType = 6;
  if (this->rectype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->rectype(), target);
  }

  // repeated string prevRouteAddr = 7;
  for (int i = 0, n = this->prevrouteaddr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prevrouteaddr(i).data(), static_cast<int>(this->prevrouteaddr(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.CommonHeader.prevRouteAddr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->prevrouteaddr(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.CommonHeader)
  return target;
}

size_t CommonHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.CommonHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .DDRCommProto.CommonHeader.eFlowDir flowDirection = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->flowdirection_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->flowdirection(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _flowdirection_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string prevRouteAddr = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->prevrouteaddr_size());
  for (int i = 0, n = this->prevrouteaddr_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->prevrouteaddr(i));
  }

  // string bodyType = 1;
  if (this->bodytype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bodytype());
  }

  // int32 bOriginal = 3;
  if (this->boriginal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boriginal());
  }

  // .DDRCommProto.CommonHeader.eSrcCondition srcCond = 4;
  if (this->srccond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->srccond());
  }

  // .DDRCommProto.CommonHeader.eForwardingType forwardType = 5;
  if (this->forwardtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->forwardtype());
  }

  // .DDRCommProto.CommonHeader.eSrcRecType recType = 6;
  if (this->rectype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rectype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.CommonHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.CommonHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.CommonHeader)
    MergeFrom(*source);
  }
}

void CommonHeader::MergeFrom(const CommonHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.CommonHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flowdirection_.MergeFrom(from.flowdirection_);
  prevrouteaddr_.MergeFrom(from.prevrouteaddr_);
  if (from.bodytype().size() > 0) {

    bodytype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodytype_);
  }
  if (from.boriginal() != 0) {
    set_boriginal(from.boriginal());
  }
  if (from.srccond() != 0) {
    set_srccond(from.srccond());
  }
  if (from.forwardtype() != 0) {
    set_forwardtype(from.forwardtype());
  }
  if (from.rectype() != 0) {
    set_rectype(from.rectype());
  }
}

void CommonHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.CommonHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonHeader::CopyFrom(const CommonHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.CommonHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonHeader::IsInitialized() const {
  return true;
}

void CommonHeader::Swap(CommonHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonHeader::InternalSwap(CommonHeader* other) {
  using std::swap;
  flowdirection_.InternalSwap(&other->flowdirection_);
  prevrouteaddr_.InternalSwap(CastToBase(&other->prevrouteaddr_));
  bodytype_.Swap(&other->bodytype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(boriginal_, other->boriginal_);
  swap(srccond_, other->srccond_);
  swap(forwardtype_, other->forwardtype_);
  swap(rectype_, other->rectype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonHeader::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void heartBeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int heartBeat::kWhateverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

heartBeat::heartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_heartBeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.heartBeat)
}
heartBeat::heartBeat(const heartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  whatever_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.whatever().size() > 0) {
    whatever_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.whatever_);
  }
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.heartBeat)
}

void heartBeat::SharedCtor() {
  whatever_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

heartBeat::~heartBeat() {
  // @@protoc_insertion_point(destructor:DDRCommProto.heartBeat)
  SharedDtor();
}

void heartBeat::SharedDtor() {
  whatever_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void heartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* heartBeat::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const heartBeat& heartBeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_heartBeat.base);
  return *internal_default_instance();
}


void heartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.heartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  whatever_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool heartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.heartBeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string whatever = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_whatever()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->whatever().data(), static_cast<int>(this->whatever().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.heartBeat.whatever"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.heartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.heartBeat)
  return false;
#undef DO_
}

void heartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.heartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string whatever = 1;
  if (this->whatever().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->whatever().data(), static_cast<int>(this->whatever().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.heartBeat.whatever");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->whatever(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.heartBeat)
}

::google::protobuf::uint8* heartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.heartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string whatever = 1;
  if (this->whatever().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->whatever().data(), static_cast<int>(this->whatever().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.heartBeat.whatever");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->whatever(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.heartBeat)
  return target;
}

size_t heartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.heartBeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string whatever = 1;
  if (this->whatever().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->whatever());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void heartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.heartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const heartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const heartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.heartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.heartBeat)
    MergeFrom(*source);
  }
}

void heartBeat::MergeFrom(const heartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.heartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.whatever().size() > 0) {

    whatever_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.whatever_);
  }
}

void heartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.heartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartBeat::CopyFrom(const heartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.heartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartBeat::IsInitialized() const {
  return true;
}

void heartBeat::Swap(heartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void heartBeat::InternalSwap(heartBeat* other) {
  using std::swap;
  whatever_.Swap(&other->whatever_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata heartBeat::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bcLSAddr_ServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bcLSAddr_ServerInfo::kNameFieldNumber;
const int bcLSAddr_ServerInfo::kIpsFieldNumber;
const int bcLSAddr_ServerInfo::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bcLSAddr_ServerInfo::bcLSAddr_ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_bcLSAddr_ServerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.bcLSAddr.ServerInfo)
}
bcLSAddr_ServerInfo::bcLSAddr_ServerInfo(const bcLSAddr_ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.bcLSAddr.ServerInfo)
}

void bcLSAddr_ServerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bcLSAddr_ServerInfo::~bcLSAddr_ServerInfo() {
  // @@protoc_insertion_point(destructor:DDRCommProto.bcLSAddr.ServerInfo)
  SharedDtor();
}

void bcLSAddr_ServerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void bcLSAddr_ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bcLSAddr_ServerInfo::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bcLSAddr_ServerInfo& bcLSAddr_ServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_bcLSAddr_ServerInfo.base);
  return *internal_default_instance();
}


void bcLSAddr_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.bcLSAddr.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ips_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _internal_metadata_.Clear();
}

bool bcLSAddr_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.bcLSAddr.ServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.bcLSAddr.ServerInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ips = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ips(this->ips_size() - 1).data(),
            static_cast<int>(this->ips(this->ips_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.bcLSAddr.ServerInfo.ips"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.bcLSAddr.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.bcLSAddr.ServerInfo)
  return false;
#undef DO_
}

void bcLSAddr_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.bcLSAddr.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.bcLSAddr.ServerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string ips = 2;
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ips(i).data(), static_cast<int>(this->ips(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.bcLSAddr.ServerInfo.ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ips(i), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.bcLSAddr.ServerInfo)
}

::google::protobuf::uint8* bcLSAddr_ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.bcLSAddr.ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.bcLSAddr.ServerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string ips = 2;
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ips(i).data(), static_cast<int>(this->ips(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.bcLSAddr.ServerInfo.ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ips(i), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.bcLSAddr.ServerInfo)
  return target;
}

size_t bcLSAddr_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.bcLSAddr.ServerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ips = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ips_size());
  for (int i = 0, n = this->ips_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bcLSAddr_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.bcLSAddr.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const bcLSAddr_ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bcLSAddr_ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.bcLSAddr.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.bcLSAddr.ServerInfo)
    MergeFrom(*source);
  }
}

void bcLSAddr_ServerInfo::MergeFrom(const bcLSAddr_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.bcLSAddr.ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void bcLSAddr_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.bcLSAddr.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bcLSAddr_ServerInfo::CopyFrom(const bcLSAddr_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.bcLSAddr.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bcLSAddr_ServerInfo::IsInitialized() const {
  return true;
}

void bcLSAddr_ServerInfo::Swap(bcLSAddr_ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bcLSAddr_ServerInfo::InternalSwap(bcLSAddr_ServerInfo* other) {
  using std::swap;
  ips_.InternalSwap(CastToBase(&other->ips_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bcLSAddr_ServerInfo::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void bcLSAddr::InitAsDefaultInstance() {
  ::DDRCommProto::_bcLSAddr_default_instance_._instance.get_mutable()->lsinfo_ = const_cast< ::DDRCommProto::bcLSAddr_ServerInfo*>(
      ::DDRCommProto::bcLSAddr_ServerInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int bcLSAddr::kLSInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

bcLSAddr::bcLSAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_bcLSAddr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.bcLSAddr)
}
bcLSAddr::bcLSAddr(const bcLSAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lsinfo()) {
    lsinfo_ = new ::DDRCommProto::bcLSAddr_ServerInfo(*from.lsinfo_);
  } else {
    lsinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.bcLSAddr)
}

void bcLSAddr::SharedCtor() {
  lsinfo_ = NULL;
}

bcLSAddr::~bcLSAddr() {
  // @@protoc_insertion_point(destructor:DDRCommProto.bcLSAddr)
  SharedDtor();
}

void bcLSAddr::SharedDtor() {
  if (this != internal_default_instance()) delete lsinfo_;
}

void bcLSAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* bcLSAddr::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const bcLSAddr& bcLSAddr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_bcLSAddr.base);
  return *internal_default_instance();
}


void bcLSAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.bcLSAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && lsinfo_ != NULL) {
    delete lsinfo_;
  }
  lsinfo_ = NULL;
  _internal_metadata_.Clear();
}

bool bcLSAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.bcLSAddr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DDRCommProto.bcLSAddr.ServerInfo LSInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lsinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.bcLSAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.bcLSAddr)
  return false;
#undef DO_
}

void bcLSAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.bcLSAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.bcLSAddr.ServerInfo LSInfo = 1;
  if (this->has_lsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_lsinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.bcLSAddr)
}

::google::protobuf::uint8* bcLSAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.bcLSAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.bcLSAddr.ServerInfo LSInfo = 1;
  if (this->has_lsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_lsinfo(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.bcLSAddr)
  return target;
}

size_t bcLSAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.bcLSAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .DDRCommProto.bcLSAddr.ServerInfo LSInfo = 1;
  if (this->has_lsinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lsinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bcLSAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.bcLSAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const bcLSAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const bcLSAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.bcLSAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.bcLSAddr)
    MergeFrom(*source);
  }
}

void bcLSAddr::MergeFrom(const bcLSAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.bcLSAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lsinfo()) {
    mutable_lsinfo()->::DDRCommProto::bcLSAddr_ServerInfo::MergeFrom(from.lsinfo());
  }
}

void bcLSAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.bcLSAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bcLSAddr::CopyFrom(const bcLSAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.bcLSAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bcLSAddr::IsInitialized() const {
  return true;
}

void bcLSAddr::Swap(bcLSAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void bcLSAddr::InternalSwap(bcLSAddr* other) {
  using std::swap;
  swap(lsinfo_, other->lsinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata bcLSAddr::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqLogin_msgAVStreamReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqLogin_msgAVStreamReq::kAvTypeFieldNumber;
const int reqLogin_msgAVStreamReq::kChNameFieldNumber;
const int reqLogin_msgAVStreamReq::kBandwidthReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqLogin_msgAVStreamReq::reqLogin_msgAVStreamReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqLogin_msgAVStreamReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqLogin.msgAVStreamReq)
}
reqLogin_msgAVStreamReq::reqLogin_msgAVStreamReq(const reqLogin_msgAVStreamReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chname().size() > 0) {
    chname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chname_);
  }
  ::memcpy(&avtype_, &from.avtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&bandwidthreq_) -
    reinterpret_cast<char*>(&avtype_)) + sizeof(bandwidthreq_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqLogin.msgAVStreamReq)
}

void reqLogin_msgAVStreamReq::SharedCtor() {
  chname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bandwidthreq_) -
      reinterpret_cast<char*>(&avtype_)) + sizeof(bandwidthreq_));
}

reqLogin_msgAVStreamReq::~reqLogin_msgAVStreamReq() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqLogin.msgAVStreamReq)
  SharedDtor();
}

void reqLogin_msgAVStreamReq::SharedDtor() {
  chname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqLogin_msgAVStreamReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqLogin_msgAVStreamReq::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqLogin_msgAVStreamReq& reqLogin_msgAVStreamReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqLogin_msgAVStreamReq.base);
  return *internal_default_instance();
}


void reqLogin_msgAVStreamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqLogin.msgAVStreamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&avtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bandwidthreq_) -
      reinterpret_cast<char*>(&avtype_)) + sizeof(bandwidthreq_));
  _internal_metadata_.Clear();
}

bool reqLogin_msgAVStreamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqLogin.msgAVStreamReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 avType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chname().data(), static_cast<int>(this->chname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqLogin.msgAVStreamReq.chName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bandwidthReq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bandwidthreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqLogin.msgAVStreamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqLogin.msgAVStreamReq)
  return false;
#undef DO_
}

void reqLogin_msgAVStreamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqLogin.msgAVStreamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avType = 1;
  if (this->avtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->avtype(), output);
  }

  // string chName = 2;
  if (this->chname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chname().data(), static_cast<int>(this->chname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqLogin.msgAVStreamReq.chName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->chname(), output);
  }

  // int32 bandwidthReq = 3;
  if (this->bandwidthreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bandwidthreq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqLogin.msgAVStreamReq)
}

::google::protobuf::uint8* reqLogin_msgAVStreamReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqLogin.msgAVStreamReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avType = 1;
  if (this->avtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->avtype(), target);
  }

  // string chName = 2;
  if (this->chname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chname().data(), static_cast<int>(this->chname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqLogin.msgAVStreamReq.chName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chname(), target);
  }

  // int32 bandwidthReq = 3;
  if (this->bandwidthreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bandwidthreq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqLogin.msgAVStreamReq)
  return target;
}

size_t reqLogin_msgAVStreamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqLogin.msgAVStreamReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string chName = 2;
  if (this->chname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chname());
  }

  // int32 avType = 1;
  if (this->avtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avtype());
  }

  // int32 bandwidthReq = 3;
  if (this->bandwidthreq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bandwidthreq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqLogin_msgAVStreamReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqLogin.msgAVStreamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const reqLogin_msgAVStreamReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqLogin_msgAVStreamReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqLogin.msgAVStreamReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqLogin.msgAVStreamReq)
    MergeFrom(*source);
  }
}

void reqLogin_msgAVStreamReq::MergeFrom(const reqLogin_msgAVStreamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqLogin.msgAVStreamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chname().size() > 0) {

    chname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chname_);
  }
  if (from.avtype() != 0) {
    set_avtype(from.avtype());
  }
  if (from.bandwidthreq() != 0) {
    set_bandwidthreq(from.bandwidthreq());
  }
}

void reqLogin_msgAVStreamReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqLogin.msgAVStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqLogin_msgAVStreamReq::CopyFrom(const reqLogin_msgAVStreamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqLogin.msgAVStreamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqLogin_msgAVStreamReq::IsInitialized() const {
  return true;
}

void reqLogin_msgAVStreamReq::Swap(reqLogin_msgAVStreamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqLogin_msgAVStreamReq::InternalSwap(reqLogin_msgAVStreamReq* other) {
  using std::swap;
  chname_.Swap(&other->chname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avtype_, other->avtype_);
  swap(bandwidthreq_, other->bandwidthreq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqLogin_msgAVStreamReq::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqLogin::kTypeFieldNumber;
const int reqLogin::kUsernameFieldNumber;
const int reqLogin::kRobotIDFieldNumber;
const int reqLogin::kRobotPWDFieldNumber;
const int reqLogin::kCltOpLvFieldNumber;
const int reqLogin::kUIDFieldNumber;
const int reqLogin::kAvStreamReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqLogin::reqLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqLogin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqLogin)
}
reqLogin::reqLogin(const reqLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avstreamreq_(from.avstreamreq_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  robotid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robotid().size() > 0) {
    robotid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robotid_);
  }
  robotpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.robotpwd().size() > 0) {
    robotpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robotpwd_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqLogin)
}

void reqLogin::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(uid_));
}

reqLogin::~reqLogin() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqLogin)
  SharedDtor();
}

void reqLogin::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqLogin::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqLogin& reqLogin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqLogin.base);
  return *internal_default_instance();
}


void reqLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avstreamreq_.Clear();
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool reqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqLogin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DDRCommProto.reqLogin.eCltType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::DDRCommProto::reqLogin_eCltType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqLogin.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string robotID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robotid().data(), static_cast<int>(this->robotid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqLogin.robotID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string robotPWD = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotpwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robotpwd().data(), static_cast<int>(this->robotpwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqLogin.robotPWD"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cltOpLv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cltoplv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DDRCommProto.reqLogin.msgAVStreamReq avStreamReq = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_avstreamreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqLogin)
  return false;
#undef DO_
}

void reqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.reqLogin.eCltType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqLogin.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // string robotID = 3;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), static_cast<int>(this->robotid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqLogin.robotID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->robotid(), output);
  }

  // string robotPWD = 4;
  if (this->robotpwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotpwd().data(), static_cast<int>(this->robotpwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqLogin.robotPWD");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->robotpwd(), output);
  }

  // int32 cltOpLv = 5;
  if (this->cltoplv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cltoplv(), output);
  }

  // int32 UID = 6;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uid(), output);
  }

  // repeated .DDRCommProto.reqLogin.msgAVStreamReq avStreamReq = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avstreamreq_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->avstreamreq(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqLogin)
}

::google::protobuf::uint8* reqLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.reqLogin.eCltType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqLogin.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // string robotID = 3;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), static_cast<int>(this->robotid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqLogin.robotID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->robotid(), target);
  }

  // string robotPWD = 4;
  if (this->robotpwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotpwd().data(), static_cast<int>(this->robotpwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqLogin.robotPWD");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->robotpwd(), target);
  }

  // int32 cltOpLv = 5;
  if (this->cltoplv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cltoplv(), target);
  }

  // int32 UID = 6;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uid(), target);
  }

  // repeated .DDRCommProto.reqLogin.msgAVStreamReq avStreamReq = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avstreamreq_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->avstreamreq(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqLogin)
  return target;
}

size_t reqLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqLogin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .DDRCommProto.reqLogin.msgAVStreamReq avStreamReq = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->avstreamreq_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->avstreamreq(static_cast<int>(i)));
    }
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string robotID = 3;
  if (this->robotid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robotid());
  }

  // string robotPWD = 4;
  if (this->robotpwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robotpwd());
  }

  // .DDRCommProto.reqLogin.eCltType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 cltOpLv = 5;
  if (this->cltoplv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cltoplv());
  }

  // int32 UID = 6;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const reqLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqLogin)
    MergeFrom(*source);
  }
}

void reqLogin::MergeFrom(const reqLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avstreamreq_.MergeFrom(from.avstreamreq_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.robotid().size() > 0) {

    robotid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robotid_);
  }
  if (from.robotpwd().size() > 0) {

    robotpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robotpwd_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.cltoplv() != 0) {
    set_cltoplv(from.cltoplv());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void reqLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqLogin::CopyFrom(const reqLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqLogin::IsInitialized() const {
  return true;
}

void reqLogin::Swap(reqLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqLogin::InternalSwap(reqLogin* other) {
  using std::swap;
  CastToBase(&avstreamreq_)->InternalSwap(CastToBase(&other->avstreamreq_));
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robotid_.Swap(&other->robotid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robotpwd_.Swap(&other->robotpwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(cltoplv_, other->cltoplv_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqLogin::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void respLogin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int respLogin::kRetcodeFieldNumber;
const int respLogin::kYourRoleFieldNumber;
const int respLogin::kUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

respLogin::respLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_respLogin.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.respLogin)
}
respLogin::respLogin(const respLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.respLogin)
}

void respLogin::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(uid_));
}

respLogin::~respLogin() {
  // @@protoc_insertion_point(destructor:DDRCommProto.respLogin)
  SharedDtor();
}

void respLogin::SharedDtor() {
}

void respLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* respLogin::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const respLogin& respLogin::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_respLogin.base);
  return *internal_default_instance();
}


void respLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.respLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool respLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.respLogin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DDRCommProto.respLogin.eLoginRetCode retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_retcode(static_cast< ::DDRCommProto::respLogin_eLoginRetCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DDRCommProto.respLogin.eCltType yourRole = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_yourrole(static_cast< ::DDRCommProto::respLogin_eCltType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 UID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.respLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.respLogin)
  return false;
#undef DO_
}

void respLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.respLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.respLogin.eLoginRetCode retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  // .DDRCommProto.respLogin.eCltType yourRole = 2;
  if (this->yourrole() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->yourrole(), output);
  }

  // int32 UID = 3;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.respLogin)
}

::google::protobuf::uint8* respLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.respLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.respLogin.eLoginRetCode retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  // .DDRCommProto.respLogin.eCltType yourRole = 2;
  if (this->yourrole() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->yourrole(), target);
  }

  // int32 UID = 3;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.respLogin)
  return target;
}

size_t respLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.respLogin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .DDRCommProto.respLogin.eLoginRetCode retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
  }

  // .DDRCommProto.respLogin.eCltType yourRole = 2;
  if (this->yourrole() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->yourrole());
  }

  // int32 UID = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void respLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.respLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const respLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const respLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.respLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.respLogin)
    MergeFrom(*source);
  }
}

void respLogin::MergeFrom(const respLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.respLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.yourrole() != 0) {
    set_yourrole(from.yourrole());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void respLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.respLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void respLogin::CopyFrom(const respLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.respLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool respLogin::IsInitialized() const {
  return true;
}

void respLogin::Swap(respLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void respLogin::InternalSwap(respLogin* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(yourrole_, other->yourrole_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata respLogin::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void notifyTerminalAccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int notifyTerminalAccess::kBRRConnected2RSFieldNumber;
const int notifyTerminalAccess::kBOpFieldNumber;
const int notifyTerminalAccess::kNMonitorsFieldNumber;
const int notifyTerminalAccess::kNClientsFieldNumber;
const int notifyTerminalAccess::kNameLSMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

notifyTerminalAccess::notifyTerminalAccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_notifyTerminalAccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.notifyTerminalAccess)
}
notifyTerminalAccess::notifyTerminalAccess(const notifyTerminalAccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      namelsms_(from.namelsms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brrconnected2rs_, &from.brrconnected2rs_,
    static_cast<size_t>(reinterpret_cast<char*>(&nclients_) -
    reinterpret_cast<char*>(&brrconnected2rs_)) + sizeof(nclients_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.notifyTerminalAccess)
}

void notifyTerminalAccess::SharedCtor() {
  ::memset(&brrconnected2rs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nclients_) -
      reinterpret_cast<char*>(&brrconnected2rs_)) + sizeof(nclients_));
}

notifyTerminalAccess::~notifyTerminalAccess() {
  // @@protoc_insertion_point(destructor:DDRCommProto.notifyTerminalAccess)
  SharedDtor();
}

void notifyTerminalAccess::SharedDtor() {
}

void notifyTerminalAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* notifyTerminalAccess::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const notifyTerminalAccess& notifyTerminalAccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_notifyTerminalAccess.base);
  return *internal_default_instance();
}


void notifyTerminalAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.notifyTerminalAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namelsms_.Clear();
  ::memset(&brrconnected2rs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nclients_) -
      reinterpret_cast<char*>(&brrconnected2rs_)) + sizeof(nclients_));
  _internal_metadata_.Clear();
}

bool notifyTerminalAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.notifyTerminalAccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 bRRConnected2RS = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brrconnected2rs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bOp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nMonitors = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmonitors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nClients = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nclients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string nameLSMs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_namelsms()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namelsms(this->namelsms_size() - 1).data(),
            static_cast<int>(this->namelsms(this->namelsms_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.notifyTerminalAccess.nameLSMs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.notifyTerminalAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.notifyTerminalAccess)
  return false;
#undef DO_
}

void notifyTerminalAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.notifyTerminalAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bRRConnected2RS = 1;
  if (this->brrconnected2rs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->brrconnected2rs(), output);
  }

  // int32 bOp = 2;
  if (this->bop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bop(), output);
  }

  // int32 nMonitors = 3;
  if (this->nmonitors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nmonitors(), output);
  }

  // int32 nClients = 4;
  if (this->nclients() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nclients(), output);
  }

  // repeated string nameLSMs = 5;
  for (int i = 0, n = this->namelsms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namelsms(i).data(), static_cast<int>(this->namelsms(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifyTerminalAccess.nameLSMs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->namelsms(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.notifyTerminalAccess)
}

::google::protobuf::uint8* notifyTerminalAccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.notifyTerminalAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bRRConnected2RS = 1;
  if (this->brrconnected2rs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->brrconnected2rs(), target);
  }

  // int32 bOp = 2;
  if (this->bop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bop(), target);
  }

  // int32 nMonitors = 3;
  if (this->nmonitors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nmonitors(), target);
  }

  // int32 nClients = 4;
  if (this->nclients() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nclients(), target);
  }

  // repeated string nameLSMs = 5;
  for (int i = 0, n = this->namelsms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namelsms(i).data(), static_cast<int>(this->namelsms(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifyTerminalAccess.nameLSMs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->namelsms(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.notifyTerminalAccess)
  return target;
}

size_t notifyTerminalAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.notifyTerminalAccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string nameLSMs = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->namelsms_size());
  for (int i = 0, n = this->namelsms_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->namelsms(i));
  }

  // int32 bRRConnected2RS = 1;
  if (this->brrconnected2rs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brrconnected2rs());
  }

  // int32 bOp = 2;
  if (this->bop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bop());
  }

  // int32 nMonitors = 3;
  if (this->nmonitors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nmonitors());
  }

  // int32 nClients = 4;
  if (this->nclients() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nclients());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void notifyTerminalAccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.notifyTerminalAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const notifyTerminalAccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const notifyTerminalAccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.notifyTerminalAccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.notifyTerminalAccess)
    MergeFrom(*source);
  }
}

void notifyTerminalAccess::MergeFrom(const notifyTerminalAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.notifyTerminalAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  namelsms_.MergeFrom(from.namelsms_);
  if (from.brrconnected2rs() != 0) {
    set_brrconnected2rs(from.brrconnected2rs());
  }
  if (from.bop() != 0) {
    set_bop(from.bop());
  }
  if (from.nmonitors() != 0) {
    set_nmonitors(from.nmonitors());
  }
  if (from.nclients() != 0) {
    set_nclients(from.nclients());
  }
}

void notifyTerminalAccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.notifyTerminalAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyTerminalAccess::CopyFrom(const notifyTerminalAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.notifyTerminalAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyTerminalAccess::IsInitialized() const {
  return true;
}

void notifyTerminalAccess::Swap(notifyTerminalAccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void notifyTerminalAccess::InternalSwap(notifyTerminalAccess* other) {
  using std::swap;
  namelsms_.InternalSwap(CastToBase(&other->namelsms_));
  swap(brrconnected2rs_, other->brrconnected2rs_);
  swap(bop_, other->bop_);
  swap(nmonitors_, other->nmonitors_);
  swap(nclients_, other->nclients_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata notifyTerminalAccess::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void notifySerAccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int notifySerAccess::kNMonitorsFieldNumber;
const int notifySerAccess::kMTopOpLvFieldNumber;
const int notifySerAccess::kMTopOpTimeFieldNumber;
const int notifySerAccess::kNClientsFieldNumber;
const int notifySerAccess::kCTopOpLvFieldNumber;
const int notifySerAccess::kCTopOpTimeFieldNumber;
const int notifySerAccess::kNamesLSMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

notifySerAccess::notifySerAccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_notifySerAccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.notifySerAccess)
}
notifySerAccess::notifySerAccess(const notifySerAccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nameslsm_(from.nameslsm_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nmonitors_, &from.nmonitors_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctopoplv_) -
    reinterpret_cast<char*>(&nmonitors_)) + sizeof(ctopoplv_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.notifySerAccess)
}

void notifySerAccess::SharedCtor() {
  ::memset(&nmonitors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctopoplv_) -
      reinterpret_cast<char*>(&nmonitors_)) + sizeof(ctopoplv_));
}

notifySerAccess::~notifySerAccess() {
  // @@protoc_insertion_point(destructor:DDRCommProto.notifySerAccess)
  SharedDtor();
}

void notifySerAccess::SharedDtor() {
}

void notifySerAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* notifySerAccess::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const notifySerAccess& notifySerAccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_notifySerAccess.base);
  return *internal_default_instance();
}


void notifySerAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.notifySerAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nameslsm_.Clear();
  ::memset(&nmonitors_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctopoplv_) -
      reinterpret_cast<char*>(&nmonitors_)) + sizeof(ctopoplv_));
  _internal_metadata_.Clear();
}

bool notifySerAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.notifySerAccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nMonitors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmonitors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mTopOpLv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtopoplv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mTopOpTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtopoptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nClients = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nclients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cTopOpLv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctopoplv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cTopOpTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctopoptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string namesLSM = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nameslsm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nameslsm(this->nameslsm_size() - 1).data(),
            static_cast<int>(this->nameslsm(this->nameslsm_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.notifySerAccess.namesLSM"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.notifySerAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.notifySerAccess)
  return false;
#undef DO_
}

void notifySerAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.notifySerAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nMonitors = 1;
  if (this->nmonitors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nmonitors(), output);
  }

  // int32 mTopOpLv = 2;
  if (this->mtopoplv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mtopoplv(), output);
  }

  // int32 mTopOpTime = 3;
  if (this->mtopoptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mtopoptime(), output);
  }

  // int32 nClients = 4;
  if (this->nclients() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nclients(), output);
  }

  // int32 cTopOpLv = 5;
  if (this->ctopoplv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ctopoplv(), output);
  }

  // int64 cTopOpTime = 6;
  if (this->ctopoptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ctopoptime(), output);
  }

  // repeated string namesLSM = 7;
  for (int i = 0, n = this->nameslsm_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nameslsm(i).data(), static_cast<int>(this->nameslsm(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifySerAccess.namesLSM");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nameslsm(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.notifySerAccess)
}

::google::protobuf::uint8* notifySerAccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.notifySerAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nMonitors = 1;
  if (this->nmonitors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nmonitors(), target);
  }

  // int32 mTopOpLv = 2;
  if (this->mtopoplv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mtopoplv(), target);
  }

  // int32 mTopOpTime = 3;
  if (this->mtopoptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mtopoptime(), target);
  }

  // int32 nClients = 4;
  if (this->nclients() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nclients(), target);
  }

  // int32 cTopOpLv = 5;
  if (this->ctopoplv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ctopoplv(), target);
  }

  // int64 cTopOpTime = 6;
  if (this->ctopoptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ctopoptime(), target);
  }

  // repeated string namesLSM = 7;
  for (int i = 0, n = this->nameslsm_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nameslsm(i).data(), static_cast<int>(this->nameslsm(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifySerAccess.namesLSM");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->nameslsm(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.notifySerAccess)
  return target;
}

size_t notifySerAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.notifySerAccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string namesLSM = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nameslsm_size());
  for (int i = 0, n = this->nameslsm_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nameslsm(i));
  }

  // int32 nMonitors = 1;
  if (this->nmonitors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nmonitors());
  }

  // int32 mTopOpLv = 2;
  if (this->mtopoplv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mtopoplv());
  }

  // int32 mTopOpTime = 3;
  if (this->mtopoptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mtopoptime());
  }

  // int32 nClients = 4;
  if (this->nclients() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nclients());
  }

  // int64 cTopOpTime = 6;
  if (this->ctopoptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ctopoptime());
  }

  // int32 cTopOpLv = 5;
  if (this->ctopoplv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ctopoplv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void notifySerAccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.notifySerAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const notifySerAccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const notifySerAccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.notifySerAccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.notifySerAccess)
    MergeFrom(*source);
  }
}

void notifySerAccess::MergeFrom(const notifySerAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.notifySerAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nameslsm_.MergeFrom(from.nameslsm_);
  if (from.nmonitors() != 0) {
    set_nmonitors(from.nmonitors());
  }
  if (from.mtopoplv() != 0) {
    set_mtopoplv(from.mtopoplv());
  }
  if (from.mtopoptime() != 0) {
    set_mtopoptime(from.mtopoptime());
  }
  if (from.nclients() != 0) {
    set_nclients(from.nclients());
  }
  if (from.ctopoptime() != 0) {
    set_ctopoptime(from.ctopoptime());
  }
  if (from.ctopoplv() != 0) {
    set_ctopoplv(from.ctopoplv());
  }
}

void notifySerAccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.notifySerAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifySerAccess::CopyFrom(const notifySerAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.notifySerAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifySerAccess::IsInitialized() const {
  return true;
}

void notifySerAccess::Swap(notifySerAccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void notifySerAccess::InternalSwap(notifySerAccess* other) {
  using std::swap;
  nameslsm_.InternalSwap(CastToBase(&other->nameslsm_));
  swap(nmonitors_, other->nmonitors_);
  swap(mtopoplv_, other->mtopoplv_);
  swap(mtopoptime_, other->mtopoptime_);
  swap(nclients_, other->nclients_);
  swap(ctopoptime_, other->ctopoptime_);
  swap(ctopoplv_, other->ctopoplv_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata notifySerAccess::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void notifyAVStream_fullChannelInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int notifyAVStream_fullChannelInfo::kDevTypeFieldNumber;
const int notifyAVStream_fullChannelInfo::kDataTypeFieldNumber;
const int notifyAVStream_fullChannelInfo::kLocalResAccStrFieldNumber;
const int notifyAVStream_fullChannelInfo::kChannelDescriptionFieldNumber;
const int notifyAVStream_fullChannelInfo::kBwReqFieldNumber;
const int notifyAVStream_fullChannelInfo::kRemoteIPFieldNumber;
const int notifyAVStream_fullChannelInfo::kRemotePortFieldNumber;
const int notifyAVStream_fullChannelInfo::kRemotePassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

notifyAVStream_fullChannelInfo::notifyAVStream_fullChannelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_notifyAVStream_fullChannelInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.notifyAVStream.fullChannelInfo)
}
notifyAVStream_fullChannelInfo::notifyAVStream_fullChannelInfo(const notifyAVStream_fullChannelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  localresaccstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.localresaccstr().size() > 0) {
    localresaccstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localresaccstr_);
  }
  channeldescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channeldescription().size() > 0) {
    channeldescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channeldescription_);
  }
  remotepass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remotepass().size() > 0) {
    remotepass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remotepass_);
  }
  ::memcpy(&devtype_, &from.devtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&remoteport_) -
    reinterpret_cast<char*>(&devtype_)) + sizeof(remoteport_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.notifyAVStream.fullChannelInfo)
}

void notifyAVStream_fullChannelInfo::SharedCtor() {
  localresaccstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channeldescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remotepass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&devtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remoteport_) -
      reinterpret_cast<char*>(&devtype_)) + sizeof(remoteport_));
}

notifyAVStream_fullChannelInfo::~notifyAVStream_fullChannelInfo() {
  // @@protoc_insertion_point(destructor:DDRCommProto.notifyAVStream.fullChannelInfo)
  SharedDtor();
}

void notifyAVStream_fullChannelInfo::SharedDtor() {
  localresaccstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channeldescription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remotepass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void notifyAVStream_fullChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* notifyAVStream_fullChannelInfo::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const notifyAVStream_fullChannelInfo& notifyAVStream_fullChannelInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_notifyAVStream_fullChannelInfo.base);
  return *internal_default_instance();
}


void notifyAVStream_fullChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  localresaccstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channeldescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remotepass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&devtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remoteport_) -
      reinterpret_cast<char*>(&devtype_)) + sizeof(remoteport_));
  _internal_metadata_.Clear();
}

bool notifyAVStream_fullChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 devType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dataType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string localResAccStr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localresaccstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->localresaccstr().data(), static_cast<int>(this->localresaccstr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.notifyAVStream.fullChannelInfo.localResAccStr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channelDescription = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channeldescription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channeldescription().data(), static_cast<int>(this->channeldescription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.notifyAVStream.fullChannelInfo.channelDescription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bwReq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bwreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 remoteIP = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remoteip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remotePort = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remoteport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remotePass = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remotepass()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remotepass().data(), static_cast<int>(this->remotepass().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.notifyAVStream.fullChannelInfo.remotePass"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.notifyAVStream.fullChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.notifyAVStream.fullChannelInfo)
  return false;
#undef DO_
}

void notifyAVStream_fullChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 devType = 1;
  if (this->devtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->devtype(), output);
  }

  // int32 dataType = 2;
  if (this->datatype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->datatype(), output);
  }

  // string localResAccStr = 3;
  if (this->localresaccstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->localresaccstr().data(), static_cast<int>(this->localresaccstr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifyAVStream.fullChannelInfo.localResAccStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->localresaccstr(), output);
  }

  // string channelDescription = 4;
  if (this->channeldescription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channeldescription().data(), static_cast<int>(this->channeldescription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifyAVStream.fullChannelInfo.channelDescription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->channeldescription(), output);
  }

  // int32 bwReq = 5;
  if (this->bwreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bwreq(), output);
  }

  // int64 remoteIP = 6;
  if (this->remoteip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->remoteip(), output);
  }

  // int32 remotePort = 7;
  if (this->remoteport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->remoteport(), output);
  }

  // string remotePass = 8;
  if (this->remotepass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remotepass().data(), static_cast<int>(this->remotepass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifyAVStream.fullChannelInfo.remotePass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->remotepass(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.notifyAVStream.fullChannelInfo)
}

::google::protobuf::uint8* notifyAVStream_fullChannelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 devType = 1;
  if (this->devtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->devtype(), target);
  }

  // int32 dataType = 2;
  if (this->datatype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->datatype(), target);
  }

  // string localResAccStr = 3;
  if (this->localresaccstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->localresaccstr().data(), static_cast<int>(this->localresaccstr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifyAVStream.fullChannelInfo.localResAccStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->localresaccstr(), target);
  }

  // string channelDescription = 4;
  if (this->channeldescription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channeldescription().data(), static_cast<int>(this->channeldescription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifyAVStream.fullChannelInfo.channelDescription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->channeldescription(), target);
  }

  // int32 bwReq = 5;
  if (this->bwreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bwreq(), target);
  }

  // int64 remoteIP = 6;
  if (this->remoteip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->remoteip(), target);
  }

  // int32 remotePort = 7;
  if (this->remoteport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->remoteport(), target);
  }

  // string remotePass = 8;
  if (this->remotepass().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remotepass().data(), static_cast<int>(this->remotepass().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.notifyAVStream.fullChannelInfo.remotePass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->remotepass(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.notifyAVStream.fullChannelInfo)
  return target;
}

size_t notifyAVStream_fullChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string localResAccStr = 3;
  if (this->localresaccstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->localresaccstr());
  }

  // string channelDescription = 4;
  if (this->channeldescription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channeldescription());
  }

  // string remotePass = 8;
  if (this->remotepass().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remotepass());
  }

  // int32 devType = 1;
  if (this->devtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->devtype());
  }

  // int32 dataType = 2;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datatype());
  }

  // int64 remoteIP = 6;
  if (this->remoteip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->remoteip());
  }

  // int32 bwReq = 5;
  if (this->bwreq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bwreq());
  }

  // int32 remotePort = 7;
  if (this->remoteport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remoteport());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void notifyAVStream_fullChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const notifyAVStream_fullChannelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const notifyAVStream_fullChannelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.notifyAVStream.fullChannelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.notifyAVStream.fullChannelInfo)
    MergeFrom(*source);
  }
}

void notifyAVStream_fullChannelInfo::MergeFrom(const notifyAVStream_fullChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.localresaccstr().size() > 0) {

    localresaccstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localresaccstr_);
  }
  if (from.channeldescription().size() > 0) {

    channeldescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channeldescription_);
  }
  if (from.remotepass().size() > 0) {

    remotepass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remotepass_);
  }
  if (from.devtype() != 0) {
    set_devtype(from.devtype());
  }
  if (from.datatype() != 0) {
    set_datatype(from.datatype());
  }
  if (from.remoteip() != 0) {
    set_remoteip(from.remoteip());
  }
  if (from.bwreq() != 0) {
    set_bwreq(from.bwreq());
  }
  if (from.remoteport() != 0) {
    set_remoteport(from.remoteport());
  }
}

void notifyAVStream_fullChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyAVStream_fullChannelInfo::CopyFrom(const notifyAVStream_fullChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.notifyAVStream.fullChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyAVStream_fullChannelInfo::IsInitialized() const {
  return true;
}

void notifyAVStream_fullChannelInfo::Swap(notifyAVStream_fullChannelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void notifyAVStream_fullChannelInfo::InternalSwap(notifyAVStream_fullChannelInfo* other) {
  using std::swap;
  localresaccstr_.Swap(&other->localresaccstr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channeldescription_.Swap(&other->channeldescription_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remotepass_.Swap(&other->remotepass_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(devtype_, other->devtype_);
  swap(datatype_, other->datatype_);
  swap(remoteip_, other->remoteip_);
  swap(bwreq_, other->bwreq_);
  swap(remoteport_, other->remoteport_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata notifyAVStream_fullChannelInfo::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void notifyAVStream::InitAsDefaultInstance() {
  ::DDRCommProto::_notifyAVStream_default_instance_._instance.get_mutable()->reservedchannel_ = const_cast< ::DDRCommProto::notifyAVStream_fullChannelInfo*>(
      ::DDRCommProto::notifyAVStream_fullChannelInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int notifyAVStream::kReservedChannelFieldNumber;
const int notifyAVStream::kRobotMonitorChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

notifyAVStream::notifyAVStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_notifyAVStream.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.notifyAVStream)
}
notifyAVStream::notifyAVStream(const notifyAVStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      robotmonitorchannels_(from.robotmonitorchannels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reservedchannel()) {
    reservedchannel_ = new ::DDRCommProto::notifyAVStream_fullChannelInfo(*from.reservedchannel_);
  } else {
    reservedchannel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.notifyAVStream)
}

void notifyAVStream::SharedCtor() {
  reservedchannel_ = NULL;
}

notifyAVStream::~notifyAVStream() {
  // @@protoc_insertion_point(destructor:DDRCommProto.notifyAVStream)
  SharedDtor();
}

void notifyAVStream::SharedDtor() {
  if (this != internal_default_instance()) delete reservedchannel_;
}

void notifyAVStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* notifyAVStream::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const notifyAVStream& notifyAVStream::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_notifyAVStream.base);
  return *internal_default_instance();
}


void notifyAVStream::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.notifyAVStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robotmonitorchannels_.Clear();
  if (GetArenaNoVirtual() == NULL && reservedchannel_ != NULL) {
    delete reservedchannel_;
  }
  reservedchannel_ = NULL;
  _internal_metadata_.Clear();
}

bool notifyAVStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.notifyAVStream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DDRCommProto.notifyAVStream.fullChannelInfo reservedChannel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reservedchannel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .DDRCommProto.notifyAVStream.fullChannelInfo robotMonitorChannels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robotmonitorchannels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.notifyAVStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.notifyAVStream)
  return false;
#undef DO_
}

void notifyAVStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.notifyAVStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.notifyAVStream.fullChannelInfo reservedChannel = 1;
  if (this->has_reservedchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_reservedchannel(), output);
  }

  // repeated .DDRCommProto.notifyAVStream.fullChannelInfo robotMonitorChannels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robotmonitorchannels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->robotmonitorchannels(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.notifyAVStream)
}

::google::protobuf::uint8* notifyAVStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.notifyAVStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.notifyAVStream.fullChannelInfo reservedChannel = 1;
  if (this->has_reservedchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_reservedchannel(), deterministic, target);
  }

  // repeated .DDRCommProto.notifyAVStream.fullChannelInfo robotMonitorChannels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robotmonitorchannels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->robotmonitorchannels(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.notifyAVStream)
  return target;
}

size_t notifyAVStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.notifyAVStream)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .DDRCommProto.notifyAVStream.fullChannelInfo robotMonitorChannels = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->robotmonitorchannels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robotmonitorchannels(static_cast<int>(i)));
    }
  }

  // .DDRCommProto.notifyAVStream.fullChannelInfo reservedChannel = 1;
  if (this->has_reservedchannel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reservedchannel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void notifyAVStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.notifyAVStream)
  GOOGLE_DCHECK_NE(&from, this);
  const notifyAVStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const notifyAVStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.notifyAVStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.notifyAVStream)
    MergeFrom(*source);
  }
}

void notifyAVStream::MergeFrom(const notifyAVStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.notifyAVStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robotmonitorchannels_.MergeFrom(from.robotmonitorchannels_);
  if (from.has_reservedchannel()) {
    mutable_reservedchannel()->::DDRCommProto::notifyAVStream_fullChannelInfo::MergeFrom(from.reservedchannel());
  }
}

void notifyAVStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.notifyAVStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void notifyAVStream::CopyFrom(const notifyAVStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.notifyAVStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool notifyAVStream::IsInitialized() const {
  return true;
}

void notifyAVStream::Swap(notifyAVStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void notifyAVStream::InternalSwap(notifyAVStream* other) {
  using std::swap;
  CastToBase(&robotmonitorchannels_)->InternalSwap(CastToBase(&other->robotmonitorchannels_));
  swap(reservedchannel_, other->reservedchannel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata notifyAVStream::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqTalk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqTalk::kCallerTypeFieldNumber;
const int reqTalk::kTalkIDFieldNumber;
const int reqTalk::kAvTypeFieldNumber;
const int reqTalk::kLocalTalkAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqTalk::reqTalk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqTalk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqTalk)
}
reqTalk::reqTalk(const reqTalk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      localtalkaddr_(from.localtalkaddr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&callertype_, &from.callertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&avtype_) -
    reinterpret_cast<char*>(&callertype_)) + sizeof(avtype_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqTalk)
}

void reqTalk::SharedCtor() {
  ::memset(&callertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avtype_) -
      reinterpret_cast<char*>(&callertype_)) + sizeof(avtype_));
}

reqTalk::~reqTalk() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqTalk)
  SharedDtor();
}

void reqTalk::SharedDtor() {
}

void reqTalk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqTalk::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqTalk& reqTalk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqTalk.base);
  return *internal_default_instance();
}


void reqTalk::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqTalk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  localtalkaddr_.Clear();
  ::memset(&callertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avtype_) -
      reinterpret_cast<char*>(&callertype_)) + sizeof(avtype_));
  _internal_metadata_.Clear();
}

bool reqTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqTalk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DDRCommProto.reqTalk.eCallerType callerType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_callertype(static_cast< ::DDRCommProto::reqTalk_eCallerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 talkID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 avType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string localTalkAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_localtalkaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->localtalkaddr(this->localtalkaddr_size() - 1).data(),
            static_cast<int>(this->localtalkaddr(this->localtalkaddr_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqTalk.localTalkAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqTalk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqTalk)
  return false;
#undef DO_
}

void reqTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqTalk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.reqTalk.eCallerType callerType = 1;
  if (this->callertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->callertype(), output);
  }

  // int32 talkID = 2;
  if (this->talkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->talkid(), output);
  }

  // int32 avType = 3;
  if (this->avtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->avtype(), output);
  }

  // repeated string localTalkAddr = 4;
  for (int i = 0, n = this->localtalkaddr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->localtalkaddr(i).data(), static_cast<int>(this->localtalkaddr(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqTalk.localTalkAddr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->localtalkaddr(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqTalk)
}

::google::protobuf::uint8* reqTalk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqTalk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.reqTalk.eCallerType callerType = 1;
  if (this->callertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->callertype(), target);
  }

  // int32 talkID = 2;
  if (this->talkid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->talkid(), target);
  }

  // int32 avType = 3;
  if (this->avtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->avtype(), target);
  }

  // repeated string localTalkAddr = 4;
  for (int i = 0, n = this->localtalkaddr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->localtalkaddr(i).data(), static_cast<int>(this->localtalkaddr(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqTalk.localTalkAddr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->localtalkaddr(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqTalk)
  return target;
}

size_t reqTalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqTalk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string localTalkAddr = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->localtalkaddr_size());
  for (int i = 0, n = this->localtalkaddr_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->localtalkaddr(i));
  }

  // .DDRCommProto.reqTalk.eCallerType callerType = 1;
  if (this->callertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->callertype());
  }

  // int32 talkID = 2;
  if (this->talkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->talkid());
  }

  // int32 avType = 3;
  if (this->avtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqTalk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqTalk)
  GOOGLE_DCHECK_NE(&from, this);
  const reqTalk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqTalk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqTalk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqTalk)
    MergeFrom(*source);
  }
}

void reqTalk::MergeFrom(const reqTalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqTalk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  localtalkaddr_.MergeFrom(from.localtalkaddr_);
  if (from.callertype() != 0) {
    set_callertype(from.callertype());
  }
  if (from.talkid() != 0) {
    set_talkid(from.talkid());
  }
  if (from.avtype() != 0) {
    set_avtype(from.avtype());
  }
}

void reqTalk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqTalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqTalk::CopyFrom(const reqTalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqTalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqTalk::IsInitialized() const {
  return true;
}

void reqTalk::Swap(reqTalk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqTalk::InternalSwap(reqTalk* other) {
  using std::swap;
  localtalkaddr_.InternalSwap(CastToBase(&other->localtalkaddr_));
  swap(callertype_, other->callertype_);
  swap(talkid_, other->talkid_);
  swap(avtype_, other->avtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqTalk::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void respTalk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int respTalk::kReceiverTypeFieldNumber;
const int respTalk::kTalkIDFieldNumber;
const int respTalk::kAvTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

respTalk::respTalk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_respTalk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.respTalk)
}
respTalk::respTalk(const respTalk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&receivertype_, &from.receivertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&avtype_) -
    reinterpret_cast<char*>(&receivertype_)) + sizeof(avtype_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.respTalk)
}

void respTalk::SharedCtor() {
  ::memset(&receivertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avtype_) -
      reinterpret_cast<char*>(&receivertype_)) + sizeof(avtype_));
}

respTalk::~respTalk() {
  // @@protoc_insertion_point(destructor:DDRCommProto.respTalk)
  SharedDtor();
}

void respTalk::SharedDtor() {
}

void respTalk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* respTalk::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const respTalk& respTalk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_respTalk.base);
  return *internal_default_instance();
}


void respTalk::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.respTalk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&receivertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avtype_) -
      reinterpret_cast<char*>(&receivertype_)) + sizeof(avtype_));
  _internal_metadata_.Clear();
}

bool respTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.respTalk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DDRCommProto.respTalk.eReceiverType receiverType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_receivertype(static_cast< ::DDRCommProto::respTalk_eReceiverType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 talkID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 avType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.respTalk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.respTalk)
  return false;
#undef DO_
}

void respTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.respTalk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.respTalk.eReceiverType receiverType = 1;
  if (this->receivertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->receivertype(), output);
  }

  // int32 talkID = 2;
  if (this->talkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->talkid(), output);
  }

  // int32 avType = 3;
  if (this->avtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->avtype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.respTalk)
}

::google::protobuf::uint8* respTalk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.respTalk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DDRCommProto.respTalk.eReceiverType receiverType = 1;
  if (this->receivertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->receivertype(), target);
  }

  // int32 talkID = 2;
  if (this->talkid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->talkid(), target);
  }

  // int32 avType = 3;
  if (this->avtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->avtype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.respTalk)
  return target;
}

size_t respTalk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.respTalk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .DDRCommProto.respTalk.eReceiverType receiverType = 1;
  if (this->receivertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->receivertype());
  }

  // int32 talkID = 2;
  if (this->talkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->talkid());
  }

  // int32 avType = 3;
  if (this->avtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->avtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void respTalk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.respTalk)
  GOOGLE_DCHECK_NE(&from, this);
  const respTalk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const respTalk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.respTalk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.respTalk)
    MergeFrom(*source);
  }
}

void respTalk::MergeFrom(const respTalk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.respTalk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receivertype() != 0) {
    set_receivertype(from.receivertype());
  }
  if (from.talkid() != 0) {
    set_talkid(from.talkid());
  }
  if (from.avtype() != 0) {
    set_avtype(from.avtype());
  }
}

void respTalk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.respTalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void respTalk::CopyFrom(const respTalk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.respTalk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool respTalk::IsInitialized() const {
  return true;
}

void respTalk::Swap(respTalk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void respTalk::InternalSwap(respTalk* other) {
  using std::swap;
  swap(receivertype_, other->receivertype_);
  swap(talkid_, other->talkid_);
  swap(avtype_, other->avtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata respTalk::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqTalkHB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqTalkHB::kCallerTalkIDFieldNumber;
const int reqTalkHB::kReceiverTalkIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqTalkHB::reqTalkHB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqTalkHB.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqTalkHB)
}
reqTalkHB::reqTalkHB(const reqTalkHB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&callertalkid_, &from.callertalkid_,
    static_cast<size_t>(reinterpret_cast<char*>(&receivertalkid_) -
    reinterpret_cast<char*>(&callertalkid_)) + sizeof(receivertalkid_));
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqTalkHB)
}

void reqTalkHB::SharedCtor() {
  ::memset(&callertalkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receivertalkid_) -
      reinterpret_cast<char*>(&callertalkid_)) + sizeof(receivertalkid_));
}

reqTalkHB::~reqTalkHB() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqTalkHB)
  SharedDtor();
}

void reqTalkHB::SharedDtor() {
}

void reqTalkHB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqTalkHB::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqTalkHB& reqTalkHB::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqTalkHB.base);
  return *internal_default_instance();
}


void reqTalkHB::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqTalkHB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&callertalkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receivertalkid_) -
      reinterpret_cast<char*>(&callertalkid_)) + sizeof(receivertalkid_));
  _internal_metadata_.Clear();
}

bool reqTalkHB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqTalkHB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 callerTalkID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callertalkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 receiverTalkID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivertalkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqTalkHB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqTalkHB)
  return false;
#undef DO_
}

void reqTalkHB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqTalkHB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 callerTalkID = 1;
  if (this->callertalkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callertalkid(), output);
  }

  // int32 receiverTalkID = 2;
  if (this->receivertalkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receivertalkid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqTalkHB)
}

::google::protobuf::uint8* reqTalkHB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqTalkHB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 callerTalkID = 1;
  if (this->callertalkid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callertalkid(), target);
  }

  // int32 receiverTalkID = 2;
  if (this->receivertalkid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->receivertalkid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqTalkHB)
  return target;
}

size_t reqTalkHB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqTalkHB)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 callerTalkID = 1;
  if (this->callertalkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->callertalkid());
  }

  // int32 receiverTalkID = 2;
  if (this->receivertalkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->receivertalkid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqTalkHB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqTalkHB)
  GOOGLE_DCHECK_NE(&from, this);
  const reqTalkHB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqTalkHB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqTalkHB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqTalkHB)
    MergeFrom(*source);
  }
}

void reqTalkHB::MergeFrom(const reqTalkHB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqTalkHB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.callertalkid() != 0) {
    set_callertalkid(from.callertalkid());
  }
  if (from.receivertalkid() != 0) {
    set_receivertalkid(from.receivertalkid());
  }
}

void reqTalkHB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqTalkHB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqTalkHB::CopyFrom(const reqTalkHB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqTalkHB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqTalkHB::IsInitialized() const {
  return true;
}

void reqTalkHB::Swap(reqTalkHB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqTalkHB::InternalSwap(reqTalkHB* other) {
  using std::swap;
  swap(callertalkid_, other->callertalkid_);
  swap(receivertalkid_, other->receivertalkid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqTalkHB::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqCmd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqCmd::kCmdIDFieldNumber;
const int reqCmd::kCmdMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqCmd::reqCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqCmd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqCmd)
}
reqCmd::reqCmd(const reqCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmdmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmdmsg().size() > 0) {
    cmdmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdmsg_);
  }
  cmdid_ = from.cmdid_;
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqCmd)
}

void reqCmd::SharedCtor() {
  cmdmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdid_ = GOOGLE_LONGLONG(0);
}

reqCmd::~reqCmd() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqCmd)
  SharedDtor();
}

void reqCmd::SharedDtor() {
  cmdmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqCmd::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqCmd& reqCmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqCmd.base);
  return *internal_default_instance();
}


void reqCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmdmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdid_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool reqCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqCmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cmdID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmdMsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmdmsg().data(), static_cast<int>(this->cmdmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqCmd.cmdMsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqCmd)
  return false;
#undef DO_
}

void reqCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cmdID = 1;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cmdid(), output);
  }

  // string cmdMsg = 2;
  if (this->cmdmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmdmsg().data(), static_cast<int>(this->cmdmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqCmd.cmdMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmdmsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqCmd)
}

::google::protobuf::uint8* reqCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cmdID = 1;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cmdid(), target);
  }

  // string cmdMsg = 2;
  if (this->cmdmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmdmsg().data(), static_cast<int>(this->cmdmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqCmd.cmdMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmdmsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqCmd)
  return target;
}

size_t reqCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqCmd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string cmdMsg = 2;
  if (this->cmdmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmdmsg());
  }

  // int64 cmdID = 1;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const reqCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqCmd)
    MergeFrom(*source);
  }
}

void reqCmd::MergeFrom(const reqCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cmdmsg().size() > 0) {

    cmdmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmdmsg_);
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
}

void reqCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqCmd::CopyFrom(const reqCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqCmd::IsInitialized() const {
  return true;
}

void reqCmd::Swap(reqCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqCmd::InternalSwap(reqCmd* other) {
  using std::swap;
  cmdmsg_.Swap(&other->cmdmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cmdid_, other->cmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqCmd::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void respCmd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int respCmd::kCmdIDFieldNumber;
const int respCmd::kRespMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

respCmd::respCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_respCmd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.respCmd)
}
respCmd::respCmd(const respCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  respmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.respmsg().size() > 0) {
    respmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.respmsg_);
  }
  cmdid_ = from.cmdid_;
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.respCmd)
}

void respCmd::SharedCtor() {
  respmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdid_ = GOOGLE_LONGLONG(0);
}

respCmd::~respCmd() {
  // @@protoc_insertion_point(destructor:DDRCommProto.respCmd)
  SharedDtor();
}

void respCmd::SharedDtor() {
  respmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void respCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* respCmd::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const respCmd& respCmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_respCmd.base);
  return *internal_default_instance();
}


void respCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.respCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  respmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdid_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool respCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.respCmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 cmdID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cmdid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string respMsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_respmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->respmsg().data(), static_cast<int>(this->respmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.respCmd.respMsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.respCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.respCmd)
  return false;
#undef DO_
}

void respCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.respCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cmdID = 1;
  if (this->cmdid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cmdid(), output);
  }

  // string respMsg = 2;
  if (this->respmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->respmsg().data(), static_cast<int>(this->respmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respCmd.respMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->respmsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.respCmd)
}

::google::protobuf::uint8* respCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.respCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cmdID = 1;
  if (this->cmdid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cmdid(), target);
  }

  // string respMsg = 2;
  if (this->respmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->respmsg().data(), static_cast<int>(this->respmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respCmd.respMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->respmsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.respCmd)
  return target;
}

size_t respCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.respCmd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string respMsg = 2;
  if (this->respmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->respmsg());
  }

  // int64 cmdID = 1;
  if (this->cmdid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cmdid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void respCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.respCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const respCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const respCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.respCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.respCmd)
    MergeFrom(*source);
  }
}

void respCmd::MergeFrom(const respCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.respCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.respmsg().size() > 0) {

    respmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.respmsg_);
  }
  if (from.cmdid() != 0) {
    set_cmdid(from.cmdid());
  }
}

void respCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.respCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void respCmd::CopyFrom(const respCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.respCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool respCmd::IsInitialized() const {
  return true;
}

void respCmd::Swap(respCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void respCmd::InternalSwap(respCmd* other) {
  using std::swap;
  respmsg_.Swap(&other->respmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cmdid_, other->cmdid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata respCmd::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqFile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqFile::kTarLSMNameFieldNumber;
const int reqFile::kFileTypeFieldNumber;
const int reqFile::kFileNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqFile::reqFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqFile)
}
reqFile::reqFile(const reqFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filenames_(from.filenames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tarlsmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tarlsmname().size() > 0) {
    tarlsmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tarlsmname_);
  }
  filetype_ = from.filetype_;
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqFile)
}

void reqFile::SharedCtor() {
  tarlsmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_ = 0;
}

reqFile::~reqFile() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqFile)
  SharedDtor();
}

void reqFile::SharedDtor() {
  tarlsmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqFile::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqFile& reqFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqFile.base);
  return *internal_default_instance();
}


void reqFile::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filenames_.Clear();
  tarlsmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_ = 0;
  _internal_metadata_.Clear();
}

bool reqFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tarLSMName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tarlsmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqFile.tarLSMName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DDRCommProto.reqFile.eFileTypes fileType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filetype(static_cast< ::DDRCommProto::reqFile_eFileTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fileNames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filenames(this->filenames_size() - 1).data(),
            static_cast<int>(this->filenames(this->filenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqFile.fileNames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqFile)
  return false;
#undef DO_
}

void reqFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqFile.tarLSMName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tarlsmname(), output);
  }

  // .DDRCommProto.reqFile.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetype(), output);
  }

  // repeated string fileNames = 3;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqFile.fileNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filenames(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqFile)
}

::google::protobuf::uint8* reqFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqFile.tarLSMName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tarlsmname(), target);
  }

  // .DDRCommProto.reqFile.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetype(), target);
  }

  // repeated string fileNames = 3;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqFile.fileNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->filenames(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqFile)
  return target;
}

size_t reqFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fileNames = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filenames_size());
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tarlsmname());
  }

  // .DDRCommProto.reqFile.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqFile)
  GOOGLE_DCHECK_NE(&from, this);
  const reqFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqFile)
    MergeFrom(*source);
  }
}

void reqFile::MergeFrom(const reqFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filenames_.MergeFrom(from.filenames_);
  if (from.tarlsmname().size() > 0) {

    tarlsmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tarlsmname_);
  }
  if (from.filetype() != 0) {
    set_filetype(from.filetype());
  }
}

void reqFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqFile::CopyFrom(const reqFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqFile::IsInitialized() const {
  return true;
}

void reqFile::Swap(reqFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqFile::InternalSwap(reqFile* other) {
  using std::swap;
  filenames_.InternalSwap(CastToBase(&other->filenames_));
  tarlsmname_.Swap(&other->tarlsmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filetype_, other->filetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqFile::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void respFile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int respFile::kTarLSMNameFieldNumber;
const int respFile::kFileTypeFieldNumber;
const int respFile::kFileNamesFieldNumber;
const int respFile::kFileContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

respFile::respFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_respFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.respFile)
}
respFile::respFile(const respFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filenames_(from.filenames_),
      filecontents_(from.filecontents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tarlsmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tarlsmname().size() > 0) {
    tarlsmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tarlsmname_);
  }
  filetype_ = from.filetype_;
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.respFile)
}

void respFile::SharedCtor() {
  tarlsmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_ = 0;
}

respFile::~respFile() {
  // @@protoc_insertion_point(destructor:DDRCommProto.respFile)
  SharedDtor();
}

void respFile::SharedDtor() {
  tarlsmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void respFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* respFile::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const respFile& respFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_respFile.base);
  return *internal_default_instance();
}


void respFile::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.respFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filenames_.Clear();
  filecontents_.Clear();
  tarlsmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_ = 0;
  _internal_metadata_.Clear();
}

bool respFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.respFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tarLSMName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tarlsmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.respFile.tarLSMName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DDRCommProto.respFile.eFileTypes fileType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filetype(static_cast< ::DDRCommProto::respFile_eFileTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fileNames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filenames(this->filenames_size() - 1).data(),
            static_cast<int>(this->filenames(this->filenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.respFile.fileNames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fileContents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filecontents()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filecontents(this->filecontents_size() - 1).data(),
            static_cast<int>(this->filecontents(this->filecontents_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.respFile.fileContents"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.respFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.respFile)
  return false;
#undef DO_
}

void respFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.respFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFile.tarLSMName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tarlsmname(), output);
  }

  // .DDRCommProto.respFile.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetype(), output);
  }

  // repeated string fileNames = 3;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFile.fileNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filenames(i), output);
  }

  // repeated string fileContents = 4;
  for (int i = 0, n = this->filecontents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filecontents(i).data(), static_cast<int>(this->filecontents(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFile.fileContents");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filecontents(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.respFile)
}

::google::protobuf::uint8* respFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.respFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFile.tarLSMName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tarlsmname(), target);
  }

  // .DDRCommProto.respFile.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetype(), target);
  }

  // repeated string fileNames = 3;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFile.fileNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->filenames(i), target);
  }

  // repeated string fileContents = 4;
  for (int i = 0, n = this->filecontents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filecontents(i).data(), static_cast<int>(this->filecontents(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFile.fileContents");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->filecontents(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.respFile)
  return target;
}

size_t respFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.respFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fileNames = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filenames_size());
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  // repeated string fileContents = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filecontents_size());
  for (int i = 0, n = this->filecontents_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filecontents(i));
  }

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tarlsmname());
  }

  // .DDRCommProto.respFile.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void respFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.respFile)
  GOOGLE_DCHECK_NE(&from, this);
  const respFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const respFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.respFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.respFile)
    MergeFrom(*source);
  }
}

void respFile::MergeFrom(const respFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.respFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filenames_.MergeFrom(from.filenames_);
  filecontents_.MergeFrom(from.filecontents_);
  if (from.tarlsmname().size() > 0) {

    tarlsmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tarlsmname_);
  }
  if (from.filetype() != 0) {
    set_filetype(from.filetype());
  }
}

void respFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.respFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void respFile::CopyFrom(const respFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.respFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool respFile::IsInitialized() const {
  return true;
}

void respFile::Swap(respFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void respFile::InternalSwap(respFile* other) {
  using std::swap;
  filenames_.InternalSwap(CastToBase(&other->filenames_));
  filecontents_.InternalSwap(CastToBase(&other->filecontents_));
  tarlsmname_.Swap(&other->tarlsmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filetype_, other->filetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata respFile::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqFileAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqFileAddr::kTarLSMNameFieldNumber;
const int reqFileAddr::kFileTypeFieldNumber;
const int reqFileAddr::kFileNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqFileAddr::reqFileAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqFileAddr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqFileAddr)
}
reqFileAddr::reqFileAddr(const reqFileAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filenames_(from.filenames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tarlsmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tarlsmname().size() > 0) {
    tarlsmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tarlsmname_);
  }
  filetype_ = from.filetype_;
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqFileAddr)
}

void reqFileAddr::SharedCtor() {
  tarlsmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_ = 0;
}

reqFileAddr::~reqFileAddr() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqFileAddr)
  SharedDtor();
}

void reqFileAddr::SharedDtor() {
  tarlsmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqFileAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqFileAddr::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqFileAddr& reqFileAddr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqFileAddr.base);
  return *internal_default_instance();
}


void reqFileAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqFileAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filenames_.Clear();
  tarlsmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_ = 0;
  _internal_metadata_.Clear();
}

bool reqFileAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqFileAddr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tarLSMName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tarlsmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqFileAddr.tarLSMName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DDRCommProto.reqFileAddr.eFileTypes fileType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filetype(static_cast< ::DDRCommProto::reqFileAddr_eFileTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fileNames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filenames(this->filenames_size() - 1).data(),
            static_cast<int>(this->filenames(this->filenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqFileAddr.fileNames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqFileAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqFileAddr)
  return false;
#undef DO_
}

void reqFileAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqFileAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqFileAddr.tarLSMName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tarlsmname(), output);
  }

  // .DDRCommProto.reqFileAddr.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetype(), output);
  }

  // repeated string fileNames = 3;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqFileAddr.fileNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filenames(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqFileAddr)
}

::google::protobuf::uint8* reqFileAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqFileAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqFileAddr.tarLSMName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tarlsmname(), target);
  }

  // .DDRCommProto.reqFileAddr.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetype(), target);
  }

  // repeated string fileNames = 3;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqFileAddr.fileNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->filenames(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqFileAddr)
  return target;
}

size_t reqFileAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqFileAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fileNames = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filenames_size());
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tarlsmname());
  }

  // .DDRCommProto.reqFileAddr.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqFileAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqFileAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const reqFileAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqFileAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqFileAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqFileAddr)
    MergeFrom(*source);
  }
}

void reqFileAddr::MergeFrom(const reqFileAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqFileAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filenames_.MergeFrom(from.filenames_);
  if (from.tarlsmname().size() > 0) {

    tarlsmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tarlsmname_);
  }
  if (from.filetype() != 0) {
    set_filetype(from.filetype());
  }
}

void reqFileAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqFileAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqFileAddr::CopyFrom(const reqFileAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqFileAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqFileAddr::IsInitialized() const {
  return true;
}

void reqFileAddr::Swap(reqFileAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqFileAddr::InternalSwap(reqFileAddr* other) {
  using std::swap;
  filenames_.InternalSwap(CastToBase(&other->filenames_));
  tarlsmname_.Swap(&other->tarlsmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filetype_, other->filetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqFileAddr::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void respFileAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int respFileAddr::kTarLSMNameFieldNumber;
const int respFileAddr::kFileTypeFieldNumber;
const int respFileAddr::kFileNamesFieldNumber;
const int respFileAddr::kFileAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

respFileAddr::respFileAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_respFileAddr.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.respFileAddr)
}
respFileAddr::respFileAddr(const respFileAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      filenames_(from.filenames_),
      fileaddr_(from.fileaddr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tarlsmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tarlsmname().size() > 0) {
    tarlsmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tarlsmname_);
  }
  filetype_ = from.filetype_;
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.respFileAddr)
}

void respFileAddr::SharedCtor() {
  tarlsmname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_ = 0;
}

respFileAddr::~respFileAddr() {
  // @@protoc_insertion_point(destructor:DDRCommProto.respFileAddr)
  SharedDtor();
}

void respFileAddr::SharedDtor() {
  tarlsmname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void respFileAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* respFileAddr::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const respFileAddr& respFileAddr::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_respFileAddr.base);
  return *internal_default_instance();
}


void respFileAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.respFileAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filenames_.Clear();
  fileaddr_.Clear();
  tarlsmname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filetype_ = 0;
  _internal_metadata_.Clear();
}

bool respFileAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.respFileAddr)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tarLSMName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tarlsmname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.respFileAddr.tarLSMName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DDRCommProto.respFileAddr.eFileTypes fileType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_filetype(static_cast< ::DDRCommProto::respFileAddr_eFileTypes >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fileNames = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filenames(this->filenames_size() - 1).data(),
            static_cast<int>(this->filenames(this->filenames_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.respFileAddr.fileNames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fileAddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fileaddr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fileaddr(this->fileaddr_size() - 1).data(),
            static_cast<int>(this->fileaddr(this->fileaddr_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.respFileAddr.fileAddr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.respFileAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.respFileAddr)
  return false;
#undef DO_
}

void respFileAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.respFileAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFileAddr.tarLSMName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tarlsmname(), output);
  }

  // .DDRCommProto.respFileAddr.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetype(), output);
  }

  // repeated string fileNames = 3;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFileAddr.fileNames");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filenames(i), output);
  }

  // repeated string fileAddr = 4;
  for (int i = 0, n = this->fileaddr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fileaddr(i).data(), static_cast<int>(this->fileaddr(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFileAddr.fileAddr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fileaddr(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.respFileAddr)
}

::google::protobuf::uint8* respFileAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.respFileAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tarlsmname().data(), static_cast<int>(this->tarlsmname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFileAddr.tarLSMName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tarlsmname(), target);
  }

  // .DDRCommProto.respFileAddr.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetype(), target);
  }

  // repeated string fileNames = 3;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFileAddr.fileNames");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->filenames(i), target);
  }

  // repeated string fileAddr = 4;
  for (int i = 0, n = this->fileaddr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fileaddr(i).data(), static_cast<int>(this->fileaddr(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.respFileAddr.fileAddr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->fileaddr(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.respFileAddr)
  return target;
}

size_t respFileAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.respFileAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fileNames = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filenames_size());
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  // repeated string fileAddr = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fileaddr_size());
  for (int i = 0, n = this->fileaddr_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fileaddr(i));
  }

  // string tarLSMName = 1;
  if (this->tarlsmname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tarlsmname());
  }

  // .DDRCommProto.respFileAddr.eFileTypes fileType = 2;
  if (this->filetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void respFileAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.respFileAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const respFileAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const respFileAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.respFileAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.respFileAddr)
    MergeFrom(*source);
  }
}

void respFileAddr::MergeFrom(const respFileAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.respFileAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filenames_.MergeFrom(from.filenames_);
  fileaddr_.MergeFrom(from.fileaddr_);
  if (from.tarlsmname().size() > 0) {

    tarlsmname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tarlsmname_);
  }
  if (from.filetype() != 0) {
    set_filetype(from.filetype());
  }
}

void respFileAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.respFileAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void respFileAddr::CopyFrom(const respFileAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.respFileAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool respFileAddr::IsInitialized() const {
  return true;
}

void respFileAddr::Swap(respFileAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void respFileAddr::InternalSwap(respFileAddr* other) {
  using std::swap;
  filenames_.InternalSwap(CastToBase(&other->filenames_));
  fileaddr_.InternalSwap(CastToBase(&other->fileaddr_));
  tarlsmname_.Swap(&other->tarlsmname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filetype_, other->filetype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata respFileAddr::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqStatus::kStatusMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqStatus::reqStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqStatus)
}
reqStatus::reqStatus(const reqStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  statusmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.statusmsg().size() > 0) {
    statusmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statusmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqStatus)
}

void reqStatus::SharedCtor() {
  statusmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

reqStatus::~reqStatus() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqStatus)
  SharedDtor();
}

void reqStatus::SharedDtor() {
  statusmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqStatus::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqStatus& reqStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqStatus.base);
  return *internal_default_instance();
}


void reqStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  statusmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool reqStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string statusMsg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statusmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->statusmsg().data(), static_cast<int>(this->statusmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqStatus.statusMsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqStatus)
  return false;
#undef DO_
}

void reqStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string statusMsg = 1;
  if (this->statusmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statusmsg().data(), static_cast<int>(this->statusmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqStatus.statusMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->statusmsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqStatus)
}

::google::protobuf::uint8* reqStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string statusMsg = 1;
  if (this->statusmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->statusmsg().data(), static_cast<int>(this->statusmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqStatus.statusMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->statusmsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqStatus)
  return target;
}

size_t reqStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string statusMsg = 1;
  if (this->statusmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->statusmsg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const reqStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqStatus)
    MergeFrom(*source);
  }
}

void reqStatus::MergeFrom(const reqStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statusmsg().size() > 0) {

    statusmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.statusmsg_);
  }
}

void reqStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqStatus::CopyFrom(const reqStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqStatus::IsInitialized() const {
  return true;
}

void reqStatus::Swap(reqStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqStatus::InternalSwap(reqStatus* other) {
  using std::swap;
  statusmsg_.Swap(&other->statusmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqStatus::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqAlarm::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqAlarm::kAlarmMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqAlarm::reqAlarm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqAlarm.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqAlarm)
}
reqAlarm::reqAlarm(const reqAlarm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alarmmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alarmmsg().size() > 0) {
    alarmmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alarmmsg_);
  }
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqAlarm)
}

void reqAlarm::SharedCtor() {
  alarmmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

reqAlarm::~reqAlarm() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqAlarm)
  SharedDtor();
}

void reqAlarm::SharedDtor() {
  alarmmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqAlarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqAlarm::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqAlarm& reqAlarm::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqAlarm.base);
  return *internal_default_instance();
}


void reqAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alarmmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool reqAlarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqAlarm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string alarmMsg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alarmmsg().data(), static_cast<int>(this->alarmmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqAlarm.alarmMsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqAlarm)
  return false;
#undef DO_
}

void reqAlarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alarmMsg = 1;
  if (this->alarmmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alarmmsg().data(), static_cast<int>(this->alarmmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqAlarm.alarmMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alarmmsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqAlarm)
}

::google::protobuf::uint8* reqAlarm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqAlarm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string alarmMsg = 1;
  if (this->alarmmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alarmmsg().data(), static_cast<int>(this->alarmmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqAlarm.alarmMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alarmmsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqAlarm)
  return target;
}

size_t reqAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqAlarm)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string alarmMsg = 1;
  if (this->alarmmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alarmmsg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqAlarm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const reqAlarm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqAlarm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqAlarm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqAlarm)
    MergeFrom(*source);
  }
}

void reqAlarm::MergeFrom(const reqAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alarmmsg().size() > 0) {

    alarmmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alarmmsg_);
  }
}

void reqAlarm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqAlarm::CopyFrom(const reqAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqAlarm::IsInitialized() const {
  return true;
}

void reqAlarm::Swap(reqAlarm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqAlarm::InternalSwap(reqAlarm* other) {
  using std::swap;
  alarmmsg_.Swap(&other->alarmmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqAlarm::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void reqTextChat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int reqTextChat::kChatTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

reqTextChat::reqTextChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BaseCmd_2eproto::scc_info_reqTextChat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:DDRCommProto.reqTextChat)
}
reqTextChat::reqTextChat(const reqTextChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.chattext().size() > 0) {
    chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
  }
  // @@protoc_insertion_point(copy_constructor:DDRCommProto.reqTextChat)
}

void reqTextChat::SharedCtor() {
  chattext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

reqTextChat::~reqTextChat() {
  // @@protoc_insertion_point(destructor:DDRCommProto.reqTextChat)
  SharedDtor();
}

void reqTextChat::SharedDtor() {
  chattext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void reqTextChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* reqTextChat::descriptor() {
  ::protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const reqTextChat& reqTextChat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BaseCmd_2eproto::scc_info_reqTextChat.base);
  return *internal_default_instance();
}


void reqTextChat::Clear() {
// @@protoc_insertion_point(message_clear_start:DDRCommProto.reqTextChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chattext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool reqTextChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DDRCommProto.reqTextChat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string chatText = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chattext().data(), static_cast<int>(this->chattext().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DDRCommProto.reqTextChat.chatText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DDRCommProto.reqTextChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DDRCommProto.reqTextChat)
  return false;
#undef DO_
}

void reqTextChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DDRCommProto.reqTextChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chatText = 1;
  if (this->chattext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chattext().data(), static_cast<int>(this->chattext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqTextChat.chatText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chattext(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DDRCommProto.reqTextChat)
}

::google::protobuf::uint8* reqTextChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DDRCommProto.reqTextChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chatText = 1;
  if (this->chattext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chattext().data(), static_cast<int>(this->chattext().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DDRCommProto.reqTextChat.chatText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chattext(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DDRCommProto.reqTextChat)
  return target;
}

size_t reqTextChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DDRCommProto.reqTextChat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string chatText = 1;
  if (this->chattext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chattext());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void reqTextChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DDRCommProto.reqTextChat)
  GOOGLE_DCHECK_NE(&from, this);
  const reqTextChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const reqTextChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DDRCommProto.reqTextChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DDRCommProto.reqTextChat)
    MergeFrom(*source);
  }
}

void reqTextChat::MergeFrom(const reqTextChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DDRCommProto.reqTextChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chattext().size() > 0) {

    chattext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chattext_);
  }
}

void reqTextChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DDRCommProto.reqTextChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reqTextChat::CopyFrom(const reqTextChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DDRCommProto.reqTextChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reqTextChat::IsInitialized() const {
  return true;
}

void reqTextChat::Swap(reqTextChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void reqTextChat::InternalSwap(reqTextChat* other) {
  using std::swap;
  chattext_.Swap(&other->chattext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata reqTextChat::GetMetadata() const {
  protobuf_BaseCmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BaseCmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DDRCommProto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::CommonHeader* Arena::CreateMaybeMessage< ::DDRCommProto::CommonHeader >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::CommonHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::heartBeat* Arena::CreateMaybeMessage< ::DDRCommProto::heartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::heartBeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::bcLSAddr_ServerInfo* Arena::CreateMaybeMessage< ::DDRCommProto::bcLSAddr_ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::bcLSAddr_ServerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::bcLSAddr* Arena::CreateMaybeMessage< ::DDRCommProto::bcLSAddr >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::bcLSAddr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqLogin_msgAVStreamReq* Arena::CreateMaybeMessage< ::DDRCommProto::reqLogin_msgAVStreamReq >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqLogin_msgAVStreamReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqLogin* Arena::CreateMaybeMessage< ::DDRCommProto::reqLogin >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqLogin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::respLogin* Arena::CreateMaybeMessage< ::DDRCommProto::respLogin >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::respLogin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::notifyTerminalAccess* Arena::CreateMaybeMessage< ::DDRCommProto::notifyTerminalAccess >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::notifyTerminalAccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::notifySerAccess* Arena::CreateMaybeMessage< ::DDRCommProto::notifySerAccess >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::notifySerAccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::notifyAVStream_fullChannelInfo* Arena::CreateMaybeMessage< ::DDRCommProto::notifyAVStream_fullChannelInfo >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::notifyAVStream_fullChannelInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::notifyAVStream* Arena::CreateMaybeMessage< ::DDRCommProto::notifyAVStream >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::notifyAVStream >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqTalk* Arena::CreateMaybeMessage< ::DDRCommProto::reqTalk >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqTalk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::respTalk* Arena::CreateMaybeMessage< ::DDRCommProto::respTalk >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::respTalk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqTalkHB* Arena::CreateMaybeMessage< ::DDRCommProto::reqTalkHB >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqTalkHB >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqCmd* Arena::CreateMaybeMessage< ::DDRCommProto::reqCmd >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqCmd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::respCmd* Arena::CreateMaybeMessage< ::DDRCommProto::respCmd >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::respCmd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqFile* Arena::CreateMaybeMessage< ::DDRCommProto::reqFile >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqFile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::respFile* Arena::CreateMaybeMessage< ::DDRCommProto::respFile >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::respFile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqFileAddr* Arena::CreateMaybeMessage< ::DDRCommProto::reqFileAddr >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqFileAddr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::respFileAddr* Arena::CreateMaybeMessage< ::DDRCommProto::respFileAddr >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::respFileAddr >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqStatus* Arena::CreateMaybeMessage< ::DDRCommProto::reqStatus >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqAlarm* Arena::CreateMaybeMessage< ::DDRCommProto::reqAlarm >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqAlarm >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::DDRCommProto::reqTextChat* Arena::CreateMaybeMessage< ::DDRCommProto::reqTextChat >(Arena* arena) {
  return Arena::CreateInternal< ::DDRCommProto::reqTextChat >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
